name: hashicorp/vault
resources:
    pki_secret_backend_root_sign_intermediate resource:
        subCategory: ""
        description: Signs intermediate certificate.
        name: pki_secret_backend_root_sign_intermediate resource
        title: pki_secret_backend_root_sign_intermediate resource
        argumentDocs:
            alt_names: '- (Optional) List of alternative names'
            backend: '- (Required) The PKI secret backend the resource belongs to.'
            ca_chain: '- A list of the issuing and intermediate CA certificates in the format specified.'
            certificate: '- The intermediate CA certificate in the format specified.'
            certificate_bundle: |-
                - The concatenation of the intermediate CA and the issuing CA certificates (PEM encoded).
                Requires the format to be set to any of: pem, pem_bundle. The value will be empty for all other formats.
            common_name: '- (Required) CN of intermediate to create'
            country: '- (Optional) The country'
            csr: '- (Required) The CSR'
            exclude_cn_from_sans: '- (Optional) Flag to exclude CN from SANs'
            format: '- (Optional) The format of data'
            ip_sans: '- (Optional) List of alternative IPs'
            issuer_ref: |-
                - (Optional) Specifies the default issuer of this request. May
                be the value default, a name, or an issuer ID. Use ACLs to prevent access to
                the /pki/issuer/:issuer_ref/{issue,sign}/:name paths to prevent users
                overriding the role's issuer_ref value.
            issuing_ca: '- The issuing CA certificate in the format specified.'
            locality: '- (Optional) The locality'
            max_path_length: '- (Optional) The maximum path length to encode in the generated certificate'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization: '- (Optional) The organization'
            other_sans: '- (Optional) List of other SANs'
            ou: '- (Optional) The organization unit'
            permitted_dns_domains: '- (Optional) List of domains for which certificates are allowed to be issued'
            postal_code: '- (Optional) The postal code'
            province: '- (Optional) The province'
            revoke: '- If set to true, the certificate will be revoked on resource destruction.'
            serial: '- Use serial_number instead.'
            serial_number: '- The certificate''s serial number, hex formatted.'
            street_address: '- (Optional) The street address'
            ttl: '- (Optional) Time to live'
            uri_sans: '- (Optional) List of alternative URIs'
            use_csr_values: '- (Optional) Preserve CSR values'
        importStatements: []
    vault_ad_secret_backend:
        subCategory: ""
        description: Creates an Active Directory secret backend for Vault.
        name: vault_ad_secret_backend
        title: vault_ad_secret_backend resource
        examples:
            - name: config
              manifest: |-
                {
                  "backend": "ad",
                  "binddn": "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
                  "bindpass": "SuperSecretPassw0rd",
                  "insecure_tls": "true",
                  "url": "ldaps://ad",
                  "userdn": "CN=Users,DC=corp,DC=example,DC=net"
                }
        argumentDocs:
            anonymous_group_search: |-
                - (Optional) Use anonymous binds when performing LDAP group searches
                (if true the initial credentials will still be used for the initial connection test).
            backend: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to ad.
            binddn: '- (Required) Distinguished name of object to bind when performing user and group search.'
            bindpass: '- (Required) Password to use along with binddn when performing user search.'
            case_sensitive_names: |-
                - (Optional)  If set, user and group names assigned to policies within the
                backend will be case sensitive. Otherwise, names will be normalized to lower case.
            certificate: |-
                - (Optional) CA certificate to use when verifying LDAP server certificate, must be
                x509 PEM encoded.
            client_tls_cert: '- (Optional) Client certificate to provide to the LDAP server, must be x509 PEM encoded.'
            client_tls_key: '- (Optional) Client certificate key to provide to the LDAP server, must be x509 PEM encoded.'
            default_lease_ttl_seconds: '- (Optional) Default lease duration for secrets in seconds.'
            deny_null_bind: |-
                - (Optional) Denies an unauthenticated LDAP bind request if the user's password is empty;
                defaults to true.
            description: '- (Optional) Human-friendly description of the mount for the Active Directory backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            discoverdn: '- (Optional) Use anonymous bind to discover the bind Distinguished Name of a user.'
            formatter: '- (Optional)  Deprecated use password_policy. Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".'
            groupattr: |-
                - (Optional) LDAP attribute to follow on objects returned by  in order to enumerate
                user group membership. Examples: cn or memberOf, etc. Defaults to cn.
            groupdn: '- (Optional) LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).'
            groupfilter: |-
                - (Optional) Go template for querying group membership of user (optional) The template can access
                the following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
            insecure_tls: |-
                - (Optional) Skip LDAP server SSL Certificate verification. This is not recommended for production.
                Defaults to false.
            last_rotation_tolerance: |-
                - (Optional) The number of seconds after a Vault rotation where, if Active Directory
                shows a later rotation, it should be considered out-of-band
            length: |-
                - (Optional) Deprecated use password_policy. The desired length of passwords that Vault generates.
                Mutually exclusive with
            local: |-
                - (Optional) Mark the secrets engine as local-only. Local engines are not replicated or removed by
                replication.Tolerance duration to use when checking the last rotation time.
            max_lease_ttl_seconds: '- (Optional) Maximum possible lease duration for secrets in seconds.'
            max_ttl: '- (Optional) In seconds, the maximum password time-to-live.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            password_policy: on vault-1.11+
            request_timeout: |-
                - (Optional) Timeout, in seconds, for the connection when making requests against the server
                before returning back an error.
            starttls: '- (Optional) Issue a StartTLS command after establishing unencrypted connection.'
            tls_max_version: |-
                - (Optional) Maximum TLS version to use. Accepted values are tls10, tls11,
                tls12 or tls13. Defaults to tls12.
            tls_min_version: |-
                - (Optional)  Minimum TLS version to use. Accepted values are tls10, tls11,
                tls12 or tls13. Defaults to tls12.
            ttl: '- (Optional) In seconds, the default password time-to-live.'
            upndomain: '- (Optional) Enables userPrincipalDomain login with [username]@UPNDomain.'
            url: |-
                - (Required) LDAP URL to connect to. Multiple URLs can be specified by concatenating
                them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.
            use_pre111_group_cn_behavior: |-
                - (Optional) In Vault 1.1.1 a fix for handling group CN values of
                different cases unfortunately introduced a regression that could cause previously defined groups
                to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
                matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
                compatibility. It is enabled by default if the config is upgraded but disabled by default on
                new configurations.
            use_token_groups: |-
                - (Optional) If true, use the Active Directory tokenGroups constructed attribute of the
                user to find the group memberships. This will find all security groups including nested ones.
            userattr: '- (Optional) Attribute used when searching users. Defaults to cn.'
            userdn: '- (Optional) LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.'
        importStatements: []
    vault_ad_secret_backend_library resource:
        subCategory: ""
        description: Creates a library on the Active Directory Secret Backend for Vault.
        name: vault_ad_secret_backend_library resource
        title: vault_ad_secret_backend_library resource
        argumentDocs:
            backend: |-
                - (Required) The path the AD secret backend is mounted at,
                with no leading or trailing /s.
            max_ttl: |-
                - (Optional) The maximum password time-to-live in seconds. Defaults to the configuration
                max_ttl if not provided.
            name: |-
                - (Required) The name to identify this set of service accounts.
                Must be unique within the backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            service_account_names: '- (Required) Specifies the slice of service accounts mapped to this set.'
            ttl: |-
                - (Optional) The password time-to-live in seconds. Defaults to the configuration
                ttl if not provided.
        importStatements: []
    vault_ad_secret_role:
        subCategory: ""
        description: Creates a role on the Active Directory Secret Backend for Vault.
        name: vault_ad_secret_role
        title: vault_ad_secret_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "backend": "${vault_ad_secret_backend.config.backend}",
                  "role": "bob",
                  "service_account_name": "Bob",
                  "ttl": 60
                }
              references:
                backend: vault_ad_secret_backend.config.backend
              dependencies:
                vault_ad_secret_backend.config: |-
                    {
                      "backend": "ad",
                      "binddn": "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
                      "bindpass": "SuperSecretPassw0rd",
                      "insecure_tls": "true",
                      "url": "ldaps://ad",
                      "userdn": "CN=Users,DC=corp,DC=example,DC=net"
                    }
        argumentDocs:
            backend: |-
                - (Required) The path the AD secret backend is mounted at,
                with no leading or trailing /s.
            last_vault_rotation: '- Timestamp of the last password rotation by Vault.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            password_last_set: '- Timestamp of the last password set by Vault.'
            role: |-
                - (Required) The name to identify this role within the backend.
                Must be unique within the backend.
            service_account_name: |-
                - (Required) Specifies the name of the Active Directory service
                account mapped to this role.
            ttl: |-
                - (Optional) The password time-to-live in seconds. Defaults to the configuration
                ttl if not provided.
        importStatements: []
    vault_alicloud_auth_backend_role:
        subCategory: ""
        description: Managing roles in an AliCloud auth backend in Vault
        name: vault_alicloud_auth_backend_role
        title: vault_alicloud_auth_backend_role resource
        examples:
            - name: alicloud
              manifest: |-
                {
                  "arn": "acs:ram:123456:tf:role/foobar",
                  "backend": "${vault_auth_backend.alicloud.path}",
                  "role": "example"
                }
              references:
                backend: vault_auth_backend.alicloud.path
              dependencies:
                vault_auth_backend.alicloud: |-
                    {
                      "path": "alicloud",
                      "type": "alicloud"
                    }
        argumentDocs:
            arn: '- (Required) The role''s arn.'
            backend: |-
                - (Optional; Forces new resource) Path to the mounted AliCloud auth backend.
                Defaults to alicloud
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role: |-
                - (Required; Forces new resource) Name of the role. Must correspond with the name of
                the role reflected in the arn.
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_approle_auth_backend_login:
        subCategory: ""
        description: Log into Vault using the AppRole auth backend.
        name: vault_approle_auth_backend_login
        title: vault_approle_auth_backend_login resource
        examples:
            - name: login
              manifest: |-
                {
                  "backend": "${vault_auth_backend.approle.path}",
                  "role_id": "${vault_approle_auth_backend_role.example.role_id}",
                  "secret_id": "${vault_approle_auth_backend_role_secret_id.id.secret_id}"
                }
              references:
                backend: vault_auth_backend.approle.path
                role_id: vault_approle_auth_backend_role.example.role_id
                secret_id: vault_approle_auth_backend_role_secret_id.id.secret_id
              dependencies:
                vault_approle_auth_backend_role.example: |-
                    {
                      "backend": "${vault_auth_backend.approle.path}",
                      "role_name": "test-role",
                      "token_policies": [
                        "default",
                        "dev",
                        "prod"
                      ]
                    }
                vault_approle_auth_backend_role_secret_id.id: |-
                    {
                      "backend": "${vault_auth_backend.approle.path}",
                      "role_name": "${vault_approle_auth_backend_role.example.role_name}"
                    }
                vault_auth_backend.approle: |-
                    {
                      "type": "approle"
                    }
        argumentDocs:
            accessor: '- The accessor for the token.'
            backend: '- The unique path of the Vault backend to log in with.'
            client_token: '- The Vault token created.'
            lease_duration: '- How long the token is valid for, in seconds.'
            lease_started: '- The date and time the lease started, in RFC 3339 format.'
            metadata: '- The metadata associated with the token.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: '- A list of policies applied to the token.'
            renewable: '- Whether the token is renewable or not.'
            role_id: '- (Required) The ID of the role to log in with.'
            secret_id: |-
                - (Optional) The secret ID of the role to log in with. Required
                unless bind_secret_id is set to false on the role.
        importStatements: []
    vault_approle_auth_backend_role:
        subCategory: ""
        description: Manages AppRole auth backend roles in Vault.
        name: vault_approle_auth_backend_role
        title: vault_approle_auth_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.approle.path}",
                  "role_name": "test-role",
                  "token_policies": [
                    "default",
                    "dev",
                    "prod"
                  ]
                }
              references:
                backend: vault_auth_backend.approle.path
              dependencies:
                vault_auth_backend.approle: |-
                    {
                      "type": "approle"
                    }
        argumentDocs:
            backend: |-
                - (Optional) The unique name of the auth backend to configure.
                Defaults to approle.
            bind_secret_id: |-
                - (Optional) Whether or not to require secret_id to be
                presented when logging in using this AppRole. Defaults to true.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role_id: |-
                - (Optional) The RoleID of this role. If not specified, one will be
                auto-generated.
            role_name: '- (Required) The name of the role.'
            secret_id_bound_cidrs: |-
                - (Optional) If set,
                specifies blocks of IP addresses which can perform the login operation.
            secret_id_num_uses: |-
                - (Optional) The number of times any particular SecretID
                can be used to fetch a token from this AppRole, after which the SecretID will
                expire. A value of zero will allow unlimited uses.
            secret_id_ttl: |-
                - (Optional) The number of seconds after which any SecretID
                expires.
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_approle_auth_backend_role_secret_id:
        subCategory: ""
        description: Manages AppRole auth backend role SecretIDs in Vault.
        name: vault_approle_auth_backend_role_secret_id
        title: vault_approle_auth_backend_role_secret_id resource
        examples:
            - name: id
              manifest: |-
                {
                  "backend": "${vault_auth_backend.approle.path}",
                  "metadata": "${jsonencode(\n    {\n      \"hello\" = \"world\"\n    }\n  )}",
                  "role_name": "${vault_approle_auth_backend_role.example.role_name}"
                }
              references:
                backend: vault_auth_backend.approle.path
                role_name: vault_approle_auth_backend_role.example.role_name
              dependencies:
                vault_approle_auth_backend_role.example: |-
                    {
                      "backend": "${vault_auth_backend.approle.path}",
                      "role_name": "test-role",
                      "token_policies": [
                        "default",
                        "dev",
                        "prod"
                      ]
                    }
                vault_auth_backend.approle: |-
                    {
                      "type": "approle"
                    }
        argumentDocs:
            accessor: '- The unique ID for this SecretID that can be safely logged.'
            cidr_list: |-
                - (Optional) If set, specifies blocks of IP addresses which can
                perform the login operation using this SecretID.
            metadata: |-
                - (Optional) A JSON-encoded string containing metadata in
                key-value pairs to be set on tokens issued with this SecretID.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role_name: '- (Required) The name of the role to create the SecretID for.'
            secret_id: |-
                - (Optional) The SecretID to be created. If set, uses "Push"
                mode.  Defaults to Vault auto-generating SecretIDs.
            with_wrapped_accessor: |-
                - (Optional) Set to true to use the wrapped secret-id accessor as the resource ID.
                If false (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
                invalidated through unwrapping.
            wrapping_accessor: |-
                - The unique ID for the response-wrapped SecretID that can
                be safely logged.
            wrapping_token: '- The token used to retrieve a response-wrapped SecretID.'
            wrapping_ttl: |-
                - (Optional) If set, the SecretID response will be
                response-wrapped
                and available for the duration specified. Only a single unwrapping of the
                token is allowed.
        importStatements: []
    vault_audit:
        subCategory: ""
        description: Writes audit backends for Vault
        name: vault_audit
        title: vault_audit resource
        examples:
            - name: test
              manifest: |-
                {
                  "options": {
                    "file_path": "C:/temp/audit.txt"
                  },
                  "type": "file"
                }
            - name: test
              manifest: |-
                {
                  "local": false,
                  "options": {
                    "address": "127.0.0.1:8000",
                    "description": "application x socket",
                    "socket_type": "tcp"
                  },
                  "path": "app_socket",
                  "type": "socket"
                }
        argumentDocs:
            description: '- (Optional) Human-friendly description of the audit device.'
            local: '- (Optional) Specifies if the audit device is a local only. Local audit devices are not replicated nor (if a secondary) removed by replication.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            options: '- (Required) Configuration options to pass to the audit device itself.'
            path: '- (optional) The path to mount the audit device. This defaults to the type.'
            type: '- (Required) Type of the audit device, such as ''file''.'
        importStatements: []
    vault_audit_request_header:
        subCategory: ""
        description: Manages audited request headers in Vault
        name: vault_audit_request_header
        title: vault_audit_request_header resource
        examples:
            - name: x_forwarded_for
              manifest: |-
                {
                  "hmac": false,
                  "name": "X-Forwarded-For"
                }
        argumentDocs:
            hmac: '- (Optional) Whether this header''s value should be HMAC''d in the audit logs.'
            name: '- (Required) The name of the request header to audit.'
        importStatements: []
    vault_auth_backend:
        subCategory: ""
        description: Managing roles in an Cert auth backend in Vault
        name: vault_auth_backend
        title: vault_auth_backend resource
        examples:
            - name: cert
              manifest: |-
                {
                  "path": "cert",
                  "type": "cert"
                }
              dependencies:
                vault_cert_auth_backend_role.cert: |-
                    {
                      "allowed_names": [
                        "foo.example.org",
                        "baz.example.org"
                      ],
                      "backend": "${vault_auth_backend.cert.path}",
                      "certificate": "${file(\"/path/to/certs/ca-cert.pem\")}",
                      "name": "foo",
                      "token_max_ttl": 600,
                      "token_policies": [
                        "foo"
                      ],
                      "token_ttl": 300
                    }
        argumentDocs:
            allowed_common_names: '- (Optional array: []) Allowed the common names for authenticated client certificates'
            allowed_dns_sans: '- (Optional array: []) Allowed alternative dns names for authenticated client certificates'
            allowed_email_sans: '- (Optional array: []) Allowed emails for authenticated client certificates'
            allowed_names: '- (Optional string) DEPRECATED: Please use the individual allowed_X_sans parameters instead. Allowed subject names for authenticated client certificates'
            allowed_organization_units: ', please update accordingly'
            allowed_organizational_units: |-
                - (Optional array: []) Allowed organization units for authenticated client certificates.
                In previous provider releases this field was incorrectly named
            allowed_uri_sans: '- (Optional array: []) Allowed URIs for authenticated client certificates'
            backend: '- (Optional string: "cert") Path to the mounted Cert auth backend'
            certificate: '- (Required string) CA certificate used to validate client certificates'
            display_name: '- (Optional string: "") The name to display on tokens issued under this role.'
            name: '- (Required string) Name of the role'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            ocsp_ca_certificates: |-
                (Optional string: "") Any additional CA certificates
                needed to verify OCSP responses. Provided as base64 encoded PEM data.
                Requires Vault version 1.13+.
            ocsp_enabled: |-
                (Optional bool: false) - If enabled, validate certificates'
                revocation status using OCSP. Requires Vault version 1.13+.
            ocsp_fail_open: |-
                (Optional bool: false) - If true and an OCSP response cannot
                be fetched or is of an unknown status, the login will proceed as if the
                certificate has not been revoked.
                Requires Vault version 1.13+.
            ocsp_query_all_servers: |-
                (Optional bool: false) - If set to true, rather than
                accepting the first successful OCSP response, query all servers and consider
                the certificate valid only if all servers agree.
                Requires Vault version 1.13+.
            ocsp_servers_override: |-
                (Optional array: []): A comma-separated list of OCSP
                server addresses. If unset, the OCSP server is determined from the
                AuthorityInformationAccess extension on the certificate being inspected.
                Requires Vault version 1.13+.
            required_extensions: |-
                - (Optional array: []) TLS extensions required on
                client certificates
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_auth_backend resource:
        subCategory: ""
        description: Managing Okta auth backends in Vault
        name: vault_auth_backend resource
        title: vault_auth_backend resource
        argumentDocs:
            accessor: '- The mount accessor related to the auth mount. It is useful for integration with Identity Secrets Engine.'
            base_url: '- (Optional) The Okta url. Examples: oktapreview.com, okta.com'
            bypass_okta_mfa: '- (Optional) When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.'
            description: '- (Optional) The description of the auth backend'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            group: |-
                - (Optional) Associate Okta groups with policies within Vault.
                See below for more details.
            group_name: '- (Required) Name of the group within the Okta'
            groups: '- (Optional) List of Okta groups to associate with this user'
            max_ttl: |-
                - (Optional) Maximum duration after which authentication will be expired
                See the documentation for info on valid duration formats.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization: '- (Required) The Okta organization. This will be the first part of the url https://XXX.okta.com'
            path: '- (Optional) Path to mount the Okta auth backend. Default to path okta.'
            policies: '- (Optional) Vault policies to associate with this group'
            token: |-
                - (Optional) The Okta API token. This is required to query Okta for user group membership.
                If this is not supplied only locally configured groups will be enabled.
            ttl: |-
                - (Optional) Duration after which authentication will be expired.
                See the documentation for info on valid duration formats.
            user: |-
                - (Optional) Associate Okta users with groups or policies within Vault.
                See below for more details.
            username: '- (Required) Name of the user within Okta'
        importStatements: []
    vault_auth_backend_group resource:
        subCategory: ""
        description: Managing groups in an Okta auth backend in Vault
        name: vault_auth_backend_group resource
        title: vault_auth_backend_group resource
        argumentDocs:
            group_name: '- (Required) Name of the group within the Okta'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) The path where the Okta auth backend is mounted'
            policies: '- (Optional) Vault policies to associate with this group'
        importStatements: []
    vault_auth_backend_user resource:
        subCategory: ""
        description: Managing users in an Okta auth backend in Vault
        name: vault_auth_backend_user resource
        title: vault_auth_backend_user resource
        argumentDocs:
            groups: '- (Optional) List of Okta groups to associate with this user'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) The path where the Okta auth backend is mounted'
            policies: '- (Optional) List of Vault policies to associate with this user'
            username: '- (Required) Name of the user within Okta'
        importStatements: []
    vault_aws_auth_backend_cert:
        subCategory: ""
        description: Manages a certificate for an AWS Auth Backend in Vault.
        name: vault_aws_auth_backend_cert
        title: vault_aws_auth_backend_cert resource
        examples:
            - name: cert
              manifest: |-
                {
                  "backend": "${vault_auth_backend.aws.path}"
                }
              references:
                backend: vault_auth_backend.aws.path
              dependencies:
                vault_auth_backend.aws: |-
                    {
                      "type": "aws"
                    }
        argumentDocs:
            aws_public_cert: |-
                - (Required) The  Base64 encoded AWS Public key required to
                verify PKCS7 signature of the EC2 instance metadata. You can find this key in
                the AWS
                documentation.
            backend: |-
                - (Optional) The path the AWS auth backend being configured was
                mounted at.  Defaults to aws.
            cert_name: '- (Required) The name of the certificate.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            type: |-
                - (Optional) Either "pkcs7" or "identity", indicating the type of
                document which can be verified using the given certificate. Defaults to
                "pkcs7".
        importStatements: []
    vault_aws_auth_backend_client:
        subCategory: ""
        description: Configures the client used by an AWS Auth Backend in Vault.
        name: vault_aws_auth_backend_client
        title: vault_aws_auth_backend_client resource
        examples:
            - name: example
              manifest: |-
                {
                  "access_key": "INSERT_AWS_ACCESS_KEY",
                  "backend": "${vault_auth_backend.example.path}",
                  "secret_key": "INSERT_AWS_SECRET_KEY"
                }
              references:
                backend: vault_auth_backend.example.path
              dependencies:
                vault_auth_backend.example: |-
                    {
                      "type": "aws"
                    }
        argumentDocs:
            access_key: |-
                - (Optional) The AWS access key that Vault should use for the
                auth backend.
            backend: |-
                - (Optional) The path the AWS auth backend being configured was
                mounted at.  Defaults to aws.
            ec2_endpoint: |-
                - (Optional) Override the URL Vault uses when making EC2 API
                calls.
            iam_endpoint: |-
                - (Optional) Override the URL Vault uses when making IAM API
                calls.
            iam_server_id_header_value: |-
                - (Optional) The value to require in the
                X-Vault-AWS-IAM-Server-ID header as part of GetCallerIdentity requests
                that are used in the IAM auth method.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            secret_key: |-
                - (Optional) The AWS secret key that Vault should use for the
                auth backend.
            sts_endpoint: |-
                - (Optional) Override the URL Vault uses when making STS API
                calls.
            sts_region: |-
                - (Optional) Override the default region when making STS API
                calls. The sts_endpoint argument must be set when using sts_region.
            use_sts_region_from_client: |-
                - (Optional) Available in Vault v1.15+. If set,
                overrides both sts_endpoint and sts_region to instead use the region
                specified in the client request headers for IAM-based authentication.
                This can be useful when you have client requests coming from different
                regions and want flexibility in which regional STS API is used.
        importStatements: []
    vault_aws_auth_backend_config_identity:
        subCategory: ""
        description: Manages AWS auth backend identity configuration in Vault.
        name: vault_aws_auth_backend_config_identity
        title: vault_aws_auth_backend_config_identity resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.aws.path}",
                  "iam_alias": "full_arn",
                  "iam_metadata": [
                    "canonical_arn",
                    "account_id"
                  ]
                }
              references:
                backend: vault_auth_backend.aws.path
              dependencies:
                vault_auth_backend.aws: |-
                    {
                      "type": "aws"
                    }
        argumentDocs:
            ec2_alias: |-
                - (Optional) How to generate the identity alias when using the ec2 auth method. Valid choices are
                role_id, instance_id, and image_id. Defaults to role_id
            ec2_metadata: |-
                - (Optional) The metadata to include on the token returned by the login endpoint. This metadata will be
                added to both audit logs, and on the ec2_alias
            iam_alias: |-
                - (Optional) How to generate the identity alias when using the iam auth method. Valid choices are
                role_id, unique_id, and full_arn. Defaults to role_id
            iam_metadata: |-
                - (Optional) The metadata to include on the token returned by the login endpoint. This metadata will be
                added to both audit logs, and on the iam_alias
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_aws_auth_backend_identity_whitelist:
        subCategory: ""
        description: Configures the periodic tidying operation of the whitelisted identity entries.
        name: vault_aws_auth_backend_identity_whitelist
        title: vault_aws_auth_backend_identity_whitelist resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.example.path}",
                  "safety_buffer": 3600
                }
              references:
                backend: vault_auth_backend.example.path
              dependencies:
                vault_auth_backend.example: |-
                    {
                      "type": "aws"
                    }
        argumentDocs:
            backend: '- (Optional) The path of the AWS backend being configured.'
            disable_periodic_tidy: |-
                - (Optional) If set to true, disables the periodic
                tidying of the identity-whitelist entries.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            safety_buffer: |-
                - (Optional) The amount of extra time, in minutes, that must
                have passed beyond the roletag expiration, before it is removed from the
                backend storage.
        importStatements: []
    vault_aws_auth_backend_login:
        subCategory: ""
        description: Manages Vault tokens acquired using the AWS auth backend.
        name: vault_aws_auth_backend_login
        title: vault_aws_auth_backend_login resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.example.path}",
                  "identity": "BASE64ENCODEDIDENTITYDOCUMENT",
                  "role": "${vault_aws_auth_backend_role.example.role}",
                  "signature": "BASE64ENCODEDSHA256IDENTITYDOCUMENTSIGNATURE"
                }
              references:
                backend: vault_auth_backend.example.path
                role: vault_aws_auth_backend_role.example.role
              dependencies:
                vault_auth_backend.aws: |-
                    {
                      "path": "aws",
                      "type": "aws"
                    }
                vault_aws_auth_backend_client.example: |-
                    {
                      "access_key": "123456789012",
                      "backend": "${vault_auth_backend.aws.path}",
                      "secret_key": "AWSSECRETKEYGOESHERE"
                    }
                vault_aws_auth_backend_role.example: |-
                    {
                      "auth_type": "ec2",
                      "backend": "${vault_auth_backend.aws.path}",
                      "bound_account_id": "123456789012",
                      "bound_ami_id": "ami-8c1be5f6",
                      "bound_iam_instance_profile_arns": [
                        "arn:aws:iam::123456789012:instance-profile/MyProfile"
                      ],
                      "bound_subnet_id": "vpc-133128f1",
                      "bound_vpc_id": "vpc-b61106d4",
                      "depends_on": [
                        "vault_aws_auth_backend_client.example"
                      ],
                      "max_ttl": 120,
                      "role": "test-role",
                      "token_policies": [
                        "default",
                        "dev",
                        "prod"
                      ],
                      "ttl": 60
                    }
        argumentDocs:
            accessor: '- The token''s accessor.'
            auth_type: '- The authentication type used to generate this token.'
            backend: |-
                - (Optional) The unique name of the AWS auth backend. Defaults to
                'aws'.
            client_token: '- The token returned by Vault.'
            iam_http_request_method: |-
                - (Optional) The HTTP method used in the signed IAM
                request.
            iam_request_body: |-
                - (Optional) The base64-encoded body of the signed
                request.
            iam_request_headers: |-
                - (Optional) The base64-encoded, JSON serialized
                representation of the GetCallerIdentity HTTP request headers.
            iam_request_url: |-
                - (Optional) The base64-encoded HTTP URL used in the signed
                request.
            identity: |-
                - (Optional) The base64-encoded EC2 instance identity document to
                authenticate with. Can be retrieved from the EC2 metadata server.
            lease_duration: |-
                - The duration in seconds the token will be valid, relative
                to the time in lease_start_time.
            lease_start_time: |-
                - The approximate time at which the token was created,
                using the clock of the system where Terraform was running.
            metadata: |-
                - A map of information returned by the Vault server about the
                authentication used to generate this token.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            nonce: |-
                - (Optional) The unique nonce to be used for login requests. Can be
                set to a user-specified value, or will contain the server-generated value
                once a token is issued. EC2 instances can only acquire a single token until
                the whitelist is tidied again unless they keep track of this nonce.
            pkcs7: |-
                - (Optional) The PKCS#7 signature of the identity document to
                authenticate with, with all newline characters removed. Can be retrieved from
                the EC2 metadata server.
            policies: '- The Vault policies assigned to this token.'
            renewable: '- Set to true if the token can be extended through renewal.'
            role: |-
                - (Optional) The name of the AWS auth backend role to create tokens
                against.
            signature: |-
                - (Optional) The base64-encoded SHA256 RSA signature of the
                instance identity document to authenticate with, with all newline characters
                removed. Can be retrieved from the EC2 metadata server.
        importStatements: []
    vault_aws_auth_backend_role:
        subCategory: ""
        description: Manages AWS auth backend roles in Vault.
        name: vault_aws_auth_backend_role
        title: vault_aws_auth_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "auth_type": "iam",
                  "backend": "${vault_auth_backend.aws.path}",
                  "bound_account_ids": [
                    "123456789012"
                  ],
                  "bound_ami_ids": [
                    "ami-8c1be5f6"
                  ],
                  "bound_iam_instance_profile_arns": [
                    "arn:aws:iam::123456789012:instance-profile/MyProfile"
                  ],
                  "bound_iam_role_arns": [
                    "arn:aws:iam::123456789012:role/MyRole"
                  ],
                  "bound_subnet_ids": [
                    "vpc-133128f1"
                  ],
                  "bound_vpc_ids": [
                    "vpc-b61106d4"
                  ],
                  "inferred_aws_region": "us-east-1",
                  "inferred_entity_type": "ec2_instance",
                  "role": "test-role",
                  "token_max_ttl": 120,
                  "token_policies": [
                    "default",
                    "dev",
                    "prod"
                  ],
                  "token_ttl": 60
                }
              references:
                backend: vault_auth_backend.aws.path
              dependencies:
                vault_auth_backend.aws: |-
                    {
                      "type": "aws"
                    }
        argumentDocs:
            allow_instance_migration: |-
                - (Optional) If set to true, allows migration of
                the underlying instance where the client resides.
            auth_type: |-
                - (Optional) The auth type permitted for this role. Valid choices
                are ec2 and iam. Defaults to iam.
            backend: '- (Optional) Path to the mounted aws auth backend.'
            bound_account_ids: |-
                - (Optional) If set, defines a constraint on the EC2
                instances that can perform the login operation that they should be using the
                account ID specified by this field. auth_type must be set to ec2 or
                inferred_entity_type must be set to ec2_instance to use this constraint.
            bound_ami_ids: |-
                - (Optional) If set, defines a constraint on the EC2 instances
                that can perform the login operation that they should be using the AMI ID
                specified by this field. auth_type must be set to ec2 or
                inferred_entity_type must be set to ec2_instance to use this constraint.
            bound_iam_instance_profile_arns: |-
                - (Optional) If set, defines a constraint on
                the EC2 instances that can perform the login operation that they must be
                associated with an IAM instance profile ARN which has a prefix that matches
                the value specified by this field. The value is prefix-matched as though it
                were a glob ending in *. auth_type must be set to ec2 or
                inferred_entity_type must be set to ec2_instance to use this constraint.
            bound_iam_principal_arns: |-
                - (Optional) If set, defines the IAM principal that
                must be authenticated when auth_type is set to iam. Wildcards are
                supported at the end of the ARN.
            bound_iam_role_arns: |-
                - (Optional) If set, defines a constraint on the EC2
                instances that can perform the login operation that they must match the IAM
                role ARN specified by this field. auth_type must be set to ec2 or
                inferred_entity_type must be set to ec2_instance to use this constraint.
            bound_regions: |-
                - (Optional) If set, defines a constraint on the EC2 instances
                that can perform the login operation that the region in their identity
                document must match the one specified by this field. auth_type must be set
                to ec2 or inferred_entity_type must be set to ec2_instance to use this
                constraint.
            bound_subnet_ids: |-
                - (Optional) If set, defines a constraint on the EC2
                instances that can perform the login operation that they be associated with
                the subnet ID that matches the value specified by this field. auth_type
                must be set to ec2 or inferred_entity_type must be set to ec2_instance
                to use this constraint.
            bound_vpc_ids: |-
                - (Optional) If set, defines a constraint on the EC2 instances
                that can perform the login operation that they be associated with the VPC ID
                that matches the value specified by this field. auth_type must be set to
                ec2 or inferred_entity_type must be set to ec2_instance to use this
                constraint.
            disallow_reauthentication: |-
                - (Optional) IF set to true, only allows a
                single token to be granted per instance ID. This can only be set when
                auth_type is set to ec2.
            inferred_aws_region: |-
                - (Optional) When inferred_entity_type is set, this
                is the region to search for the inferred entities. Required if
                inferred_entity_type is set. This only applies when auth_type is set to
                iam.
            inferred_entity_type: |-
                - (Optional) If set, instructs Vault to turn on
                inferencing. The only valid value is ec2_instance, which instructs Vault to
                infer that the role comes from an EC2 instance in an IAM instance profile.
                This only applies when auth_type is set to iam.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            resolve_aws_unique_ids: |-
                - (Optional, Forces new resource) Only valid when
                auth_type is iam. If set to true, the bound_iam_principal_arns are
                resolved to AWS Unique
                IDs
                for the bound principal ARN. This field is ignored when a
                bound_iam_principal_arn ends in a wildcard. Resolving to unique IDs more
                closely mimics the behavior of AWS services in that if an IAM user or role is
                deleted and a new one is recreated with the same name, those new users or
                roles won't get access to roles in Vault that were permissioned to the prior
                principals of the same name. Defaults to true.
                Once set to true, this cannot be changed to false without recreating the role.
            role: '- (Required) The name of the role.'
            role_id: '- The Vault generated role ID.'
            role_tag: |-
                - (Optional) If set, enable role tags for this role. The value set
                for this field should be the key of the tag on the EC2 instance. auth_type
                must be set to ec2 or inferred_entity_type must be set to ec2_instance
                to use this constraint.
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_aws_auth_backend_role_tag:
        subCategory: ""
        description: Reads role tags from a Vault AWS auth backend.
        name: vault_aws_auth_backend_role_tag
        title: vault_aws_auth_backend_role_tag resource
        examples:
            - name: test
              manifest: |-
                {
                  "backend": "${vault_auth_backend.aws.path}",
                  "instance_id": "i-1234567",
                  "max_ttl": "1h",
                  "policies": [
                    "prod",
                    "dev",
                    "test"
                  ],
                  "role": "${vault_aws_auth_backend_role.role.role}"
                }
              references:
                backend: vault_auth_backend.aws.path
                role: vault_aws_auth_backend_role.role.role
              dependencies:
                vault_auth_backend.aws: |-
                    {
                      "path": "%s",
                      "type": "aws"
                    }
                vault_aws_auth_backend_role.role: |-
                    {
                      "auth_type": "ec2",
                      "backend": "${vault_auth_backend.aws.path}",
                      "bound_account_id": "123456789012",
                      "policies": [
                        "dev",
                        "prod",
                        "qa",
                        "test"
                      ],
                      "role": "%s",
                      "role_tag": "VaultRoleTag"
                    }
        argumentDocs:
            allow_instance_migration: '- (Optional) If set, allows migration of the underlying instances where the client resides. Use with caution.'
            backend: |-
                - (Optional) The path to the AWS auth backend to
                read role tags from, with no leading or trailing /s. Defaults to "aws".
            disallow_reauthentication: '- (Optional) If set, only allows a single token to be granted per instance ID.'
            instance_id: '- (Optional) Instance ID for which this tag is intended for. If set, the created tag can only be used by the instance with the given ID.'
            max_ttl: '- (Optional) The maximum TTL of the tokens issued using this role.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: '- (Optional) The policies to be associated with the tag. Must be a subset of the policies associated with the role.'
            role: |-
                - (Required) The name of the AWS auth backend role to read
                role tags from, with no leading or trailing /s.
            tag_key: '- The key of the role tag.'
            tag_value: '- The value to set the role key.'
        importStatements: []
    vault_aws_auth_backend_roletag_blacklist:
        subCategory: ""
        description: Configures the periodic tidying operation of the blacklisted role tag entries.
        name: vault_aws_auth_backend_roletag_blacklist
        title: vault_aws_auth_backend_roletag_blacklist resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.example.path}",
                  "safety_buffer": 360
                }
              references:
                backend: vault_auth_backend.example.path
              dependencies:
                vault_auth_backend.example: |-
                    {
                      "type": "aws"
                    }
        argumentDocs:
            backend: |-
                - (Required) The path the AWS auth backend being configured was
                mounted at.
            disable_periodic_tidy: |-
                - (Optional) If set to true, disables the periodic
                tidying of the roletag blacklist entries. Defaults to false.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            safety_buffer: |-
                - (Optional) The amount of extra time that must have passed
                beyond the roletag expiration, before it is removed from the backend storage.
                Defaults to 259,200 seconds, or 72 hours.
        importStatements: []
    vault_aws_auth_backend_sts_role:
        subCategory: ""
        description: Configures an STS role in the Vault AWS Auth backend.
        name: vault_aws_auth_backend_sts_role
        title: vault_aws_auth_backend_sts_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "account_id": "1234567890",
                  "backend": "${vault_auth_backend.aws.path}",
                  "sts_role": "arn:aws:iam::1234567890:role/my-role"
                }
              references:
                backend: vault_auth_backend.aws.path
              dependencies:
                vault_auth_backend.aws: |-
                    {
                      "type": "aws"
                    }
        argumentDocs:
            account_id: '- (Optional) The AWS account ID to configure the STS role for.'
            backend: |-
                - (Optional) The path the AWS auth backend being configured was
                mounted at.  Defaults to aws.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            sts_role: |-
                - (Optional) The STS role to assume when verifying requests made
                by EC2 instances in the account specified by account_id.
        importStatements: []
    vault_aws_secret_backend:
        subCategory: ""
        description: Creates an AWS secret backend for Vault.
        name: vault_aws_secret_backend
        title: vault_aws_secret_backend resource
        examples:
            - name: aws
              manifest: |-
                {
                  "access_key": "AKIA.....",
                  "secret_key": "AWS secret key"
                }
            - name: aws
              manifest: |-
                {
                  "identity_token_audience": "\u003cTOKEN_AUDIENCE\u003e",
                  "identity_token_ttl": "\u003cTOKEN_TTL\u003e",
                  "role_arn": "\u003cAWS_ROLE_ARN\u003e"
                }
        argumentDocs:
            access_key: |-
                - (Optional) The AWS Access Key ID this backend should use to
                issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
            default_lease_ttl_seconds: |-
                - (Optional) The default TTL for credentials
                issued by this backend.
            description: '- (Optional) A human-friendly description for this backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            iam_endpoint: '- (Optional) Specifies a custom HTTP IAM endpoint to use.'
            identity_token_audience: '- (Optional) The audience claim value. Requires Vault 1.16+.'
            identity_token_key: '- (Optional) The key to use for signing identity tokens. Requires Vault 1.16+.'
            identity_token_ttl: '- (Optional) The TTL of generated identity tokens in seconds. Requires Vault 1.16+.'
            local: '- (Optional) Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas.'
            max_lease_ttl_seconds: |-
                - (Optional) The maximum TTL that can be requested
                for credentials issued by this backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to aws.
            region: '- (Optional) The AWS region for API calls. Defaults to us-east-1.'
            role_arn: '- (Optional) Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.'
            secret_key: |-
                - (Optional) The AWS Secret Key this backend should use to
                issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
            sts_endpoint: '- (Optional) Specifies a custom HTTP STS endpoint to use.'
            username_template: '- (Optional)  Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:'
        importStatements: []
    vault_aws_secret_backend_role:
        subCategory: ""
        description: Creates a role on an AWS Secret Backend for Vault.
        name: vault_aws_secret_backend_role
        title: vault_aws_secret_backend_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "backend": "${vault_aws_secret_backend.aws.path}",
                  "credential_type": "iam_user",
                  "name": "deploy",
                  "policy_document": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n"
                }
              references:
                backend: vault_aws_secret_backend.aws.path
              dependencies:
                vault_aws_secret_backend.aws: |-
                    {
                      "access_key": "AKIA.....",
                      "secret_key": "AWS secret key"
                    }
        argumentDocs:
            backend: |-
                - (Required) The path the AWS secret backend is mounted at,
                with no leading or trailing /s.
            credential_type: |-
                - (Required) Specifies the type of credential to be used when
                retrieving credentials from the role. Must be one of iam_user, assumed_role, or
                federation_token.
            default_sts_ttl: |-
                - (Optional) The default TTL in seconds for STS credentials.
                When a TTL is not specified when STS credentials are requested,
                and a default TTL is specified on the role,
                then this default TTL will be used. Valid only when credential_type is one of
                assumed_role or federation_token.
            iam_groups: |-
                (Optional) - A list of IAM group names. IAM users generated
                against this vault role will be added to these IAM Groups. For a credential
                type of assumed_role or federation_token, the policies sent to the
                corresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the
                policies from each group in iam_groups combined with the policy_document
                and policy_arns parameters.
            max_sts_ttl: |-
                - (Optional) The max allowed TTL in seconds for STS credentials
                (credentials TTL are capped to max_sts_ttl). Valid only when credential_type is
                one of assumed_role or federation_token.
            name: |-
                - (Required) The name to identify this role within the backend.
                Must be unique within the backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            permissions_boundary_arn: |-
                - (Optional) The ARN of the AWS Permissions
                Boundary to attach to IAM users created in the role. Valid only when
                credential_type is iam_user. If not specified, then no permissions boundary
                policy will be attached.
            policy_arns: |-
                - (Optional) Specifies a list of AWS managed policy ARNs. The
                behavior depends on the credential type. With iam_user, the policies will be
                attached to IAM users when they are requested. With assumed_role and
                federation_token, the policy ARNs will act as a filter on what the credentials
                can do, similar to policy_document. When credential_type is iam_user or
                federation_token, at least one of policy_document or policy_arns must
                be specified.
            policy_document: |-
                - (Optional) The IAM policy document for the role. The
                behavior depends on the credential type. With iam_user, the policy document
                will be attached to the IAM user generated and augment the permissions the IAM
                user has. With assumed_role and federation_token, the policy document will
                act as a filter on what the credentials can do, similar to policy_arns.
            role_arns: |-
                - (Optional) Specifies the ARNs of the AWS roles this Vault role
                is allowed to assume. Required when credential_type is assumed_role and
                prohibited otherwise.
            user_path: |-
                - (Optional) The path for the user name. Valid only when
                credential_type is iam_user. Default is /.
        importStatements: []
    vault_aws_secret_backend_static_role:
        subCategory: ""
        description: Creates a static role for the AWS secret backend for Vault.
        name: vault_aws_secret_backend_static_role
        title: vault_aws_secret_backend_static_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "backend": "${vault_aws_secret_backend.aws.path}",
                  "name": "test",
                  "rotation_period": "3600",
                  "username": "my-test-user"
                }
              references:
                backend: vault_aws_secret_backend.aws.path
              dependencies:
                vault_aws_secret_backend.aws: |-
                    {
                      "description": "Obtain AWS credentials.",
                      "path": "my-aws"
                    }
        argumentDocs:
            backend: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to aws
            name: |-
                - (Required) The name to identify this role within the backend.
                Must be unique within the backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            rotation_period: '- (Required) How often Vault should rotate the password of the user entry.'
            username: '- (Required) The username of the existing AWS IAM to manage password rotation for.'
        importStatements: []
    vault_azure_auth_backend_config:
        subCategory: ""
        description: Configures the Azure Auth Backend in Vault.
        name: vault_azure_auth_backend_config
        title: vault_azure_auth_backend_config resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.example.path}",
                  "client_id": "11111111-2222-3333-4444-555555555555",
                  "client_secret": "01234567890123456789",
                  "resource": "https://vault.hashicorp.com",
                  "tenant_id": "11111111-2222-3333-4444-555555555555"
                }
              references:
                backend: vault_auth_backend.example.path
              dependencies:
                vault_auth_backend.example: |-
                    {
                      "type": "azure"
                    }
        argumentDocs:
            backend: |-
                - (Optional) The path the Azure auth backend being configured was
                mounted at.  Defaults to azure.
            client_id: |-
                - (Optional) The client id for credentials to query the Azure APIs.
                Currently read permissions to query compute resources are required.
            client_secret: |-
                - (Optional) The client secret for credentials to query the
                Azure APIs.
            environment: |-
                - (Optional) The Azure cloud environment. Valid values:
                AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
                AzureGermanCloud.  Defaults to AzurePublicCloud.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            resource: |-
                - (Required) The configured URL for the application registered in
                Azure Active Directory.
            tenant_id: |-
                - (Required) The tenant id for the Azure Active Directory
                organization.
        importStatements: []
    vault_azure_auth_backend_role:
        subCategory: ""
        description: Manages Azure auth backend roles in Vault.
        name: vault_azure_auth_backend_role
        title: vault_azure_auth_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.azure.path}",
                  "bound_resource_groups": [
                    "123456789012"
                  ],
                  "bound_subscription_ids": [
                    "11111111-2222-3333-4444-555555555555"
                  ],
                  "role": "test-role",
                  "token_max_ttl": 120,
                  "token_policies": [
                    "default",
                    "dev",
                    "prod"
                  ],
                  "token_ttl": 60
                }
              references:
                backend: vault_auth_backend.azure.path
              dependencies:
                vault_auth_backend.azure: |-
                    {
                      "type": "azure"
                    }
        argumentDocs:
            bound_group_ids: |-
                - (Optional) If set, defines a constraint on the groups
                that can perform the login operation that they should be using the group
                ID specified by this field.
            bound_locations: |-
                - (Optional) If set, defines a constraint on the virtual machines
                that can perform the login operation that the location in their identity
                document must match the one specified by this field.
            bound_resource_groups: |-
                - (Optional) If set, defines a constraint on the virtual
                machines that can perform the login operation that they be associated with
                the resource group that matches the value specified by this field.
            bound_scale_sets: |-
                - (Optional) If set, defines a constraint on the virtual
                machines that can perform the login operation that they must match the scale set
                specified by this field.
            bound_service_principal_ids: |-
                - (Optional) If set, defines a constraint on the
                service principals that can perform the login operation that they should be possess
                the ids specified by this field.
            bound_subscription_ids: |-
                - (Optional) If set, defines a constraint on the subscriptions
                that can perform the login operation to ones which  matches the value specified by this
                field.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role: '- (Required) The name of the role.'
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_azure_secret_backend:
        subCategory: ""
        description: Creates an azure secret backend for Vault.
        name: vault_azure_secret_backend
        title: vault_azure_secret_backend resource
        examples:
            - name: azure
              manifest: |-
                {
                  "client_id": "11111111-2222-3333-4444-333333333333",
                  "client_secret": "12345678901234567890",
                  "environment": "AzurePublicCloud",
                  "subscription_id": "11111111-2222-3333-4444-111111111111",
                  "tenant_id": "11111111-2222-3333-4444-222222222222",
                  "use_microsoft_graph_api": true
                }
            - name: azure
              manifest: |-
                {
                  "client_id": "11111111-2222-3333-4444-333333333333",
                  "client_secret": "12345678901234567890",
                  "environment": "AzurePublicCloud",
                  "subscription_id": "11111111-2222-3333-4444-111111111111",
                  "tenant_id": "11111111-2222-3333-4444-222222222222",
                  "use_microsoft_graph_api": false
                }
        argumentDocs:
            client_id: (string:"") - The OAuth2 client id to connect to Azure.
            client_secret: (string:"") - The OAuth2 client secret to connect to Azure.
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            environment: (string:"") - The Azure environment.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '(string: <optional>) - The unique path this backend should be mounted at. Defaults to azure.'
            subscription_id: '(string: <required>) - The subscription id for the Azure Active Directory.'
            tenant_id: '(string: <required>) - The tenant id for the Azure Active Directory.'
            use_microsoft_graph_api: |-
                (bool: <optional>) - Indicates whether the secrets engine should use
                the Microsoft Graph API. This parameter has been deprecated and will be ignored in vault-1.12+.
                For more information, please refer to the Vault docs
        importStatements: []
    vault_azure_secret_backend_role:
        subCategory: ""
        description: Creates an azure secret backend role for Vault.
        name: vault_azure_secret_backend_role
        title: vault_azure_secret_backend_role resource
        examples:
            - name: generated_role
              manifest: |-
                {
                  "azure_roles": [
                    {
                      "role_name": "Reader",
                      "scope": "/subscriptions/${var.subscription_id}/resourceGroups/azure-vault-group"
                    }
                  ],
                  "backend": "${vault_azure_secret_backend.azure.path}",
                  "max_ttl": 600,
                  "role": "generated_role",
                  "sign_in_audience": "AzureADMyOrg",
                  "tags": [
                    "team:engineering",
                    "environment:development"
                  ],
                  "ttl": 300
                }
              references:
                backend: vault_azure_secret_backend.azure.path
              dependencies:
                vault_azure_secret_backend.azure: |-
                    {
                      "client_id": "${var.client_id}",
                      "client_secret": "${var.client_secret}",
                      "subscription_id": "${var.subscription_id}",
                      "tenant_id": "${var.tenant_id}"
                    }
            - name: existing_object_id
              manifest: |-
                {
                  "application_object_id": "11111111-2222-3333-4444-44444444444",
                  "backend": "${vault_azure_secret_backend.azure.path}",
                  "max_ttl": 600,
                  "role": "existing_object_id",
                  "ttl": 300
                }
              references:
                backend: vault_azure_secret_backend.azure.path
              dependencies:
                vault_azure_secret_backend.azure: |-
                    {
                      "client_id": "${var.client_id}",
                      "client_secret": "${var.client_secret}",
                      "subscription_id": "${var.subscription_id}",
                      "tenant_id": "${var.tenant_id}"
                    }
        argumentDocs:
            application_object_id: |-
                - (Optional) Application Object ID for an existing service principal that will
                be used instead of creating dynamic service principals. If present, azure_roles and permanently_delete will be ignored.
            azure_groups: '- (Optional) List of Azure groups to be assigned to the generated service principal.'
            azure_roles: '- (Optional) List of Azure roles to be assigned to the generated service principal.'
            backend: '- (Optional) Path to the mounted Azure auth backend'
            max_ttl: |-
                – (Optional) Specifies the maximum TTL for service principals generated using this role. Accepts time
                suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine max TTL time.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            permanently_delete: |-
                - (Optional) Indicates whether the applications and service principals created by Vault will be permanently
                deleted when the corresponding leases expire. Defaults to false. For Vault v1.12+.
            role: '- (Required) Name of the Azure role'
            sign_in_audience: |-
                - (Optional) Specifies the security principal types that are allowed to sign in to the application.
                Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount. Requires Vault 1.16+.
            tags: '- (Optional) - A list of Azure tags to attach to an application. Requires Vault 1.16+.'
            ttl: |-
                – (Optional) Specifies the default TTL for service principals generated using this role.
                Accepts time suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine default TTL time.
        importStatements: []
    vault_consul_secret_backend:
        subCategory: ""
        description: Creates a Consul secret backend for Vault.
        name: vault_consul_secret_backend
        title: vault_consul_secret_backend resource
        examples:
            - name: test
              manifest: |-
                {
                  "address": "127.0.0.1:8500",
                  "description": "Manages the Consul backend",
                  "path": "consul",
                  "token": "4240861b-ce3d-8530-115a-521ff070dd29"
                }
            - name: test
              manifest: |-
                {
                  "address": "127.0.0.1:8500",
                  "bootstrap": true,
                  "description": "Bootstrap the Consul backend",
                  "path": "consul"
                }
        argumentDocs:
            address: '- (Required) Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".'
            bootstrap: '- (Optional) Denotes that the resource is used to bootstrap the Consul ACL system.'
            ca_cert: '- (Optional) CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.'
            client_cert: |-
                - (Optional) Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if
                this is set you need to also set client_key.
            client_key: |-
                - (Optional) Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set
                you need to also set client_cert.
            default_lease_ttl_seconds: '- (Optional) The default TTL for credentials issued by this backend.'
            description: '- (Optional) A human-friendly description for this backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            local: '- (Optional) Specifies if the secret backend is local only.'
            max_lease_ttl_seconds: |-
                - (Optional) The maximum TTL that can be requested
                for credentials issued by this backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Optional) The unique location this backend should be mounted at. Must not begin or end with a /. Defaults
                to consul.
            scheme: '- (Optional) Specifies the URL scheme to use. Defaults to http.'
            token: |-
                - (Optional) The Consul management token this backend should use to issue new tokens. This field is required
                when bootstrap is false.
        importStatements: []
    vault_consul_secret_backend_role:
        subCategory: ""
        description: Manages a Consul secrets role for a Consul secrets engine in Vault.
        name: vault_consul_secret_backend_role
        title: vault_consul_secret_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_consul_secret_backend.test.path}",
                  "consul_policies": [
                    "example-policy"
                  ],
                  "name": "test-role"
                }
              references:
                backend: vault_consul_secret_backend.test.path
              dependencies:
                vault_consul_secret_backend.test: |-
                    {
                      "address": "127.0.0.1:8500",
                      "description": "Manages the Consul backend",
                      "path": "consul",
                      "token": "4240861b-ce3d-8530-115a-521ff070dd29"
                    }
        argumentDocs:
            backend: '- (Optional) The unique name of an existing Consul secrets backend mount. Must not begin or end with a /. One of path or backend is required.'
            consul_namespace: |-
                - (Optional) The Consul namespace that the token will be created in.
                Applicable for Vault 1.10+ and Consul 1.7+".
            consul_policies: '- (Optional)SEE NOTE The list of Consul ACL policies to associate with these roles.'
            consul_roles: |-
                - (Optional)SEE NOTE Set of Consul roles to attach to the token.
                Applicable for Vault 1.10+ with Consul 1.5+.
            local: '- (Optional) Indicates that the token should not be replicated globally and instead be local to the current datacenter.'
            max_ttl: '- (Optional) Maximum TTL for leases associated with this role, in seconds.'
            name: '- (Required) The name of the Consul secrets engine role to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            node_identities: |-
                - (Optional)SEE NOTE Set of Consul node
                identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.8+.
            partition: |-
                - (Optional) The admin partition that the token will be created in.
                Applicable for Vault 1.10+ and Consul 1.11+".
            policies: |-
                - (Optional) The list of Consul ACL policies to associate with these roles.
                NOTE: The new parameter consul_policies should be used in favor of this. This parameter,
                policies, remains supported for legacy users, but Vault has deprecated this field.
            service_identities: |-
                - (Optional)SEE NOTE Set of Consul
                service identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.5+.
            token_type: |-
                - (Optional) Specifies the type of token to create when using this role. Valid values are "client" or "management".
                Deprecated: Consul 1.11 and later removed the legacy ACL system which supported this field.
            ttl: '- (Optional) Specifies the TTL for this role.'
        importStatements: []
    vault_database_secret_backend_connection:
        subCategory: ""
        description: Configures a database secret backend connection for Vault.
        name: vault_database_secret_backend_connection
        title: vault_database_secret_backend_connection resource
        examples:
            - name: postgres
              manifest: |-
                {
                  "allowed_roles": [
                    "dev",
                    "prod"
                  ],
                  "backend": "${vault_mount.db.path}",
                  "name": "postgres",
                  "postgresql": [
                    {
                      "connection_url": "postgres://username:password@host:port/database"
                    }
                  ]
                }
              references:
                backend: vault_mount.db.path
              dependencies:
                vault_mount.db: |-
                    {
                      "path": "postgres",
                      "type": "database"
                    }
        argumentDocs:
            allowed_roles: |-
                - (Optional) A list of roles that are allowed to use this
                connection.
            auth_type: '- (Optional) Enable IAM authentication to a Google Cloud instance when set to gcp_iam'
            backend: '- (Required) The unique name of the Vault mount to configure.'
            base64_pem: '- (Optional) Required if tls is true. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.'
            bucket_name: '- (Optional) Required for Couchbase versions prior to 6.5.0. This is only used to verify vault''s connection to the server.'
            ca_cert: '- (Optional) The contents of a PEM-encoded CA cert file to use to verify the Redis server''s identity.'
            ca_path: '- (Optional) The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server''s identity.'
            cassandra: '- (Optional) A nested block containing configuration options for Cassandra connections.'
            client_cert: '- (Optional) The path to the certificate for the Elasticsearch client to present for communication.'
            client_key: '- (Optional) The path to the key for the Elasticsearch client to use for communication.'
            connect_timeout: |-
                - (Optional) The number of seconds to use as a connection
                timeout.
            connection_url: |-
                - (Required) A URL containing connection information. See
                the Vault
                docs
                for an example.
            contained_db: |-
                - (Optional bool: false) For Vault v1.9+. Set to true when the target is a
                Contained Database, e.g. AzureSQL.
                See the Vault
                docs
            couchbase: '- (Optional) A nested block containing configuration options for Couchbase connections.'
            data: '- (Optional) A map of sensitive data to pass to the endpoint. Useful for templated connection strings.'
            disable_escaping: '- (Optional) Disable special character escaping in username and password.'
            disconnect_sessions: '- (Optional) Enable the built-in session disconnect mechanism.'
            elasticsearch: '- (Optional) A nested block containing configuration options for Elasticsearch connections.'
            hana: '- (Optional) A nested block containing configuration options for SAP HanaDB connections.'
            host: '- (Required) The host to connect to.'
            hosts: '- (Required) The hosts to connect to.'
            influxdb: '- (Optional) A nested block containing configuration options for InfluxDB connections.'
            insecure: '- (Optional) Whether to disable certificate verification.'
            insecure_tls: |-
                - (Optional) Whether to skip verification of the server
                certificate when using TLS.
            max_connection_lifetime: |-
                - (Optional) The maximum number of seconds to keep
                a connection alive for.
            max_idle_connections: |-
                - (Optional) The maximum number of idle connections to
                maintain.
            max_open_connections: |-
                - (Optional) The maximum number of open connections to
                use.
            mongodb: '- (Optional) A nested block containing configuration options for MongoDB connections.'
            mongodbatlas: '- (Optional) A nested block containing configuration options for MongoDB Atlas connections.'
            mssql: '- (Optional) A nested block containing configuration options for MSSQL connections.'
            mysql: '- (Optional) A nested block containing configuration options for MySQL connections.'
            mysql_aurora: '- (Optional) A nested block containing configuration options for Aurora MySQL connections.'
            mysql_legacy: '- (Optional) A nested block containing configuration options for legacy MySQL connections.'
            mysql_rds: '- (Optional) A nested block containing configuration options for RDS MySQL connections.'
            name: '- (Required) A unique name to give the database connection.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            oracle: '- (Optional) A nested block containing configuration options for Oracle connections.'
            password: '- (Required) The password to authenticate with.'
            pem_bundle: |-
                - (Optional) Concatenated PEM blocks configuring the certificate
                chain.
            pem_json: '- (Optional) A JSON structure configuring the certificate chain.'
            plugin_name: '- (Optional) Specifies the name of the plugin to use.'
            port: |-
                - (Optional) The default port to connect to if no port is specified as
                part of the host.
            postgresql: '- (Optional) A nested block containing configuration options for PostgreSQL connections.'
            private_key: '- (Required) The Private Programmatic API Key used to connect with MongoDB Atlas API.'
            project_id: '- (Required) The Project ID the Database User should be created within.'
            protocol_version: '- (Optional) The CQL protocol version to use.'
            public_key: '- (Required) The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.'
            redis: '- (Optional) A nested block containing configuration options for Redis connections.'
            redis_elasticache: '- (Optional) A nested block containing configuration options for Redis ElastiCache connections.'
            region: '- (Optional) The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.'
            root_rotation_statements: '- (Optional) A list of database statements to be executed to rotate the root user''s credentials.'
            service_account_json: '- (Optional) JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.'
            snowflake: '- (Optional) A nested block containing configuration options for Snowflake connections.'
            split_statements: '- (Optional) Enable spliting statements after semi-colons.'
            tls: '- (Optional) Whether to use TLS when connecting to Cassandra.'
            tls_ca: '- (Optional) x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.'
            tls_certificate_key: '- (Optional) x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.'
            tls_server_name: '- (Optional) This, if set, is used to set the SNI host when connecting via TLS.'
            url: '- (Required) The url to connect to including the port; e.g. master.my-cluster.xxxxxx.use1.cache.amazonaws.com:6379.'
            username: '- (Required) The username to authenticate with.'
            username_template: '- (Optional) Template describing how dynamic usernames are generated.'
            verify_connection: |-
                - (Optional) Whether the connection should be verified on
                initial configuration or not.
        importStatements: []
    vault_database_secret_backend_role:
        subCategory: ""
        description: Configures a database secret backend role for Vault.
        name: vault_database_secret_backend_role
        title: vault_database_secret_backend_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "backend": "${vault_mount.db.path}",
                  "creation_statements": [
                    "CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';"
                  ],
                  "db_name": "${vault_database_secret_backend_connection.postgres.name}",
                  "name": "dev"
                }
              references:
                backend: vault_mount.db.path
                db_name: vault_database_secret_backend_connection.postgres.name
              dependencies:
                vault_database_secret_backend_connection.postgres: |-
                    {
                      "allowed_roles": [
                        "dev",
                        "prod"
                      ],
                      "backend": "${vault_mount.db.path}",
                      "name": "postgres",
                      "postgresql": [
                        {
                          "connection_url": "postgres://username:password@host:port/database"
                        }
                      ]
                    }
                vault_mount.db: |-
                    {
                      "path": "postgres",
                      "type": "database"
                    }
        argumentDocs:
            backend: '- (Required) The unique name of the Vault mount to configure.'
            ca_cert: (Optional) - The PEM-encoded CA certificate.
            ca_private_key: (Optional) - The PEM-encoded private key for the given ca_cert.
            common_name_template: |-
                (Optional) - A username template
                to be used for the client certificate common name.
            creation_statements: |-
                - (Required) The database statements to execute when
                creating a user.
            credential_config: |-
                (Optional) – Specifies the configuration
                for the given credential_type.
            credential_type: |-
                (Optional) – Specifies the type of credential that
                will be generated for the role. Options include: password, rsa_private_key, client_certificate.
                See the plugin's API page for credential types supported by individual databases.
            db_name: |-
                - (Required) The unique name of the database connection to use for
                the role.
            default_ttl: |-
                - (Optional) The default number of seconds for leases for this
                role.
            format: |-
                (Optional) - The output format of the generated private key
                credential. The private key will be returned from the API in PEM encoding. Options
                include: pkcs8.
            key_bits: |-
                (Optional) - The bit size of the RSA key to generate. Options include:
                2048, 3072, 4096.
            key_type: |-
                (Required) - Specifies the desired key type. Options include:
                rsa, ed25519, ec.
            max_ttl: |-
                - (Optional) The maximum number of seconds for leases for this
                role.
            name: '- (Required) A unique name to give the role.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            password_policy: |-
                (Optional) - The policy
                used for password generation. If not provided, defaults to the password policy of the
                database configuration.
            renew_statements: |-
                - (Optional) The database statements to execute when
                renewing a user.
            revocation_statements: |-
                - (Optional) The database statements to execute when
                revoking a user.
            rollback_statements: |-
                - (Optional) The database statements to execute when
                rolling back creation due to an error.
            signature_bits: |-
                (Optional) - The number of bits to use in the signature algorithm. Options include:
                256 (default), 384, 512.
        importStatements: []
    vault_database_secret_backend_static_role:
        subCategory: ""
        description: Configures a database secret backend static role for Vault.
        name: vault_database_secret_backend_static_role
        title: vault_database_secret_backend_static_role resource
        examples:
            - name: period_role
              manifest: |-
                {
                  "backend": "${vault_mount.db.path}",
                  "db_name": "${vault_database_secret_backend_connection.postgres.name}",
                  "name": "my-period-role",
                  "rotation_period": "3600",
                  "rotation_statements": [
                    "ALTER USER \"{{name}}\" WITH PASSWORD '{{password}}';"
                  ],
                  "username": "example"
                }
              references:
                backend: vault_mount.db.path
                db_name: vault_database_secret_backend_connection.postgres.name
              dependencies:
                vault_database_secret_backend_connection.postgres: |-
                    {
                      "allowed_roles": [
                        "*"
                      ],
                      "backend": "${vault_mount.db.path}",
                      "name": "postgres",
                      "postgresql": [
                        {
                          "connection_url": "postgres://username:password@host:port/database"
                        }
                      ]
                    }
                vault_mount.db: |-
                    {
                      "path": "postgres",
                      "type": "database"
                    }
            - name: schedule_role
              manifest: |-
                {
                  "backend": "${vault_mount.db.path}",
                  "db_name": "${vault_database_secret_backend_connection.postgres.name}",
                  "name": "my-schedule-role",
                  "rotation_schedule": "0 0 * * SAT",
                  "rotation_statements": [
                    "ALTER USER \"{{name}}\" WITH PASSWORD '{{password}}';"
                  ],
                  "rotation_window": "172800",
                  "username": "example"
                }
              references:
                backend: vault_mount.db.path
                db_name: vault_database_secret_backend_connection.postgres.name
              dependencies:
                vault_database_secret_backend_connection.postgres: |-
                    {
                      "allowed_roles": [
                        "*"
                      ],
                      "backend": "${vault_mount.db.path}",
                      "name": "postgres",
                      "postgresql": [
                        {
                          "connection_url": "postgres://username:password@host:port/database"
                        }
                      ]
                    }
                vault_mount.db: |-
                    {
                      "path": "postgres",
                      "type": "database"
                    }
        argumentDocs:
            backend: '- (Required) The unique name of the Vault mount to configure.'
            db_name: '- (Required) The unique name of the database connection to use for the static role.'
            name: '- (Required) A unique name to give the static role.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            rotation_period: |-
                - The amount of time Vault should wait before rotating the password, in seconds.
                Mutually exclusive with rotation_schedule.
            rotation_schedule: |-
                - A cron-style string that will define the schedule on which rotations should occur.
                Mutually exclusive with rotation_period.
            rotation_statements: '- (Optional) Database statements to execute to rotate the password for the configured database user.'
            rotation_window: |-
                - (Optional) The amount of time, in seconds, in which rotations are allowed to occur starting
                from a given rotation_schedule.
            username: '- (Required) The database username that this static role corresponds to.'
        importStatements: []
    vault_database_secrets_mount:
        subCategory: ""
        description: Configures any number of database secrets engines under a single mount resource
        name: vault_database_secrets_mount
        title: vault_database_secrets_mount resource
        examples:
            - name: db
              manifest: |-
                {
                  "mssql": [
                    {
                      "allowed_roles": [
                        "dev1"
                      ],
                      "connection_url": "sqlserver://{{username}}:{{password}}@127.0.0.1:1433",
                      "name": "db1",
                      "password": "super_secret_1",
                      "username": "sa"
                    }
                  ],
                  "path": "db",
                  "postgresql": [
                    {
                      "allowed_roles": [
                        "dev2"
                      ],
                      "connection_url": "postgresql://{{username}}:{{password}}@127.0.0.1:5432/postgres",
                      "name": "db2",
                      "password": "super_secret_2",
                      "username": "postgres",
                      "verify_connection": true
                    }
                  ]
                }
              dependencies:
                vault_database_secret_backend_role.dev1: |-
                    {
                      "backend": "${vault_database_secrets_mount.db.path}",
                      "creation_statements": [
                        "CREATE LOGIN [{{name}}] WITH PASSWORD = '{{password}}';",
                        "CREATE USER [{{name}}] FOR LOGIN [{{name}}];",
                        "GRANT SELECT ON SCHEMA::dbo TO [{{name}}];"
                      ],
                      "db_name": "${vault_database_secrets_mount.db.mssql[0].name}",
                      "name": "dev1"
                    }
                vault_database_secret_backend_role.dev2: |-
                    {
                      "backend": "${vault_database_secrets_mount.db.path}",
                      "creation_statements": [
                        "CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';",
                        "GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"{{name}}\";"
                      ],
                      "db_name": "${vault_database_secrets_mount.db.postgresql[0].name}",
                      "name": "dev2"
                    }
        argumentDocs:
            allowed_managed_keys: '- (Optional) Set of managed key registry entry names that the mount in question is allowed to access'
            allowed_roles: |-
                - (Optional) A list of roles that are allowed to use this
                connection.
            audit_non_hmac_request_keys: '- (Optional) Specifies the list of keys that will not be HMAC''d by audit devices in the request data object.'
            audit_non_hmac_response_keys: '- (Optional) Specifies the list of keys that will not be HMAC''d by audit devices in the response data object.'
            base64_pem: '- (Optional) Required if tls is true. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.'
            bucket_name: '- (Optional) Required for Couchbase versions prior to 6.5.0. This is only used to verify vault''s connection to the server.'
            ca_cert: '- (Optional) The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server''s identity.'
            ca_path: '- (Optional) The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server''s identity.'
            cassandra: |-
                - (Optional) A nested block containing configuration options for Cassandra connections.
                See
            client_cert: '- (Optional) The path to the certificate for the Elasticsearch client to present for communication.'
            client_key: '- (Optional) The path to the key for the Elasticsearch client to use for communication.'
            connect_timeout: |-
                - (Optional) The number of seconds to use as a connection
                timeout.
            connection_url: |-
                - (Required) A URL containing connection information.
                See Vault docs
            contained_db: |-
                - (Optional bool: false) For Vault v1.9+. Set to true when the target is a
                Contained Database, e.g. AzureSQL.
                See Vault docs
            couchbase: |-
                - (Optional) A nested block containing configuration options for Couchbase connections.
                See
            data: '- (Optional) A map of sensitive data to pass to the endpoint. Useful for templated connection strings.'
            default_lease_ttl_seconds: '- (Optional) Default lease duration for tokens and secrets in seconds'
            description: '- (Optional) Human-friendly description of the mount'
            disable_escaping: '- (Optional) Disable special character escaping in username and password.'
            elasticsearch: |-
                - (Optional) A nested block containing configuration options for Elasticsearch connections.
                See
            engine_count: '- The total number of database secrets engines configured.'
            external_entropy_access: '- (Optional) Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault''s external entropy source'
            hana: |-
                - (Optional) A nested block containing configuration options for SAP HanaDB connections.
                See
            host: '- (Required) The host to connect to.'
            hosts: '- (Required) The hosts to connect to.'
            influxdb: |-
                - (Optional) A nested block containing configuration options for InfluxDB connections.
                See
            insecure: '- (Optional) Whether to disable certificate verification.'
            insecure_tls: |-
                - (Optional) Whether to skip verification of the server
                certificate when using TLS.
            local: '- (Optional) Boolean flag that can be explicitly set to true to enforce local mount in HA environment'
            max_connection_lifetime: |-
                - (Optional) The maximum number of seconds to keep
                a connection alive for.
            max_idle_connections: |-
                - (Optional) The maximum number of idle connections to
                maintain.
            max_lease_ttl_seconds: '- (Optional) Maximum possible lease duration for tokens and secrets in seconds'
            max_open_connections: |-
                - (Optional) The maximum number of open connections to
                use.
            mongodb: |-
                - (Optional) A nested block containing configuration options for MongoDB connections.
                See
            mongodbatlas: |-
                - (Optional) A nested block containing configuration options for MongoDB Atlas connections.
                See
            mssql: |-
                - (Optional) A nested block containing configuration options for MSSQL connections.
                See
            mysql: |-
                - (Optional) A nested block containing configuration options for MySQL connections.
                See
            mysql_aurora: |-
                - (Optional) A nested block containing configuration options for Aurora MySQL connections.
                See
            mysql_legacy: |-
                - (Optional) A nested block containing configuration options for legacy MySQL connections.
                See
            mysql_rds: |-
                - (Optional) A nested block containing configuration options for RDS MySQL connections.
                See
            name: for any configured database engine is changed
            options: '- (Optional) Specifies mount type specific options that are passed to the backend'
            oracle: |-
                - (Optional) A nested block containing configuration options for Oracle connections.
                See
            password: '- (Required) The password to authenticate with.'
            path: '- (Required) Where the secret backend will be mounted'
            pem_bundle: |-
                - (Optional) Concatenated PEM blocks configuring the certificate
                chain.
            pem_json: '- (Optional) A JSON structure configuring the certificate chain.'
            plugin_name: '- (Optional) Specifies the name of the plugin to use.'
            port: |-
                - (Optional) The default port to connect to if no port is specified as
                part of the host.
            postgresql: |-
                - (Optional) A nested block containing configuration options for PostgreSQL connections.
                See
            private_key: '- (Required) The Private Programmatic API Key used to connect with MongoDB Atlas API.'
            project_id: '- (Required) The Project ID the Database User should be created within.'
            protocol_version: '- (Optional) The CQL protocol version to use.'
            public_key: '- (Required) The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.'
            redis: |-
                - (Optional) A nested block containing configuration options for Redis connections.
                See
            redis_elasticache: |-
                - (Optional) A nested block containing configuration options for Redis ElastiCache connections.
                See
            redshift: |-
                - (Optional) A nested block containing configuration options for AWS Redshift connections.
                See
            region: |-
                - (Optional) The AWS region where the ElastiCache cluster is hosted.
                If omitted the plugin tries to infer the region from the environment.
            root_rotation_statements: '- (Optional) A list of database statements to be executed to rotate the root user''s credentials.'
            seal_wrap: '- (Optional) Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal''s encryption capability'
            snowflake: |-
                - (Optional) A nested block containing configuration options for Snowflake connections.
                See
            tls: '- (Optional) Whether to use TLS when connecting to Cassandra.'
            tls_ca: '- (Optional) x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.'
            tls_certificate_key: '- (Optional) x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.'
            tls_server_name: '- (Optional) This, if set, is used to set the SNI host when connecting via TLS.'
            url: |-
                - (Required) The URL for Elasticsearch's API. https requires certificate
                by trusted CA if used.
            username: '- (Required) The username to authenticate with.'
            username_template: '- (Optional) Template describing how dynamic usernames are generated.'
            verify_connection: |-
                - (Optional) Whether the connection should be verified on
                initial configuration or not.
        importStatements: []
    vault_egp_policy:
        subCategory: ""
        description: Writes Sentinel endpoint governing policies for Vault
        name: vault_egp_policy
        title: vault_egp_policy resource
        examples:
            - name: allow-all
              manifest: |-
                {
                  "enforcement_level": "soft-mandatory",
                  "name": "allow-all",
                  "paths": [
                    "*"
                  ],
                  "policy": "main = rule {\n  true\n}\n"
                }
        argumentDocs:
            enforcement_level: '- (Required) Enforcement level of Sentinel policy. Can be either advisory or soft-mandatory or hard-mandatory'
            name: '- (Required) The name of the policy'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            paths: '- (Required) List of paths to which the policy will be applied to'
            policy: '- (Required) String containing a Sentinel policy'
        importStatements: []
    vault_gcp_auth_backend_role:
        subCategory: ""
        description: Managing roles in an GCP auth backend in Vault
        name: vault_gcp_auth_backend_role
        title: vault_gcp_auth_backend_role resource
        examples:
            - name: test
              manifest: |-
                {
                  "add_group_aliases": true,
                  "backend": "${vault_auth_backend.gcp.path}",
                  "bound_projects": [
                    "test"
                  ],
                  "bound_service_accounts": [
                    "test"
                  ],
                  "role": "test",
                  "token_max_ttl": 600,
                  "token_policies": [
                    "policy_a",
                    "policy_b"
                  ],
                  "token_ttl": 300,
                  "type": "iam"
                }
              references:
                backend: vault_auth_backend.gcp.path
              dependencies:
                vault_auth_backend.gcp: |-
                    {
                      "path": "gcp",
                      "type": "gcp"
                    }
        argumentDocs:
            allow_gce_inference: '- (Optional) A flag to determine if this role should allow GCE instances to authenticate by inferring service accounts from the GCE identity metadata token.'
            backend: '- (Optional) Path to the mounted GCP auth backend'
            bound_instance_groups: '- (Optional) The instance groups that an authorized instance must belong to in order to be authenticated. If specified, either bound_zones or bound_regions must be set too.'
            bound_labels: '- (Optional) A comma-separated list of GCP labels formatted as "key:value" strings that must be set on authorized GCE instances. Because GCP labels are not currently ACL''d, we recommend that this be used in conjunction with other restrictions.'
            bound_projects: '- (Optional) An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.'
            bound_regions: '- (Optional) The list of regions that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.'
            bound_service_accounts: '- (Optional) GCP Service Accounts allowed to issue tokens under this role. (Note: Required if role is iam)'
            bound_zones: '- (Optional)  The list of zones that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.'
            max_jwt_exp: '- (Optional) The number of seconds past the time of authentication that the login param JWT must expire within. For example, if a user attempts to login with a token that expires within an hour and this is set to 15 minutes, Vault will return an error prompting the user to create a new signed JWT with a shorter exp. The GCE metadata tokens currently do not allow the exp claim to be customized.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role: '- (Required) Name of the GCP role'
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
            type: '- (Required) Type of GCP authentication role (either gce or iam)'
        importStatements: []
    vault_gcp_secret_backend:
        subCategory: ""
        description: Creates an GCP secret backend for Vault.
        name: vault_gcp_secret_backend
        title: vault_gcp_secret_backend resource
        examples:
            - name: gcp
              manifest: |-
                {
                  "credentials": "${file(\"credentials.json\")}"
                }
        argumentDocs:
            credentials: '- (Optional) The GCP service account credentials in JSON format.'
            default_lease_ttl_seconds: |-
                - (Optional) The default TTL for credentials
                issued by this backend. Defaults to '0'.
            description: '- (Optional) A human-friendly description for this backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            local: '- (Optional) Boolean flag that can be explicitly set to true to enforce local mount in HA environment'
            max_lease_ttl_seconds: |-
                - (Optional) The maximum TTL that can be requested
                for credentials issued by this backend. Defaults to '0'.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to gcp.
        importStatements: []
    vault_gcp_secret_impersonated_account:
        subCategory: ""
        description: Creates a Impersonated Account for the GCP Secret Backend for Vault.
        name: vault_gcp_secret_impersonated_account
        title: vault_gcp_secret_impersonated_account resource
        examples:
            - name: impersonated_account
              manifest: |-
                {
                  "backend": "${vault_gcp_secret_backend.gcp.path}",
                  "impersonated_account": "this",
                  "service_account_email": "${google_service_account.this.email}",
                  "token_scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              references:
                backend: vault_gcp_secret_backend.gcp.path
                service_account_email: google_service_account.this.email
              dependencies:
                google_service_account.this: |-
                    {
                      "account_id": "my-awesome-account"
                    }
                vault_gcp_secret_backend.gcp: |-
                    {
                      "credentials": "${file(\"credentials.json\")}",
                      "path": "gcp"
                    }
        argumentDocs:
            backend: '- (Required, Forces new resource) Path where the GCP Secrets Engine is mounted'
            impersonated_account: '- (Required, Forces new resource) Name of the Impersonated Account to create'
            service_account_email: '- (Required, Forces new resource) Email of the GCP service account to impersonate.'
            service_account_project: '- Project the service account belongs to.'
            token_scopes: '- (Required) List of OAuth scopes to assign to access tokens generated under this impersonated account.'
        importStatements: []
    vault_gcp_secret_roleset:
        subCategory: ""
        description: Creates a Roleset for the GCP Secret Backend for Vault.
        name: vault_gcp_secret_roleset
        title: vault_gcp_secret_roleset resource
        examples:
            - name: roleset
              manifest: |-
                {
                  "backend": "${vault_gcp_secret_backend.gcp.path}",
                  "binding": [
                    {
                      "resource": "//cloudresourcemanager.googleapis.com/projects/${local.project}",
                      "roles": [
                        "roles/viewer"
                      ]
                    }
                  ],
                  "project": "${local.project}",
                  "roleset": "project_viewer",
                  "secret_type": "access_token",
                  "token_scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              references:
                backend: vault_gcp_secret_backend.gcp.path
                project: local.project
              dependencies:
                vault_gcp_secret_backend.gcp: |-
                    {
                      "credentials": "${file(\"credentials.json\")}",
                      "path": "gcp"
                    }
        argumentDocs:
            backend: '- (Required, Forces new resource) Path where the GCP Secrets Engine is mounted'
            binding: '- (Required) Bindings to create for this roleset. This can be specified multiple times for multiple bindings. Structure is documented below.'
            binding.resource: '- (Required) Resource or resource path for which IAM policy information will be bound. The resource path may be specified in a few different formats.'
            binding.roles: '- (Required) List of GCP IAM roles for the resource.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            project: '- (Required, Forces new resource) Name of the GCP project that this roleset''s service account will belong to.'
            roleset: '- (Required, Forces new resource) Name of the Roleset to create'
            secret_type: '- (Optional, Forces new resource) Type of secret generated for this role set. Accepted values: access_token, service_account_key. Defaults to access_token.'
            service_account_email: Email of the service account created by Vault for this Roleset.
            token_scopes: '- (Optional, Required for secret_type = "access_token") List of OAuth scopes to assign to access_token secrets generated under this role set (access_token role sets only).'
        importStatements: []
    vault_gcp_secret_static_account:
        subCategory: ""
        description: Creates a Static Account for the GCP Secret Backend for Vault.
        name: vault_gcp_secret_static_account
        title: vault_gcp_secret_static_account resource
        examples:
            - name: static_account
              manifest: |-
                {
                  "backend": "${vault_gcp_secret_backend.gcp.path}",
                  "binding": [
                    {
                      "resource": "//cloudresourcemanager.googleapis.com/projects/${google_service_account.this.project}",
                      "roles": [
                        "roles/viewer"
                      ]
                    }
                  ],
                  "secret_type": "access_token",
                  "service_account_email": "${google_service_account.this.email}",
                  "static_account": "project_viewer",
                  "token_scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              references:
                backend: vault_gcp_secret_backend.gcp.path
                service_account_email: google_service_account.this.email
              dependencies:
                google_service_account.this: |-
                    {
                      "account_id": "my-awesome-account"
                    }
                vault_gcp_secret_backend.gcp: |-
                    {
                      "credentials": "${file(\"credentials.json\")}",
                      "path": "gcp"
                    }
        argumentDocs:
            backend: '- (Required, Forces new resource) Path where the GCP Secrets Engine is mounted'
            binding: '- (Optional) Bindings to create for this static account. This can be specified multiple times for multiple bindings. Structure is documented below.'
            binding.resource: '- (Required) Resource or resource path for which IAM policy information will be bound. The resource path may be specified in a few different formats.'
            binding.roles: '- (Required) List of GCP IAM roles for the resource.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            secret_type: '- (Optional, Forces new resource) Type of secret generated for this static account. Accepted values: access_token, service_account_key. Defaults to access_token.'
            service_account_email: '- (Required, Forces new resource) Email of the GCP service account to manage.'
            service_account_project: '- Project the service account belongs to.'
            static_account: '- (Required, Forces new resource) Name of the Static Account to create'
            token_scopes: '- (Optional, Required for secret_type = "access_token") List of OAuth scopes to assign to access_token secrets generated under this static account (access_token static accounts only).'
        importStatements: []
    vault_generic_endpoint:
        subCategory: ""
        description: Writes arbitrary data to a given path in Vault
        name: vault_generic_endpoint
        title: vault_generic_endpoint resource
        examples:
            - name: u1
              manifest: |-
                {
                  "data_json": "{\n  \"policies\": [\"p1\"],\n  \"password\": \"changeme\"\n}\n",
                  "depends_on": [
                    "${vault_auth_backend.userpass}"
                  ],
                  "ignore_absent_fields": true,
                  "path": "auth/userpass/users/u1"
                }
              dependencies:
                vault_auth_backend.userpass: |-
                    {
                      "type": "userpass"
                    }
            - name: u1_token
              manifest: |-
                {
                  "data_json": "{\n  \"password\": \"changeme\"\n}\n",
                  "depends_on": [
                    "${vault_generic_endpoint.u1}"
                  ],
                  "disable_delete": true,
                  "disable_read": true,
                  "path": "auth/userpass/login/u1"
                }
              dependencies:
                vault_auth_backend.userpass: |-
                    {
                      "type": "userpass"
                    }
            - name: u1_entity
              manifest: |-
                {
                  "data_json": "{\n  \"alias_name\": \"u1\",\n  \"alias_mount_accessor\": vault_auth_backend.userpass.accessor\n}\n",
                  "depends_on": [
                    "${vault_generic_endpoint.u1_token}"
                  ],
                  "disable_delete": true,
                  "disable_read": true,
                  "ignore_absent_fields": true,
                  "path": "identity/lookup/entity",
                  "write_fields": [
                    "id"
                  ]
                }
              dependencies:
                vault_auth_backend.userpass: |-
                    {
                      "type": "userpass"
                    }
        argumentDocs:
            data_json: |-
                - (Required) String containing a JSON-encoded object that will be
                written to the given path as the secret data.
            disable_delete: |-
                : - (Optional) True/false. Set this to true if your
                vault authentication is not able to delete the data or if the endpoint
                does not support the DELETE method. Defaults to false.
            disable_read: |-
                - (Optional) True/false. Set this to true if your vault
                authentication is not able to read the data or if the endpoint does
                not support the GET method. Setting this to true will break drift
                detection. You should set this to true for endpoints that are
                write-only. Defaults to false.
            ignore_absent_fields: |-
                : - (Optional) True/false. If set to true,
                ignore any fields present when the endpoint is read but that were not
                in data_json. Also, if a field that was written is not returned when
                the endpoint is read, treat that field as being up to date. You should
                set this to true when writing to endpoint that, when read, returns a
                different set of fields from the ones you wrote, as is common with
                many configuration endpoints. Defaults to false.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Required) The full logical path at which to write the given
                data. Consult each backend's documentation to see which endpoints
                support the PUT methods and to determine whether they also support
                DELETE and GET.
            write_data: |-
                : - A map whose keys are the top-level data keys
                returned from Vault by the write operation and whose values are the
                corresponding values. This map can only represent string data, so
                any non-string values returned from Vault are serialized as JSON.
                Only fields set in write_fields are present in the JSON data.
            write_data_json: |-
                : - The JSON data returned by the write operation.
                Only fields set in write_fields are present in the JSON data.
            write_fields: |-
                : - (Optional). A list of fields that should be returned
                in write_data_json and write_data. If omitted, data returned by
                the write operation is not available to the resource or included in
                state. This helps to avoid accidental storage of sensitive values in
                state. Some endpoints, such as many dynamic secrets endpoints, return
                data from writing to an endpoint rather than reading it. You should
                use write_fields if you need information returned in this way.
        importStatements: []
    vault_generic_secret:
        subCategory: ""
        description: Writes arbitrary data to a given path in Vault
        name: vault_generic_secret
        title: vault_generic_secret resource
        examples:
            - name: example
              manifest: |-
                {
                  "data_json": "{\n  \"foo\":   \"bar\",\n  \"pizza\": \"cheese\"\n}\n",
                  "path": "secret/foo"
                }
        argumentDocs:
            data: |-
                - A mapping whose keys are the top-level data keys returned from
                Vault and whose values are the corresponding values. This map can only
                represent string data, so any non-string values returned from Vault are
                serialized as JSON.
            data_json: |-
                - (Required) String containing a JSON-encoded object that will be
                written as the secret data at the given path.
            delete_all_versions: |-
                - (Optional) true/false.  Only applicable for kv-v2 stores.
                If set to true, permanently deletes all versions for
                the specified key. The default behavior is to only delete the latest version of the
                secret.
            disable_read: |-
                - (Optional) true/false. Set this to true if your vault
                authentication is not able to read the data. Setting this to true will
                break drift detection. Defaults to false.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Required) The full logical path at which to write the given data.
                To write data into the "generic" secret backend mounted in Vault by default,
                this should be prefixed with secret/. Writing to other backends with this
                resource is possible; consult each backend's documentation to see which
                endpoints support the PUT and DELETE methods.
        importStatements: []
    vault_github_auth_backend:
        subCategory: ""
        description: Manages GitHub Auth mounts in Vault.
        name: vault_github_auth_backend
        title: vault_github_auth_backend resource
        examples:
            - name: example
              manifest: |-
                {
                  "organization": "myorg"
                }
        argumentDocs:
            accessor: '- The mount accessor related to the auth mount. It is useful for integration with Identity Secrets Engine.'
            base_url: |-
                - (Optional) The API endpoint to use. Useful if you
                are running GitHub Enterprise or an API-compatible authentication server.
            description: |-
                - (Optional) Specifies the description of the mount.
                This overrides the current stored value, if any.
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization: '- (Required) The organization configured users must be part of.'
            organization_id: |-
                (Optional) The ID of the organization users must be part of.
                Vault will attempt to fetch and set this value if it is not provided. (Vault 1.10+)
            path: |-
                - (Optional) Path where the auth backend is mounted. Defaults to auth/github
                if not specified.
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
            tune: '- (Optional) Extra configuration block. Structure is documented below.'
            tune.allowed_response_headers: |-
                - (Optional) List of headers to whitelist and allowing
                a plugin to include them in the response.
            tune.audit_non_hmac_request_keys: |-
                - (Optional) Specifies the list of keys that will
                not be HMAC'd by audit devices in the request data object.
            tune.audit_non_hmac_response_keys: |-
                - (Optional) Specifies the list of keys that will
                not be HMAC'd by audit devices in the response data object.
            tune.default_lease_ttl: |-
                - (Optional) Specifies the default time-to-live.
                If set, this overrides the global default.
                Must be a valid duration string
            tune.listing_visibility: |-
                - (Optional) Specifies whether to show this mount in
                the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
            tune.max_lease_ttl: |-
                - (Optional) Specifies the maximum time-to-live.
                If set, this overrides the global default.
                Must be a valid duration string
            tune.passthrough_request_headers: |-
                - (Optional) List of headers to whitelist and
                pass from the request to the backend.
            tune.token_type: |-
                - (Optional) Specifies the type of tokens that should be returned by
                the mount. Valid values are "default-service", "default-batch", "service", "batch".
        importStatements: []
    vault_github_team:
        subCategory: ""
        description: Manages Team mappings for Github Auth backend mounts in Vault.
        name: vault_github_team
        title: vault_github_team resource
        examples:
            - name: tf_devs
              manifest: |-
                {
                  "backend": "${vault_github_auth_backend.example.id}",
                  "policies": [
                    "developer",
                    "read-only"
                  ],
                  "team": "terraform-developers"
                }
              references:
                backend: vault_github_auth_backend.example.id
              dependencies:
                vault_github_auth_backend.example: |-
                    {
                      "organization": "myorg"
                    }
        argumentDocs:
            backend: |-
                - (Required) Path where the github auth backend is mounted. Defaults to github
                if not specified.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: |-
                - (Optional) An array of strings specifying the policies to be set on tokens
                issued using this role.
            team: |-
                - (Required) GitHub team name in "slugified" format, for example: Terraform
                Developers -> terraform-developers.
        importStatements: []
    vault_github_user:
        subCategory: ""
        description: Manages User mappings for Github Auth backend mounts in Vault.
        name: vault_github_user
        title: vault_github_user resource
        examples:
            - name: tf_user
              manifest: |-
                {
                  "backend": "${vault_github_auth_backend.example.id}",
                  "policies": [
                    "developer",
                    "read-only"
                  ],
                  "user": "john.doe"
                }
              references:
                backend: vault_github_auth_backend.example.id
              dependencies:
                vault_github_auth_backend.example: |-
                    {
                      "organization": "myorg"
                    }
        argumentDocs:
            backend: |-
                - (Required) Path where the github auth backend is mounted. Defaults to github
                if not specified.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: |-
                - (Optional) An array of strings specifying the policies to be set on tokens issued
                using this role.
            user: '- (Required) GitHub user name.'
        importStatements: []
    vault_identity_entity:
        subCategory: ""
        description: Creates an Identity Entity for Vault.
        name: vault_identity_entity
        title: vault_identity_entity resource
        examples:
            - name: test
              manifest: |-
                {
                  "metadata": {
                    "foo": "bar"
                  },
                  "name": "tester1",
                  "policies": [
                    "test"
                  ]
                }
        argumentDocs:
            disabled: '- (Optional) True/false Is this entity currently disabled. Defaults to false'
            external_policies: '- (Optional) false by default. If set to true, this resource will ignore any policies return from Vault or specified in the resource. You can use vault_identity_entity_policies to manage policies for this entity in a decoupled manner.'
            id: '- The id of the created entity.'
            metadata: '- (Optional) A Map of additional metadata to associate with the user.'
            name: '- (Required) Name of the identity entity to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: '- (Optional) A list of policies to apply to the entity.'
        importStatements: []
    vault_identity_entity_alias:
        subCategory: ""
        description: Creates an Identity Entity Alias for Vault.
        name: vault_identity_entity_alias
        title: vault_identity_entity_alias resource
        examples:
            - name: test
              manifest: |-
                {
                  "canonical_id": "49877D63-07AD-4B85-BDA8-B61626C477E8",
                  "mount_accessor": "token_1f2bd5",
                  "name": "user_1"
                }
        argumentDocs:
            canonical_id: '- (Required) Entity ID to which this alias belongs to.'
            id: '- ID of the entity alias.'
            mount_accessor: '- (Required) Accessor of the mount to which the alias should belong to.'
            name: '- (Required) Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_identity_entity_policies:
        subCategory: ""
        description: Manages policies for an Identity Entity for Vault.
        name: vault_identity_entity_policies
        title: vault_identity_entity_policies resource
        examples:
            - name: policies
              manifest: |-
                {
                  "entity_id": "${vault_identity_entity.entity.id}",
                  "exclusive": true,
                  "policies": [
                    "default",
                    "test"
                  ]
                }
              references:
                entity_id: vault_identity_entity.entity.id
              dependencies:
                vault_identity_entity.entity: |-
                    {
                      "external_policies": true,
                      "name": "entity"
                    }
            - name: default
              manifest: |-
                {
                  "entity_id": "${vault_identity_entity.entity.id}",
                  "exclusive": false,
                  "policies": [
                    "default",
                    "test"
                  ]
                }
              references:
                entity_id: vault_identity_entity.entity.id
              dependencies:
                vault_identity_entity.entity: |-
                    {
                      "external_policies": true,
                      "name": "entity"
                    }
            - name: others
              manifest: |-
                {
                  "entity_id": "${vault_identity_entity.entity.id}",
                  "exclusive": false,
                  "policies": [
                    "others"
                  ]
                }
              references:
                entity_id: vault_identity_entity.entity.id
              dependencies:
                vault_identity_entity.entity: |-
                    {
                      "external_policies": true,
                      "name": "entity"
                    }
        argumentDocs:
            entity_id: '- (Required) Entity ID to assign policies to.'
            entity_name: '- The name of the entity that are assigned the policies.'
            exclusive: '- (Optional) Defaults to true.'
            "false": ', this resource will simply ensure that the policies specified in the resource are present in the entity. When destroying the resource, the resource will ensure that the policies specified in the resource are removed.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: '- (Required) List of policies to assign to the entity'
            "true": ', this resource will take exclusive control of the policies assigned to the entity and will set it equal to what is specified in the resource.'
        importStatements: []
    vault_identity_group:
        subCategory: ""
        description: Creates an Identity Group for Vault.
        name: vault_identity_group
        title: vault_identity_group resource
        examples:
            - name: internal
              manifest: |-
                {
                  "metadata": {
                    "version": "2"
                  },
                  "name": "internal",
                  "policies": [
                    "dev",
                    "test"
                  ],
                  "type": "internal"
                }
            - name: group
              manifest: |-
                {
                  "metadata": {
                    "version": "1"
                  },
                  "name": "external",
                  "policies": [
                    "test"
                  ],
                  "type": "external"
                }
            - name: internal
              manifest: |-
                {
                  "metadata": {
                    "version": "2"
                  },
                  "name": "internal",
                  "policies": [
                    "dev",
                    "test"
                  ],
                  "type": "internal"
                }
            - name: Internal
              manifest: |-
                {
                  "metadata": {
                    "version": "2"
                  },
                  "name": "Internal",
                  "policies": [
                    "dev",
                    "test"
                  ],
                  "type": "internal"
                }
        argumentDocs:
            external_member_entity_ids: |-
                - (Optional) false by default. If set to true, this resource will ignore any Entity IDs
                returned from Vault or specified in the resource. You can use
                vault_identity_group_member_entity_ids to manage Entity IDs for this group in a
                decoupled manner.
            external_member_group_ids: |-
                - (Optional) false by default. If set to true, this resource will ignore any Group IDs
                returned from Vault or specified in the resource. You can use
                vault_identity_group_member_group_ids to manage Group IDs for this group in a
                decoupled manner.
            external_policies: |-
                - (Optional) false by default. If set to true, this resource will ignore any policies returned from
                Vault or specified in the resource. You can use vault_identity_group_policies to manage
                policies for this group in a decoupled manner.
            id: '- The id of the created group.'
            member_entity_ids: '- (Optional) A list of Entity IDs to be assigned as group members. Not allowed on external groups.'
            member_group_ids: '- (Optional) A list of Group IDs to be assigned as group members. Not allowed on external groups.'
            metadata: '- (Optional) A Map of additional metadata to associate with the group.'
            name: '- (Required, Forces new resource) Name of the identity group to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: '- (Optional) A list of policies to apply to the group.'
            type: '- (Optional, Forces new resource) Type of the group, internal or external. Defaults to internal.'
        importStatements: []
    vault_identity_group_alias:
        subCategory: ""
        description: Creates an Identity Group Alias for Vault.
        name: vault_identity_group_alias
        title: vault_identity_group_alias resource
        examples:
            - name: group-alias
              manifest: |-
                {
                  "canonical_id": "${vault_identity_group.group.id}",
                  "mount_accessor": "${vault_auth_backend.github.accessor}",
                  "name": "Github_Team_Slug"
                }
              references:
                canonical_id: vault_identity_group.group.id
                mount_accessor: vault_auth_backend.github.accessor
              dependencies:
                vault_auth_backend.github: |-
                    {
                      "path": "github",
                      "type": "github"
                    }
                vault_identity_group.group: |-
                    {
                      "name": "test",
                      "policies": [
                        "test"
                      ],
                      "type": "external"
                    }
        argumentDocs:
            canonical_id: '- (Required) ID of the group to which this is an alias.'
            id: '- The id of the created group alias.'
            mount_accessor: '- (Required) Mount accessor of the authentication backend to which this alias belongs to.'
            name: '- (Required, Forces new resource) Name of the group alias to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements:
            - $ terraform import vault_identity_group_alias.group-alias id
            - terraform import vault_identity_group_alias.alias_name 63104e20-88e4-11eb-8d04-cf7ac9d60157
    vault_identity_group_member_entity_ids:
        subCategory: ""
        description: Manages member entities for an Identity Group for Vault.
        name: vault_identity_group_member_entity_ids
        title: vault_identity_group_member_entity_ids resource
        examples:
            - name: members
              manifest: |-
                {
                  "exclusive": true,
                  "group_id": "${vault_identity_group.internal.id}",
                  "member_entity_ids": [
                    "${vault_identity_entity.user.id}"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_entity.user: |-
                    {
                      "name": "user"
                    }
                vault_identity_group.internal: |-
                    {
                      "external_member_entity_ids": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
            - name: test
              manifest: |-
                {
                  "exclusive": false,
                  "group_id": "${vault_identity_group.internal.id}",
                  "member_entity_ids": [
                    "${vault_identity_entity.test_user.id}",
                    "${vault_identity_entity.second_test_user.id}"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_entity.dev_user: |-
                    {
                      "name": "dev"
                    }
                vault_identity_entity.second_test_user: |-
                    {
                      "name": "second_test"
                    }
                vault_identity_entity.test_user: |-
                    {
                      "name": "test"
                    }
                vault_identity_group.internal: |-
                    {
                      "external_member_entity_ids": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
            - name: others
              manifest: |-
                {
                  "exclusive": false,
                  "group_id": "${vault_identity_group.internal.id}",
                  "member_entity_ids": [
                    "${vault_identity_entity.dev_user.id}"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_entity.dev_user: |-
                    {
                      "name": "dev"
                    }
                vault_identity_entity.second_test_user: |-
                    {
                      "name": "second_test"
                    }
                vault_identity_entity.test_user: |-
                    {
                      "name": "test"
                    }
                vault_identity_group.internal: |-
                    {
                      "external_member_entity_ids": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
        argumentDocs:
            exclusive: '- (Optional) Defaults to true.'
            "false": ', this resource will simply ensure that the member entities specified in the resource are present in the group. When destroying the resource, the resource will ensure that the member entities specified in the resource are removed.'
            group_id: '- (Required) Group ID to assign member entities to.'
            group_name: |-
                - The name of the group that are assigned the member entities.
                Deprecated: The value for group_name may not always be accurate
                use data.vault_identity_group.*.group_name, or vault_identity_group.*.group_name instead.
            member_entity_ids: '- (Required) List of member entities that belong to the group'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            "true": ', this resource will take exclusive control of the member entities that belong to the group and will set it equal to what is specified in the resource.'
        importStatements: []
    vault_identity_group_member_group_ids:
        subCategory: ""
        description: Manages member groups for an Identity Group for Vault.
        name: vault_identity_group_member_group_ids
        title: vault_identity_group_member_group_ids resource
        examples:
            - name: members
              manifest: |-
                {
                  "exclusive": true,
                  "group_id": "${vault_identity_group.internal.id}",
                  "member_group_ids": [
                    "${vault_identity_group.users.id}"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_group.internal: |-
                    {
                      "external_member_group_ids": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
                vault_identity_group.users: |-
                    {
                      "metadata": {
                        "version": "2"
                      },
                      "name": "users"
                    }
            - name: members
              manifest: |-
                {
                  "exclusive": false,
                  "group_id": "${vault_identity_group.internal.id}",
                  "member_group_ids": [
                    "${vault_identity_group.users.id}"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_group.internal: |-
                    {
                      "external_member_group_ids": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
                vault_identity_group.users: |-
                    {
                      "metadata": {
                        "version": "2"
                      },
                      "name": "users"
                    }
        argumentDocs:
            exclusive: '- (Optional) Defaults to true.'
            "false": |-
                , this resource will simply ensure that the member groups specified in the resource are present
                in the group. When destroying the resource, the resource will ensure that the member groups specified in the resource
                are removed.
            group_id: '- (Required) Group ID to assign member entities to.'
            member_group_ids: '- (Required) List of member groups that belong to the group'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            "true": |-
                , this resource will take exclusive control of the member groups that belong to the group and will set
                it equal to what is specified in the resource.
        importStatements: []
    vault_identity_group_policies:
        subCategory: ""
        description: Manages policies for an Identity Group for Vault.
        name: vault_identity_group_policies
        title: vault_identity_group_policies resource
        examples:
            - name: policies
              manifest: |-
                {
                  "exclusive": true,
                  "group_id": "${vault_identity_group.internal.id}",
                  "policies": [
                    "default",
                    "test"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_group.internal: |-
                    {
                      "external_policies": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
            - name: default
              manifest: |-
                {
                  "exclusive": false,
                  "group_id": "${vault_identity_group.internal.id}",
                  "policies": [
                    "default",
                    "test"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_group.internal: |-
                    {
                      "external_policies": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
            - name: others
              manifest: |-
                {
                  "exclusive": false,
                  "group_id": "${vault_identity_group.internal.id}",
                  "policies": [
                    "others"
                  ]
                }
              references:
                group_id: vault_identity_group.internal.id
              dependencies:
                vault_identity_group.internal: |-
                    {
                      "external_policies": true,
                      "metadata": {
                        "version": "2"
                      },
                      "name": "internal",
                      "type": "internal"
                    }
        argumentDocs:
            exclusive: '- (Optional) Defaults to true.'
            "false": ', this resource will simply ensure that the policies specified in the resource are present in the group. When destroying the resource, the resource will ensure that the policies specified in the resource are removed.'
            group_id: '- (Required) Group ID to assign policies to.'
            group_name: '- The name of the group that are assigned the policies.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: '- (Required) List of policies to assign to the group'
            "true": ', this resource will take exclusive control of the policies assigned to the group and will set it equal to what is specified in the resource.'
        importStatements: []
    vault_identity_mfa_duo:
        subCategory: ""
        description: Resource for configuring the duo MFA method.
        name: vault_identity_mfa_duo
        title: vault_identity_mfa_duo resource
        examples:
            - name: example
              manifest: |-
                {
                  "api_hostname": "api-xxxxxxxx.duosecurity.com",
                  "integration_key": "secret-int-key",
                  "secret_key": "secret-key"
                }
        argumentDocs:
            api_hostname: '- (Required) API hostname for Duo'
            integration_key: '- (Required) Integration key for Duo'
            method_id: '- Method ID.'
            mount_accessor: '- (Optional) Mount accessor.'
            namespace: '- (Optional) Target namespace. (requires Enterprise)'
            namespace_id: '- Method''s namespace ID.'
            namespace_path: '- Method''s namespace path.'
            push_info: '- (Optional) Push information for Duo.'
            secret_key: '- (Required) Secret key for Duo'
            type: '- MFA type.'
            use_passcode: '- (Optional) Require passcode upon MFA validation.'
            username_format: '- (Optional) A template string for mapping Identity names to MFA methods.'
            uuid: '- (Optional) Resource UUID.'
        importStatements: []
    vault_identity_mfa_login_enforcement:
        subCategory: ""
        description: Resource for configuring MFA login-enforcement
        name: vault_identity_mfa_login_enforcement
        title: vault_identity_mfa_login_enforcement resource
        examples:
            - name: example
              manifest: |-
                {
                  "mfa_method_ids": [
                    "${vault_identity_mfa_duo.example.method_id}"
                  ],
                  "name": "default"
                }
              dependencies:
                vault_identity_mfa_duo.example: |-
                    {
                      "api_hostname": "foo.baz",
                      "integration_key": "int-key",
                      "push_info": "push-info",
                      "secret_key": "secret-key"
                    }
        argumentDocs:
            auth_method_accessors: '- (Optional) Set of auth method accessor IDs.'
            auth_method_types: '- (Optional) Set of auth method types.'
            identity_entity_ids: '- (Optional) Set of identity entity IDs.'
            identity_group_ids: '- (Optional) Set of identity group IDs.'
            mfa_method_ids: '- (Required) Set of MFA method UUIDs.'
            name: '- (Required) Login enforcement name.'
            namespace: '- (Optional) Target namespace. (requires Enterprise)'
            namespace_id: '- Method''s namespace ID.'
            namespace_path: '- Method''s namespace path.'
            uuid: '- (Optional) Resource UUID.'
        importStatements: []
    vault_identity_mfa_okta:
        subCategory: ""
        description: Resource for configuring the okta MFA method.
        name: vault_identity_mfa_okta
        title: vault_identity_mfa_okta resource
        examples:
            - name: example
              manifest: |-
                {
                  "api_token": "token1",
                  "base_url": "qux.baz.com",
                  "org_name": "org1"
                }
        argumentDocs:
            api_token: '- (Required) Okta API token.'
            base_url: '- (Optional) The base domain to use for API requests.'
            method_id: '- Method ID.'
            mount_accessor: '- (Optional) Mount accessor.'
            namespace: '- (Optional) Target namespace. (requires Enterprise)'
            namespace_id: '- Method''s namespace ID.'
            namespace_path: '- Method''s namespace path.'
            org_name: '- (Required) Name of the organization to be used in the Okta API.'
            primary_email: '- (Optional) Only match the primary email for the account.'
            type: '- MFA type.'
            username_format: '- (Optional) A template string for mapping Identity names to MFA methods.'
            uuid: '- (Optional) Resource UUID.'
        importStatements: []
    vault_identity_mfa_pingid:
        subCategory: ""
        description: Resource for configuring the pingid MFA method.
        name: vault_identity_mfa_pingid
        title: vault_identity_mfa_pingid resource
        examples:
            - name: example
              manifest: |-
                {
                  "settings_file_base64": "CnVzZV9iYXNlNjR[...]HBtCg=="
                }
        argumentDocs:
            admin_url: '- (Optional) The admin URL, derived from "settings_file_base64"'
            authenticator_url: '- (Optional) A unique identifier of the organization, derived from "settings_file_base64"'
            idp_url: '- (Optional) The IDP URL, derived from "settings_file_base64"'
            method_id: '- Method ID.'
            mount_accessor: '- (Optional) Mount accessor.'
            namespace: '- (Optional) Target namespace. (requires Enterprise)'
            namespace_id: '- Method''s namespace ID.'
            namespace_path: '- Method''s namespace path.'
            org_alias: '- (Optional) The name of the PingID client organization, derived from "settings_file_base64"'
            settings_file_base64: '- (Required) A base64-encoded third-party settings contents as retrieved from PingID''s configuration page.'
            type: '- MFA type.'
            use_signature: '- (Optional) Use signature value, derived from "settings_file_base64"'
            username_format: '- (Optional) A template string for mapping Identity names to MFA methods.'
            uuid: '- (Optional) Resource UUID.'
        importStatements: []
    vault_identity_mfa_totp:
        subCategory: ""
        description: Resource for configuring the totp MFA method.
        name: vault_identity_mfa_totp
        title: vault_identity_mfa_totp resource
        examples:
            - name: example
              manifest: |-
                {
                  "issuer": "issuer1"
                }
        argumentDocs:
            algorithm: '- (Optional) Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.'
            digits: '- (Optional) The number of digits in the generated TOTP token. This value can either be 6 or 8'
            issuer: '- (Required) The name of the key''s issuing organization.'
            key_size: '- (Optional) Specifies the size in bytes of the generated key.'
            max_validation_attempts: '- (Optional) The maximum number of consecutive failed validation attempts allowed.'
            method_id: '- Method ID.'
            mount_accessor: '- (Optional) Mount accessor.'
            namespace: '- (Optional) Target namespace. (requires Enterprise)'
            namespace_id: '- Method''s namespace ID.'
            namespace_path: '- Method''s namespace path.'
            period: '- (Optional) The length of time in seconds used to generate a counter for the TOTP token calculation.'
            qr_size: '- (Optional) The pixel size of the generated square QR code.'
            skew: '- (Optional) The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.'
            type: '- MFA type.'
            uuid: '- (Optional) Resource UUID.'
        importStatements: []
    vault_identity_oidc:
        subCategory: ""
        description: Configure the Identity Tokens Backend for Vault
        name: vault_identity_oidc
        title: vault_identity_oidc resource
        examples:
            - name: server
              manifest: |-
                {
                  "issuer": "https://www.acme.com"
                }
        argumentDocs:
            issuer: |-
                - (Optional) Issuer URL to be used in the iss claim of the token. If not set, Vault's
                api_addr will be used. The issuer is a case sensitive URL using the https scheme that contains
                scheme, host, and optionally, port number and path components, but no query or fragment
                components.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_identity_oidc_assignment:
        subCategory: ""
        description: Provision OIDC Assignments in Vault.
        name: vault_identity_oidc_assignment
        title: vault_identity_oidc_assignment resource
        examples:
            - name: default
              manifest: |-
                {
                  "entity_ids": [
                    "${vault_identity_entity.test.id}"
                  ],
                  "group_ids": [
                    "${vault_identity_group.internal.id}"
                  ],
                  "name": "assignment"
                }
              dependencies:
                vault_identity_entity.test: |-
                    {
                      "name": "test",
                      "policies": [
                        "test"
                      ]
                    }
                vault_identity_group.internal: |-
                    {
                      "name": "internal",
                      "policies": [
                        "dev",
                        "test"
                      ],
                      "type": "internal"
                    }
        argumentDocs:
            entity_ids: '- (Optional) A set of Vault entity IDs.'
            group_ids: '- (Optional) A set of Vault group IDs.'
            name: '- (Required) The name of the assignment.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_identity_oidc_client:
        subCategory: ""
        description: Provision OIDC Clients in Vault.
        name: vault_identity_oidc_client
        title: vault_identity_oidc_client resource
        examples:
            - name: test
              manifest: |-
                {
                  "access_token_ttl": 7200,
                  "assignments": [
                    "${vault_identity_oidc_assignment.test.name}"
                  ],
                  "id_token_ttl": 2400,
                  "name": "my-app",
                  "redirect_uris": [
                    "http://127.0.0.1:9200/v1/auth-methods/oidc:authenticate:callback",
                    "http://127.0.0.1:8251/callback",
                    "http://127.0.0.1:8080/callback"
                  ]
                }
              dependencies:
                vault_identity_oidc_assignment.test: |-
                    {
                      "entity_ids": [
                        "ascbascas-2231a-sdfaa"
                      ],
                      "group_ids": [
                        "sajkdsad-32414-sfsada"
                      ],
                      "name": "my-assignment"
                    }
        argumentDocs:
            access_token_ttl: '- (Optional) The time-to-live for access tokens obtained by the client.'
            assignments: '- (Optional) A list of assignment resources associated with the client.'
            client_type: |-
                - (Optional) The client type based on its ability to maintain confidentiality of credentials.
                The following client types are supported: confidential, public. Defaults to confidential.
            id_token_ttl: |-
                - (Optional) The time-to-live for ID tokens obtained by the client.
                The value should be less than the verification_ttl on the key.
            key: |-
                - (Optional) A reference to a named key resource in Vault.
                This cannot be modified after creation. If not provided, the default
                key is used.
            name: '- (Required) The name of the client.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            redirect_uris: |-
                - (Optional) Redirection URI values used by the client.
                One of these values must exactly match the redirect_uri parameter value
                used in each authentication request.
        importStatements: []
    vault_identity_oidc_key:
        subCategory: ""
        description: Creates an Identity OIDC Named Key for Vault
        name: vault_identity_oidc_key
        title: vault_identity_oidc_key resource
        examples:
            - name: key
              manifest: |-
                {
                  "algorithm": "RS256",
                  "name": "key"
                }
              dependencies:
                vault_identity_oidc_key_allowed_client_id.role: |-
                    {
                      "allowed_client_id": "${vault_identity_oidc_role.role.client_id}",
                      "key_name": "${vault_identity_oidc_key.key.name}"
                    }
                vault_identity_oidc_role.role: |-
                    {
                      "key": "${vault_identity_oidc_key.key.name}",
                      "name": "role"
                    }
        argumentDocs:
            algorithm: |-
                - (Optional) Signing algorithm to use. Signing algorithm to use.
                Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
            allowed_client_ids: |-
                : Array of role client ID allowed to use this key for signing. If
                empty, no roles are allowed. If ["*"], all roles are allowed.
            id: '- The name of the created key.'
            name: '- (Required; Forces new resource) Name of the OIDC Key to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            rotation_period: '- (Optional) How often to generate a new signing key in number of seconds'
            verification_ttl: |-
                - (Optional) "Controls how long the public portion of a signing key will be
                available for verification after being rotated in seconds.
        importStatements: []
    vault_identity_oidc_key_allowed_client_id:
        subCategory: ""
        description: Allows an Identity OIDC Role to use an OIDC Named key.
        name: vault_identity_oidc_key_allowed_client_id
        title: vault_identity_oidc_key_allowed_client_id resource
        examples:
            - name: role
              manifest: |-
                {
                  "allowed_client_id": "${vault_identity_oidc_role.role.client_id}",
                  "key_name": "${vault_identity_oidc_key.key.name}"
                }
              references:
                allowed_client_id: vault_identity_oidc_role.role.client_id
                key_name: vault_identity_oidc_key.key.name
              dependencies:
                vault_identity_oidc_key.key: |-
                    {
                      "algorithm": "RS256",
                      "name": "key"
                    }
                vault_identity_oidc_role.role: |-
                    {
                      "key": "${vault_identity_oidc_key.key.name}",
                      "name": "role"
                    }
        argumentDocs:
            allowed_client_id: '- (Required; Forces new resource) Client ID to allow usage with the OIDC named key'
            key_name: '- (Required; Forces new resource) Name of the OIDC Key allow the Client ID.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_identity_oidc_provider:
        subCategory: ""
        description: Provision OIDC Providers in Vault.
        name: vault_identity_oidc_provider
        title: vault_identity_oidc_provider resource
        examples:
            - name: test
              manifest: |-
                {
                  "allowed_client_ids": [
                    "${vault_identity_oidc_client.test.client_id}"
                  ],
                  "https_enabled": false,
                  "issuer_host": "127.0.0.1:8200",
                  "name": "my-provider",
                  "scopes_supported": [
                    "${vault_identity_oidc_scope.test.name}"
                  ]
                }
              dependencies:
                vault_identity_oidc_assignment.test: |-
                    {
                      "entity_ids": [
                        "fake-ascbascas-2231a-sdfaa"
                      ],
                      "group_ids": [
                        "fake-sajkdsad-32414-sfsada"
                      ],
                      "name": "my-assignment"
                    }
                vault_identity_oidc_client.test: |-
                    {
                      "access_token_ttl": 7200,
                      "assignments": [
                        "${vault_identity_oidc_assignment.test.name}"
                      ],
                      "id_token_ttl": 2400,
                      "key": "${vault_identity_oidc_key.test.name}",
                      "name": "application",
                      "redirect_uris": [
                        "http://127.0.0.1:9200/v1/auth-methods/oidc:authenticate:callback",
                        "http://127.0.0.1:8251/callback",
                        "http://127.0.0.1:8080/callback"
                      ]
                    }
                vault_identity_oidc_key.test: |-
                    {
                      "allowed_client_ids": [
                        "*"
                      ],
                      "name": "my-key",
                      "rotation_period": 3600,
                      "verification_ttl": 3600
                    }
                vault_identity_oidc_scope.test: |-
                    {
                      "description": "Groups scope.",
                      "name": "groups",
                      "template": "${jsonencode(\n  {\n    groups = \"{{identity.entity.groups.names}}\",\n  }\n  )}"
                    }
        argumentDocs:
            allowed_client_ids: |-
                - (Optional) The client IDs that are permitted to use the provider.
                If empty, no clients are allowed. If *, all clients are allowed.
            https_enabled: '- (Optional) Set to true if the issuer endpoint uses HTTPS.'
            issuer: |-
                - Specifies what will be used as the scheme://host:port
                component for the iss claim of ID tokens. This value is computed using the
                issuer_host and https_enabled fields.
            issuer_host: '- (Optional) The host for the issuer. Can be either host or host:port.'
            name: '- (Required) The name of the provider.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            scopes_supported: '- (Optional) The scopes available for requesting on the provider.'
        importStatements: []
    vault_identity_oidc_role:
        subCategory: ""
        description: Creates an Identity OIDC Role for Vault
        name: vault_identity_oidc_role
        title: vault_identity_oidc_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "key": "${var.key}",
                  "name": "role"
                }
              references:
                key: var.key
              dependencies:
                vault_identity_oidc_key.key: |-
                    {
                      "algorithm": "RS256",
                      "allowed_client_ids": [
                        "${vault_identity_oidc_role.role.client_id}"
                      ],
                      "name": "${var.key}"
                    }
            - name: role
              manifest: |-
                {
                  "key": "${vault_identity_oidc_key.key.name}",
                  "name": "role"
                }
              references:
                key: vault_identity_oidc_key.key.name
              dependencies:
                vault_identity_oidc_key.key: |-
                    {
                      "algorithm": "RS256",
                      "name": "key"
                    }
                vault_identity_oidc_key_allowed_client_id.role: |-
                    {
                      "allowed_client_id": "${vault_identity_oidc_role.role.client_id}",
                      "key_name": "${vault_identity_oidc_key.key.name}"
                    }
        argumentDocs:
            client_id: |-
                - (Optional) The value that will be included in the aud field of all the OIDC identity
                tokens issued by this role
            id: '- The name of the created role.'
            key: |-
                - (Required; Forces new resource) A configured named key, the key must already exist
                before tokens can be issued.
            name: '- (Required; Forces new resource) Name of the OIDC Role to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            template: |-
                - (Optional) The template string to use for generating tokens. This may be in
                string-ified JSON or base64 format. See the
                documentation
                for the template format.
            ttl: '- (Optional) TTL of the tokens generated against the role in number of seconds.'
        importStatements: []
    vault_identity_oidc_scope:
        subCategory: ""
        description: Provision OIDC Scopes in Vault.
        name: vault_identity_oidc_scope
        title: vault_identity_oidc_scope resource
        examples:
            - name: groups
              manifest: |-
                {
                  "description": "Vault OIDC Groups Scope",
                  "name": "groups",
                  "template": "{\"groups\":{{identity.entity.groups.names}}}"
                }
        argumentDocs:
            description: '- (Optional) A description of the scope.'
            name: '- (Required) The name of the scope. The openid scope name is reserved.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            template: '- (Optional) The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.'
        importStatements: []
    vault_jwt_auth_backend:
        subCategory: ""
        description: Managing JWT/OIDC auth backends in Vault
        name: vault_jwt_auth_backend
        title: vault_jwt_auth_backend resource
        examples:
            - name: example
              manifest: |-
                {
                  "bound_issuer": "https://myco.auth0.com/",
                  "description": "Demonstration of the Terraform JWT auth backend",
                  "oidc_discovery_url": "https://myco.auth0.com/",
                  "path": "jwt"
                }
            - name: example
              manifest: |-
                {
                  "bound_issuer": "https://myco.auth0.com/",
                  "description": "Demonstration of the Terraform JWT auth backend",
                  "oidc_client_id": "1234567890",
                  "oidc_client_secret": "secret123456",
                  "oidc_discovery_url": "https://myco.auth0.com/",
                  "path": "oidc",
                  "tune": [
                    {
                      "listing_visibility": "unauth"
                    }
                  ],
                  "type": "oidc"
                }
            - name: gsuite
              manifest: |-
                {
                  "description": "OIDC backend",
                  "oidc_discovery_url": "https://accounts.google.com",
                  "path": "oidc",
                  "provider_config": {
                    "fetch_groups": true,
                    "fetch_user_info": true,
                    "groups_recurse_max_depth": 1,
                    "provider": "gsuite"
                  },
                  "type": "oidc"
                }
        argumentDocs:
            accessor: '- The accessor for this auth method'
            bound_issuer: '- (Optional) The value against which to match the iss claim in a JWT'
            default_role: '- (Optional) The default role to use if none is provided during login'
            description: '- (Optional) The description of the auth backend'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            jwks_ca_pem: '- (Optional) The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.'
            jwks_url: '- (Optional) JWKS URL to use to authenticate signatures. Cannot be used with "oidc_discovery_url" or "jwt_validation_pubkeys".'
            jwt_supported_algs: '- (Optional) A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ'
            jwt_validation_pubkeys: '- (Optional) A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with oidc_discovery_url'
            local: '- (Optional) Specifies if the auth method is local only.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            namespace_in_state: '- (Optional) Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs'
            oidc_client_id: '- (Optional) Client ID used for OIDC backends'
            oidc_client_secret: '- (Optional) Client Secret used for OIDC backends'
            oidc_discovery_ca_pem: '- (Optional) The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used'
            oidc_discovery_url: '- (Optional) The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with jwt_validation_pubkeys'
            oidc_response_mode: '- (Optional) The response mode to be used in the OAuth2 request. Allowed values are query and form_post. Defaults to query. If using Vault namespaces, and oidc_response_mode is form_post, then namespace_in_state should be set to false.'
            oidc_response_types: '- (Optional) List of response types to request. Allowed values are ''code'' and ''id_token''. Defaults to ["code"]. Note: id_token may only be used if oidc_response_mode is set to form_post.'
            path: '- (Required) Path to mount the JWT/OIDC auth backend'
            provider_config: '- (Optional) Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault.'
            tune.allowed_response_headers: |-
                - (Optional) List of headers to whitelist and allowing
                a plugin to include them in the response.
            tune.audit_non_hmac_request_keys: |-
                - (Optional) Specifies the list of keys that will
                not be HMAC'd by audit devices in the request data object.
            tune.audit_non_hmac_response_keys: |-
                - (Optional) Specifies the list of keys that will
                not be HMAC'd by audit devices in the response data object.
            tune.default_lease_ttl: |-
                - (Optional) Specifies the default time-to-live.
                If set, this overrides the global default.
                Must be a valid duration string
            tune.listing_visibility: |-
                - (Optional) Specifies whether to show this mount in
                the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
            tune.max_lease_ttl: |-
                - (Optional) Specifies the maximum time-to-live.
                If set, this overrides the global default.
                Must be a valid duration string
            tune.passthrough_request_headers: |-
                - (Optional) List of headers to whitelist and
                pass from the request to the backend.
            tune.token_type: |-
                - (Optional) Specifies the type of tokens that should be returned by
                the mount. Valid values are "default-service", "default-batch", "service", "batch".
            type: '- (Optional) Type of auth backend. Should be one of jwt or oidc. Default - jwt'
        importStatements: []
    vault_jwt_auth_backend_role:
        subCategory: ""
        description: Manages JWT/OIDC auth backend roles in Vault.
        name: vault_jwt_auth_backend_role
        title: vault_jwt_auth_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_jwt_auth_backend.jwt.path}",
                  "bound_audiences": [
                    "https://myco.test"
                  ],
                  "bound_claims": {
                    "color": "red,green,blue"
                  },
                  "role_name": "test-role",
                  "role_type": "jwt",
                  "token_policies": [
                    "default",
                    "dev",
                    "prod"
                  ],
                  "user_claim": "https://vault/user"
                }
              references:
                backend: vault_jwt_auth_backend.jwt.path
              dependencies:
                vault_jwt_auth_backend.jwt: |-
                    {
                      "path": "jwt"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_redirect_uris": [
                    "http://localhost:8200/ui/vault/auth/oidc/oidc/callback"
                  ],
                  "backend": "${vault_jwt_auth_backend.oidc.path}",
                  "role_name": "test-role",
                  "role_type": "oidc",
                  "token_policies": [
                    "default",
                    "dev",
                    "prod"
                  ],
                  "user_claim": "https://vault/user"
                }
              references:
                backend: vault_jwt_auth_backend.oidc.path
              dependencies:
                vault_jwt_auth_backend.oidc: |-
                    {
                      "default_role": "test-role",
                      "path": "oidc"
                    }
        argumentDocs:
            allowed_redirect_uris: |-
                - (Optional) The list of allowed values for redirect_uri during OIDC logins.
                Required for OIDC roles
            backend: |-
                - (Optional) The unique name of the auth backend to configure.
                Defaults to jwt.
            bound_audiences: |-
                - (For "jwt" roles, at least one of bound_audiences, bound_subject, bound_claims
                or token_bound_cidrs is required. Optional for "oidc" roles.) List of aud claims to match against.
                Any match is sufficient.
            bound_claims: |-
                - (Optional) If set, a map of claims to values to match against.
                A claim's value must be a string, which may contain one value or multiple
                comma-separated values, e.g. "red" or "red,green,blue".
            bound_claims_type: |-
                - (Optional) How to interpret values in the claims/values
                map (bound_claims): can be either string (exact match) or glob (wildcard
                match). Requires Vault 1.4.0 or above.
            bound_subject: |-
                - (Optional) If set, requires that the sub claim matches
                this value.
            claim_mappings: |-
                - (Optional) If set, a map of claims (keys) to be copied
                to specified metadata fields (values).
            clock_skew_leeway: |-
                - (Optional) The amount of leeway to add to all claims to account for clock skew, in
                seconds. Defaults to 60 seconds if set to 0 and can be disabled if set to -1.
                Only applicable with "jwt" roles.
            expiration_leeway: |-
                - (Optional) The amount of leeway to add to expiration (exp) claims to account for
                clock skew, in seconds. Defaults to 60 seconds if set to 0 and can be disabled if set to -1.
                Only applicable with "jwt" roles.
            groups_claim: |-
                - (Optional) The claim to use to uniquely identify
                the set of groups to which the user belongs; this will be used as the names
                for the Identity group aliases created due to a successful login. The claim
                value must be a list of strings.
            max_age: |-
                - (Optional) Specifies the allowable elapsed time in seconds since the last time
                the user was actively authenticated with the OIDC provider.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            not_before_leeway: |-
                - (Optional) The amount of leeway to add to not before (nbf) claims to account for
                clock skew, in seconds. Defaults to 60 seconds if set to 0 and can be disabled if set to -1.
                Only applicable with "jwt" roles.
            oidc_scopes: |-
                - (Optional) If set, a list of OIDC scopes to be used with an OIDC role.
                The standard scope "openid" is automatically included and need not be specified.
            role_name: '- (Required) The name of the role.'
            role_type: '- (Optional) Type of role, either "oidc" (default) or "jwt".'
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
            user_claim: |-
                - (Required) The claim to use to uniquely identify
                the user; this will be used as the name for the Identity entity alias created
                due to a successful login.
            user_claim_json_pointer: |-
                - (Optional) Specifies if the user_claim value uses
                JSON pointer
                syntax for referencing claims. By default, the user_claim value will not use JSON pointer.
                Requires Vault 1.11+.
            verbose_oidc_logging: |-
                - (Optional) Log received OIDC tokens and claims when debug-level
                logging is active. Not recommended in production since sensitive information may be present
                in OIDC responses.
        importStatements: []
    vault_kmip_secret_backend:
        subCategory: ""
        description: Provision KMIP Secret backends in Vault.
        name: vault_kmip_secret_backend
        title: vault_kmip_secret_backend resource
        examples:
            - name: default
              manifest: |-
                {
                  "default_tls_client_key_bits": 4096,
                  "default_tls_client_key_type": "rsa",
                  "default_tls_client_ttl": 86400,
                  "description": "Vault KMIP backend",
                  "listen_addrs": [
                    "127.0.0.1:5696",
                    "127.0.0.1:8080"
                  ],
                  "path": "kmip",
                  "tls_ca_key_bits": 4096,
                  "tls_ca_key_type": "rsa"
                }
        argumentDocs:
            default_tls_client_key_bits: '- (Optional) Client certificate key bits, valid values depend on key type.'
            default_tls_client_key_type: '- (Optional) Client certificate key type, rsa or ec.'
            description: '- (Optional) A human-friendly description for this backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            listen_addrs: '- (Optional) Addresses the KMIP server should listen on (host:port).'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Required) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to kmip.
            server_hostnames: '- (Optional) Hostnames to include in the server''s TLS certificate as SAN DNS names. The first will be used as the common name (CN).'
            server_ips: '- (Optional) IPs to include in the server''s TLS certificate as SAN IP addresses.'
            tls_ca_key_bits: '- (Optional) CA key bits, valid values depend on key type.'
            tls_ca_key_type: '- (Optional) CA key type, rsa or ec.'
            tls_min_version: '- (Optional) Minimum TLS version to accept.'
        importStatements: []
    vault_kmip_secret_role:
        subCategory: ""
        description: Provision KMIP Secret roles in Vault.
        name: vault_kmip_secret_role
        title: vault_kmip_secret_role resource
        examples:
            - name: admin
              manifest: |-
                {
                  "operation_activate": true,
                  "operation_create": true,
                  "operation_destroy": true,
                  "operation_get": true,
                  "operation_get_attributes": true,
                  "path": "${vault_kmip_secret_scope.dev.path}",
                  "role": "admin",
                  "scope": "${vault_kmip_secret_scope.dev.scope}",
                  "tls_client_key_bits": 256,
                  "tls_client_key_type": "ec"
                }
              references:
                path: vault_kmip_secret_scope.dev.path
                scope: vault_kmip_secret_scope.dev.scope
              dependencies:
                vault_kmip_secret_backend.default: |-
                    {
                      "description": "Vault KMIP backend",
                      "path": "kmip"
                    }
                vault_kmip_secret_scope.dev: |-
                    {
                      "force": true,
                      "path": "${vault_kmip_secret_backend.default.path}",
                      "scope": "dev"
                    }
        argumentDocs:
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            operation_activate: '- (Optional) Grant permission to use the KMIP Activate operation.'
            operation_add_attribute: '- (Optional) Grant permission to use the KMIP Add Attribute operation.'
            operation_all: '- (Optional) Grant all permissions to this role. May not be specified with any other operation_* params.'
            operation_create: '- (Optional) Grant permission to use the KMIP Create operation.'
            operation_destroy: '- (Optional) Grant permission to use the KMIP Destroy operation.'
            operation_discover_versions: '- (Optional) Grant permission to use the KMIP Discover Version operation.'
            operation_get: '- (Optional) Grant permission to use the KMIP Get operation.'
            operation_get_attribute_list: '- (Optional) Grant permission to use the KMIP Get Atrribute List operation.'
            operation_get_attributes: '- (Optional) Grant permission to use the KMIP Get Atrributes operation.'
            operation_locate: '- (Optional) Grant permission to use the KMIP Get Locate operation.'
            operation_none: '- (Optional) Remove all permissions from this role. May not be specified with any other operation_* params.'
            operation_register: '- (Optional) Grant permission to use the KMIP Register operation.'
            operation_rekey: '- (Optional) Grant permission to use the KMIP Rekey operation.'
            operation_revoke: '- (Optional) Grant permission to use the KMIP Revoke operation.'
            path: |-
                - (Required) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to kmip.
            role: '- (Required) Name of the role.'
            scope: '- (Required) Name of the scope.'
            tls_client_key_bits: '- (Optional) Client certificate key bits, valid values depend on key type.'
            tls_client_key_type: '- (Optional) Client certificate key type, rsa or ec.'
            tls_client_ttl: '- (Optional) Client certificate TTL in seconds.'
        importStatements: []
    vault_kmip_secret_scope:
        subCategory: ""
        description: Provision KMIP Secret scopes in Vault.
        name: vault_kmip_secret_scope
        title: vault_kmip_secret_scope resource
        examples:
            - name: dev
              manifest: |-
                {
                  "force": true,
                  "path": "${vault_kmip_secret_backend.default.path}",
                  "scope": "dev"
                }
              references:
                path: vault_kmip_secret_backend.default.path
              dependencies:
                vault_kmip_secret_backend.default: |-
                    {
                      "description": "Vault KMIP backend",
                      "path": "kmip"
                    }
        argumentDocs:
            force: '- (Optional) Boolean field to force deletion even if there are managed objects in the scope.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Required) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to kmip.
            scope: '- (Required) Name of the scope.'
        importStatements: []
    vault_kubernetes_auth_backend_config:
        subCategory: ""
        description: Manages Kubernetes auth backend configs in Vault.
        name: vault_kubernetes_auth_backend_config
        title: vault_kubernetes_auth_backend_config resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_auth_backend.kubernetes.path}",
                  "disable_iss_validation": "true",
                  "issuer": "api",
                  "kubernetes_ca_cert": "-----BEGIN CERTIFICATE-----\nexample\n-----END CERTIFICATE-----",
                  "kubernetes_host": "http://example.com:443",
                  "token_reviewer_jwt": "ZXhhbXBsZQo="
                }
              references:
                backend: vault_auth_backend.kubernetes.path
              dependencies:
                vault_auth_backend.kubernetes: |-
                    {
                      "type": "kubernetes"
                    }
        argumentDocs:
            disable_iss_validation: '- (Optional) Disable JWT issuer validation. Allows to skip ISS validation. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+'
            disable_local_ca_jwt: '- (Optional) Disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+'
            issuer: '- (Optional) JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.'
            kubernetes_ca_cert: '- (Optional) PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.'
            kubernetes_host: '- (Required) Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            pem_keys: '- (Optional) List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.'
            token_reviewer_jwt: '- (Optional) A service account JWT (or other token) used as a bearer token to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.'
        importStatements: []
    vault_kubernetes_auth_backend_role:
        subCategory: ""
        description: Manages Kubernetes auth backend roles in Vault.
        name: vault_kubernetes_auth_backend_role
        title: vault_kubernetes_auth_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "audience": "vault",
                  "backend": "${vault_auth_backend.kubernetes.path}",
                  "bound_service_account_names": [
                    "example"
                  ],
                  "bound_service_account_namespaces": [
                    "example"
                  ],
                  "role_name": "example-role",
                  "token_policies": [
                    "default",
                    "dev",
                    "prod"
                  ],
                  "token_ttl": 3600
                }
              references:
                backend: vault_auth_backend.kubernetes.path
              dependencies:
                vault_auth_backend.kubernetes: |-
                    {
                      "type": "kubernetes"
                    }
        argumentDocs:
            alias_name_source: |-
                - (Optional, default: serviceaccount_uid) Configures how identity aliases are generated.
                Valid choices are: serviceaccount_uid, serviceaccount_name. (vault-1.9+)
            audience: '- (Optional) Audience claim to verify in the JWT.'
            backend: '- (Optional) Unique name of the kubernetes backend to configure.'
            bound_service_account_names: '- (Required) List of service account names able to access this role. If set to ["*"] all names are allowed, both this and bound_service_account_namespaces can not be "*".'
            bound_service_account_namespaces: '- (Required) List of namespaces allowed to access this role. If set to ["*"] all namespaces are allowed, both this and bound_service_account_names can not be set to "*".'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role_name: '- (Required) Name of the role.'
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_kubernetes_secret_backend:
        subCategory: ""
        description: Creates a Kubernetes Secrets Engine in Vault.
        name: vault_kubernetes_secret_backend
        title: vault_kubernetes_secret_backend resource
        examples:
            - name: config
              manifest: |-
                {
                  "default_lease_ttl_seconds": 43200,
                  "description": "kubernetes secrets engine description",
                  "disable_local_ca_jwt": false,
                  "kubernetes_ca_cert": "${file(\"/path/to/cert\")}",
                  "kubernetes_host": "https://127.0.0.1:61233",
                  "max_lease_ttl_seconds": 86400,
                  "path": "kubernetes",
                  "service_account_jwt": "${file(\"/path/to/token\")}"
                }
        argumentDocs:
            disable_local_ca_jwt: |-
                - (Optional) Disable defaulting to the local CA certificate and
                service account JWT when Vault is running in a Kubernetes pod.
            kubernetes_ca_cert: |-
                - (Optional) A PEM-encoded CA certificate used by the
                secrets engine to verify the Kubernetes API server certificate. Defaults to the local
                pod’s CA if Vault is running in Kubernetes. Otherwise, defaults to the root CA set where
                Vault is running.
            kubernetes_host: |-
                - (Optional) The Kubernetes API URL to connect to. Required if the
                standard pod environment variables KUBERNETES_SERVICE_HOST or KUBERNETES_SERVICE_PORT
                are not set on the host that Vault is running on.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            service_account_jwt: |-
                - (Optional) The JSON web token of the service account used by the
                secrets engine to manage Kubernetes credentials. Defaults to the local pod’s JWT if Vault
                is running in Kubernetes.
        importStatements: []
    vault_kubernetes_secret_backend_role:
        subCategory: ""
        description: Creates a role for the Kubernetes Secrets Engine in Vault.
        name: vault_kubernetes_secret_backend_role
        title: vault_kubernetes_secret_backend_role resource
        examples:
            - name: sa-example
              manifest: |-
                {
                  "allowed_kubernetes_namespaces": [
                    "*"
                  ],
                  "backend": "${vault_kubernetes_secret_backend.config.path}",
                  "extra_annotations": {
                    "env": "development",
                    "location": "earth"
                  },
                  "extra_labels": {
                    "id": "abc123",
                    "name": "some_name"
                  },
                  "name": "service-account-name-role",
                  "service_account_name": "test-service-account-with-generated-token",
                  "token_default_ttl": 21600,
                  "token_max_ttl": 43200
                }
              references:
                backend: vault_kubernetes_secret_backend.config.path
              dependencies:
                vault_kubernetes_secret_backend.config: |-
                    {
                      "description": "kubernetes secrets engine description",
                      "disable_local_ca_jwt": false,
                      "kubernetes_ca_cert": "${file(\"/path/to/cert\")}",
                      "kubernetes_host": "https://127.0.0.1:61233",
                      "path": "kubernetes",
                      "service_account_jwt": "${file(\"/path/to/token\")}"
                    }
            - name: name-example
              manifest: |-
                {
                  "allowed_kubernetes_namespaces": [
                    "*"
                  ],
                  "backend": "${vault_kubernetes_secret_backend.config.path}",
                  "extra_annotations": {
                    "env": "development",
                    "location": "earth"
                  },
                  "extra_labels": {
                    "id": "abc123",
                    "name": "some_name"
                  },
                  "kubernetes_role_name": "vault-k8s-secrets-role",
                  "name": "service-account-name-role",
                  "token_default_ttl": 21600,
                  "token_max_ttl": 43200
                }
              references:
                backend: vault_kubernetes_secret_backend.config.path
              dependencies:
                vault_kubernetes_secret_backend.config: |-
                    {
                      "description": "kubernetes secrets engine description",
                      "disable_local_ca_jwt": false,
                      "kubernetes_ca_cert": "${file(\"/path/to/cert\")}",
                      "kubernetes_host": "https://127.0.0.1:61233",
                      "path": "kubernetes",
                      "service_account_jwt": "${file(\"/path/to/token\")}"
                    }
            - name: rules-example
              manifest: |-
                {
                  "allowed_kubernetes_namespaces": [
                    "*"
                  ],
                  "backend": "${vault_kubernetes_secret_backend.config.path}",
                  "extra_annotations": {
                    "env": "development",
                    "location": "earth"
                  },
                  "extra_labels": {
                    "id": "abc123",
                    "name": "some_name"
                  },
                  "generated_role_rules": "rules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"list\"]\n",
                  "kubernetes_role_type": "Role",
                  "name": "service-account-name-role",
                  "token_default_ttl": 21600,
                  "token_max_ttl": 43200
                }
              references:
                backend: vault_kubernetes_secret_backend.config.path
              dependencies:
                vault_kubernetes_secret_backend.config: |-
                    {
                      "description": "kubernetes secrets engine description",
                      "disable_local_ca_jwt": false,
                      "kubernetes_ca_cert": "${file(\"/path/to/cert\")}",
                      "kubernetes_host": "https://127.0.0.1:61233",
                      "path": "kubernetes",
                      "service_account_jwt": "${file(\"/path/to/token\")}"
                    }
        argumentDocs:
            allowed_kubernetes_namespaces: |-
                - (Required) The list of Kubernetes namespaces this role
                can generate credentials for. If set to * all namespaces are allowed.
            backend: |-
                - (Required) The path of the Kubernetes Secrets Engine backend mount to create
                the role in.
            extra_annotations: |-
                - (Optional) Additional annotations to apply to all generated
                Kubernetes objects.
            extra_labels: |-
                - (Optional) Additional labels to apply to all generated Kubernetes
                objects.
            generated_role_rules: |-
                - (Optional) The Role or ClusterRole rules to use when generating
                a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with service_account_name
                and kubernetes_role_name. If set, the entire chain of Kubernetes objects will be generated
                when credentials are requested.
            kubernetes_role_name: |-
                - (Optional) The pre-existing Role or ClusterRole to bind a
                generated service account to. Mutually exclusive with service_account_name and
                generated_role_rules. If set, Kubernetes token, service account, and role
                binding objects will be created when credentials are requested.
            kubernetes_role_type: |-
                - (Optional) Specifies whether the Kubernetes role is a Role or
                ClusterRole.
            name: '- (Required) The name of the role.'
            name_template: |-
                - (Optional) The name template to use when generating service accounts,
                roles and role bindings. If unset, a default template is used.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            service_account_name: |-
                - (Optional) The pre-existing service account to generate tokens for.
                Mutually exclusive with kubernetes_role_name and generated_role_rules. If set, only a
                Kubernetes token will be created when credentials are requested.
            token_default_ttl: '- (Optional) The default TTL for generated Kubernetes tokens in seconds.'
            token_max_ttl: '- (Optional) The maximum TTL for generated Kubernetes tokens in seconds.'
        importStatements: []
    vault_kv_secret:
        subCategory: ""
        description: Writes a KV-V1 secret to a given path in Vault
        name: vault_kv_secret
        title: vault_kv_secret resource
        examples:
            - name: secret
              manifest: |-
                {
                  "data_json": "${jsonencode(\n  {\n    zip = \"zap\",\n    foo = \"bar\"\n  }\n  )}",
                  "path": "${vault_mount.kvv1.path}/secret"
                }
              dependencies:
                vault_mount.kvv1: |-
                    {
                      "description": "KV Version 1 secret engine mount",
                      "options": {
                        "version": "1"
                      },
                      "path": "kvv1",
                      "type": "kv"
                    }
        argumentDocs:
            data: |-
                - A mapping whose keys are the top-level data keys returned from
                Vault and whose values are the corresponding values. This map can only
                represent string data, so any non-string values returned from Vault are
                serialized as JSON.
            data_json: |-
                - (Required) JSON-encoded string that will be
                written as the secret data at the given path.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) Full path of the KV-V1 secret.'
        importStatements: []
    vault_kv_secret_backend_v2:
        subCategory: ""
        description: Configures KV-V2 backend level settings that are applied to every key in the key-value store.
        name: vault_kv_secret_backend_v2
        title: vault_kv_secret_backend_v2 resource
        examples:
            - name: example
              manifest: |-
                {
                  "cas_required": true,
                  "delete_version_after": 12600,
                  "max_versions": 5,
                  "mount": "${vault_mount.kvv2.path}"
                }
              references:
                mount: vault_mount.kvv2.path
              dependencies:
                vault_mount.kvv2: |-
                    {
                      "description": "KV Version 2 secret engine mount",
                      "options": {
                        "version": "2"
                      },
                      "path": "kvv2",
                      "type": "kv"
                    }
        argumentDocs:
            cas_required: |-
                - (Optional) If true, all keys will require the cas
                parameter to be set on all write requests.
            delete_version_after: |-
                - (Optional) If set, specifies the length of time before
                a version is deleted. Accepts duration in integer seconds.
            max_versions: '- (Optional) The number of versions to keep per key.'
            mount: '- (Required) Path where KV-V2 engine is mounted.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_kv_secret_v2:
        subCategory: ""
        description: Writes a KV-V2 secret to a given path in Vault
        name: vault_kv_secret_v2
        title: vault_kv_secret_v2 resource
        examples:
            - name: example
              manifest: |-
                {
                  "cas": 1,
                  "custom_metadata": [
                    {
                      "data": {
                        "bar": "12345",
                        "foo": "vault@example.com"
                      },
                      "max_versions": 5
                    }
                  ],
                  "data_json": "${jsonencode(\n  {\n    zip       = \"zap\",\n    foo       = \"bar\"\n  }\n  )}",
                  "delete_all_versions": true,
                  "mount": "${vault_mount.kvv2.path}",
                  "name": "secret"
                }
              references:
                mount: vault_mount.kvv2.path
              dependencies:
                vault_mount.kvv2: |-
                    {
                      "description": "KV Version 2 secret engine mount",
                      "options": {
                        "version": "2"
                      },
                      "path": "kvv2",
                      "type": "kv"
                    }
        argumentDocs:
            cas: |-
                - (Optional) This flag is required if cas_required is set to true
                on either the secret or the engine's config. In order for a
                write operation to be successful, cas must be set to the current version
                of the secret.
            cas_required: |-
                - (Optional) If true, all keys will require the cas
                parameter to be set on all write requests.
            custom_metadata: |-
                - (Optional) A nested block that allows configuring metadata for the
                KV secret. Refer to the
                Configuration Options for more info.
            data: '- (Optional) A string to string map describing the secret.'
            data_json: |-
                - (Required) JSON-encoded string that will be
                written as the secret data at the given path.
            delete_all_versions: |-
                - (Optional) If set to true, permanently deletes all
                versions for the specified key.
            delete_version_after: |-
                - (Optional) If set, specifies the length of time before
                a version is deleted. Accepts duration in integer seconds.
            disable_read: |-
                - (Optional) If set to true, disables reading secret from Vault;
                note: drift won't be detected.
            max_versions: '- (Optional) The number of versions to keep per key.'
            metadata: '- Metadata associated with this secret read from Vault.'
            mount: '- (Required) Path where KV-V2 engine is mounted.'
            name: |-
                - (Required) Full name of the secret. For a nested secret
                the name is the nested path excluding the mount and data
                prefix. For example, for a secret at kvv2/data/foo/bar/baz
                the name is foo/bar/baz.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            options: '- (Optional) An object that holds option settings.'
            path: '- Full path where the KV-V2 secret will be written.'
        importStatements: []
    vault_ldap_secret_backend:
        subCategory: ""
        description: Creates a LDAP secret backend for Vault.
        name: vault_ldap_secret_backend
        title: vault_ldap_secret_backend resource
        examples:
            - name: config
              manifest: |-
                {
                  "binddn": "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
                  "bindpass": "SuperSecretPassw0rd",
                  "insecure_tls": "true",
                  "path": "my-custom-ldap",
                  "url": "ldaps://localhost",
                  "userdn": "CN=Users,DC=corp,DC=example,DC=net"
                }
        argumentDocs:
            binddn: '- (Required) Distinguished name of object to bind when performing user and group search.'
            bindpass: '- (Required) Password to use along with binddn when performing user search.'
            certificate: |-
                - (Optional) CA certificate to use when verifying LDAP server certificate, must be
                x509 PEM encoded.
            client_tls_cert: '- (Optional) Client certificate to provide to the LDAP server, must be x509 PEM encoded.'
            client_tls_key: '- (Optional) Client certificate key to provide to the LDAP server, must be x509 PEM encoded.'
            connection_timeout: |-
                - (Optional) Timeout, in seconds, when attempting to connect to the LDAP server before trying
                the next URL in the configuration.
            default_lease_ttl_seconds: '- (Optional) Default lease duration for secrets in seconds.'
            description: '- (Optional) Human-friendly description of the mount for the Active Directory backend.'
            insecure_tls: |-
                - (Optional) Skip LDAP server SSL Certificate verification. This is not recommended for production.
                Defaults to false.
            length: |-
                - (Optional) Deprecated use password_policy. The desired length of passwords that Vault generates.
                Mutually exclusive with
            local: |-
                - (Optional) Mark the secrets engine as local-only. Local engines are not replicated or removed by
                replication.Tolerance duration to use when checking the last rotation time.
            max_lease_ttl_seconds: '- (Optional) Maximum possible lease duration for secrets in seconds.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            password_policy: on vault-1.11+
            path: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to ldap.
            request_timeout: |-
                - (Optional) Timeout, in seconds, for the connection when making requests against the server
                before returning back an error.
            schema: '- (Optional)  The LDAP schema to use when storing entry passwords. Valid schemas include openldap, ad, and racf. Default is openldap.'
            starttls: '- (Optional) Issue a StartTLS command after establishing unencrypted connection.'
            upndomain: '- (Optional) Enables userPrincipalDomain login with [username]@UPNDomain.'
            url: |-
                - (Required) LDAP URL to connect to. Multiple URLs can be specified by concatenating
                them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.
            userattr: '- (Optional) Attribute used when searching users. Defaults to cn.'
            userdn: '- (Optional) LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.'
        importStatements: []
    vault_ldap_secret_backend_dynamic_role:
        subCategory: ""
        description: Creates a dynamic role for the LDAP secret backend for Vault.
        name: vault_ldap_secret_backend_dynamic_role
        title: vault_ldap_secret_backend_dynamic_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "creation_ldif": "dn: cn={{.Username}},ou=users,dc=learn,dc=example\nobjectClass: person\nobjectClass: top\ncn: learn\nsn: {{.Password | utf16le | base64}}\nmemberOf: cn=dev,ou=groups,dc=learn,dc=example\nuserPassword: {{.Password}}\n",
                  "deletion_ldif": "dn: cn={{.Username}},ou=users,dc=learn,dc=example\nchangetype: delete\n  rollback_ldif = \u003c\u003cEOT\ndn: cn={{.Username}},ou=users,dc=learn,dc=example\nchangetype: delete\n",
                  "mount": "${vault_ldap_secret_backend.config.path}",
                  "role_name": "alice"
                }
              references:
                mount: vault_ldap_secret_backend.config.path
              dependencies:
                vault_ldap_secret_backend.config: |-
                    {
                      "binddn": "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
                      "bindpass": "SuperSecretPassw0rd",
                      "path": "my-custom-ldap",
                      "url": "ldaps://localhost",
                      "userdn": "CN=Users,DC=corp,DC=example,DC=net"
                    }
        argumentDocs:
            creation_ldif: |-
                - (Required) A templatized LDIF string used to create a user
                account. This may contain multiple LDIF entries. The creation_ldif can also
                be used to add the user account to an existing group. All LDIF entries are
                performed in order. If Vault encounters an error while executing the
                creation_ldif it will stop at the first error and not execute any remaining
                LDIF entries. If an error occurs and rollback_ldif is specified, the LDIF
                entries in rollback_ldif will be executed. See rollback_ldif for more
                details. This field may optionally be provided as a base64 encoded string.
            default_ttl: '- (Optional) Specifies the TTL for the leases associated with this role.'
            deletion_ldif: |-
                - (Required) A templatized LDIF string used to delete the
                user account once its TTL has expired. This may contain multiple LDIF
                entries. All LDIF entries are performed in order. If Vault encounters an
                error while executing an entry in the deletion_ldif it will attempt to
                continue executing any remaining entries. This field may optionally be
                provided as a base64 encoded string.
            max_ttl: '- (Optional) Specifies the maximum TTL for the leases associated with this role.'
            mount: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to ldap.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role_name: '- (Required) Name of the role.'
            rollback_ldif: |-
                - (Optional) A templatized LDIF string used to attempt to
                rollback any changes in the event that execution of the creation_ldif results
                in an error. This may contain multiple LDIF entries. All LDIF entries are
                performed in order. If Vault encounters an error while executing an entry in
                the rollback_ldif it will attempt to continue executing any remaining
                entries. This field may optionally be provided as a base64 encoded string.
            username_template: |-
                - (Optional) A template used to generate a dynamic
                username. This will be used to fill in the .Username field within the
                creation_ldif string.
        importStatements: []
    vault_ldap_secret_backend_library_set:
        subCategory: ""
        description: Creates a library on the LDAP Secret Backend for Vault.
        name: vault_ldap_secret_backend_library_set
        title: vault_ldap_secret_backend_library_set resource
        examples:
            - name: qa
              manifest: |-
                {
                  "disable_check_in_enforcement": true,
                  "max_ttl": 120,
                  "mount": "${vault_ldap_secret_backend.config.path}",
                  "name": "qa",
                  "service_account_names": [
                    "Bob",
                    "Mary"
                  ],
                  "ttl": 60
                }
              references:
                mount: vault_ldap_secret_backend.config.path
              dependencies:
                vault_ldap_secret_backend.config: |-
                    {
                      "binddn": "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
                      "bindpass": "SuperSecretPassw0rd",
                      "insecure_tls": "true",
                      "path": "ldap",
                      "url": "ldaps://localhost",
                      "userdn": "CN=Users,DC=corp,DC=example,DC=net"
                    }
        argumentDocs:
            disable_check_in_enforcement: |-
                - (Optional) Disable enforcing that service
                accounts must be checked in by the entity or client token that checked them
                out. Defaults to false.
            max_ttl: |-
                - (Optional) The maximum password time-to-live in seconds. Defaults
                to the configuration max_ttl if not provided.
            name: |-
                - (Required) The name to identify this set of service accounts.
                Must be unique within the backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Required) The path the LDAP secret backend is mounted at,
                with no leading or trailing /s.
            service_account_names: '- (Required) Specifies the slice of service accounts mapped to this set.'
            ttl: |-
                - (Optional) The password time-to-live in seconds. Defaults to the configuration
                ttl if not provided.
        importStatements: []
    vault_ldap_secret_backend_static_role:
        subCategory: ""
        description: Creates a static role for the LDAP secret backend for Vault.
        name: vault_ldap_secret_backend_static_role
        title: vault_ldap_secret_backend_static_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "dn": "cn=alice,ou=Users,DC=corp,DC=example,DC=net",
                  "mount": "${vault_ldap_secret_backend.config.path}",
                  "role_name": "alice",
                  "rotation_period": 60,
                  "username": "alice"
                }
              references:
                mount: vault_ldap_secret_backend.config.path
              dependencies:
                vault_ldap_secret_backend.config: |-
                    {
                      "binddn": "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
                      "bindpass": "SuperSecretPassw0rd",
                      "insecure_tls": "true",
                      "path": "my-custom-ldap",
                      "url": "ldaps://localhost",
                      "userdn": "CN=Users,DC=corp,DC=example,DC=net"
                    }
        argumentDocs:
            dn: |-
                - (Optional) Distinguished name (DN) of the existing LDAP entry to manage
                password rotation for. If given, it will take precedence over username for the LDAP
                search performed during password rotation. Cannot be modified after creation.
            mount: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to ldap.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            role_name: '- (Required) Name of the role.'
            rotation_period: '- (Required) How often Vault should rotate the password of the user entry.'
            username: '- (Required) The username of the existing LDAP entry to manage password rotation for.'
        importStatements: []
    vault_managed_keys:
        subCategory: ""
        description: Configures Managed Keys in Vault
        name: vault_managed_keys
        title: vault_managed_keys resource
        examples:
            - name: keys
              manifest: |-
                {
                  "aws": [
                    {
                      "access_key": "${var.aws_access_key}",
                      "key_bits": "2048",
                      "key_type": "RSA",
                      "kms_key": "alias/vault_aws_key_1",
                      "name": "aws-key-1",
                      "secret_key": "${var.aws_secret_key}"
                    },
                    {
                      "access_key": "${var.aws_access_key}",
                      "key_bits": "4096",
                      "key_type": "RSA",
                      "kms_key": "alias/vault_aws_key_2",
                      "name": "aws-key-2",
                      "secret_key": "${var.aws_secret_key}"
                    }
                  ]
                }
              references:
                aws.access_key: var.aws_access_key
                aws.secret_key: var.aws_secret_key
              dependencies:
                vault_mount.pki: |-
                    {
                      "allowed_managed_keys": [
                        "${tolist(vault_managed_keys.keys.aws)[0].name}",
                        "${tolist(vault_managed_keys.keys.aws)[1].name}"
                      ],
                      "default_lease_ttl_seconds": 3600,
                      "description": "Example mount for managed keys",
                      "max_lease_ttl_seconds": 36000,
                      "path": "pki",
                      "type": "pki"
                    }
        argumentDocs:
            access_key: '- (Required) The AWS access key to use.'
            allow_generate_key: |-
                - (Optional) If no existing key can be found in
                the referenced backend, instructs Vault to generate a key within the backend.
            allow_replace_key: |-
                - (Optional) Controls the ability for Vault to replace through
                generation or importing a key into the configured backend even
                if a key is present, if set to false those operations are forbidden
                if a key exists.
            allow_store_key: |-
                - (Optional) Controls the ability for Vault to import a key to the
                configured backend, if false, those operations will be forbidden.
            any_mount: |-
                - (Optional) If true, allows usage from any mount point within the
                namespace.
            client_id: '- (Required) The client id for credentials to query the Azure APIs.'
            client_secret: '- (Required) The client secret for credentials to query the Azure APIs.'
            curve: |-
                - (Optional) The curve to use for an ECDSA key. Used when key_type
                is ECDSA. Required if allow_generate_key is true.
            endpoint: '- (Optional) Used to specify a custom AWS endpoint.'
            environment: '- (Optional) The Azure Cloud environment API endpoints to use.'
            force_rw_session: |-
                - (Optional) Force all operations to open up a read-write session to
                the HSM.
            key_bits: '- (Required) The size in bits for an RSA key.'
            key_id: '- (Required) The id of a PKCS#11 key to use.'
            key_label: '- (Required) The label of the key to use.'
            key_name: '- (Required) The Key Vault key to use for encryption and decryption.'
            key_type: '- (Required) The type of key to use.'
            kms_key: '- (Required) An identifier for the key.'
            library: |-
                - (Required) The name of the kms_library stanza to use from Vault's config
                to lookup the local library path.
            mechanism: |-
                - (Required) The encryption/decryption mechanism to use, specified as a
                hexadecimal (prefixed by 0x) string.
            name: '- (Required) A unique lowercase name that serves as identifying the key.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            pin: '- (Required) The PIN for login.'
            region: '- (Optional) The AWS region where the keys are stored (or will be stored).'
            resource: '- (Optional) The Azure Key Vault resource''s DNS Suffix to connect to.'
            secret_key: '- (Required) The AWS access key to use.'
            slot: |-
                - (Optional) The slot number to use, specified as a string in a decimal format
                (e.g. 2305843009213693953).
            tenant_id: '- (Required) The tenant id for the Azure Active Directory organization.'
            token_label: '- (Optional) The slot token label to use.'
            vault_name: '- (Required) The Key Vault vault to use for encryption and decryption.'
        importStatements: []
    vault_mfa_duo:
        subCategory: ""
        description: Managing the MFA Duo method configuration
        name: vault_mfa_duo
        title: vault_mfa_duo resource
        examples:
            - name: my_duo
              manifest: |-
                {
                  "api_hostname": "api-2b5c39f5.duosecurity.com",
                  "integration_key": "BIACEUEAXI20BNWTEYXT",
                  "mount_accessor": "${vault_auth_backend.userpass.accessor}",
                  "name": "my_duo",
                  "secret_key": "8C7THtrIigh2rPZQMbguugt8IUftWhMRCOBzbuyz"
                }
              references:
                mount_accessor: vault_auth_backend.userpass.accessor
              dependencies:
                vault_auth_backend.userpass: |-
                    {
                      "path": "userpass",
                      "type": "userpass"
                    }
        argumentDocs:
            <key>: ': The value of the Alias''s metadata parameter'
            api_hostname: '(string: <required>) - API hostname for Duo.'
            integration_key: '(string: <required>) - Integration key for Duo.'
            mount_accessor: '(string: <required>) - The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.'
            name: '(string: <required>) – Name of the MFA method.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            push_info: (string) - Push information for Duo.
            secret_key: '(string: <required>) - Secret key for Duo.'
            username_format: '(string) - A format string for mapping Identity names to MFA method names. Values to substitute should be placed in {{}}. For example, "{{alias.name}}@example.com". If blank, the Alias''s Name field will be used as-is. Currently-supported mappings:'
        importStatements: []
    vault_mfa_okta:
        subCategory: ""
        description: Managing the MFA Okta method configuration
        name: vault_mfa_okta
        title: vault_mfa_okta resource
        examples:
            - name: my_okta
              manifest: |-
                {
                  "api_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                  "mount_accessor": "${vault_auth_backend.userpass.accessor}",
                  "name": "my_okta",
                  "org_name": "hashicorp",
                  "username_format": "user@example.com"
                }
              references:
                mount_accessor: vault_auth_backend.userpass.accessor
              dependencies:
                vault_auth_backend.userpass: |-
                    {
                      "path": "userpass",
                      "type": "userpass"
                    }
        argumentDocs:
            <key>: ': The value of the Alias''s metadata parameter'
            api_token: '(string: <required>) - Okta API key.'
            base_url: |-
                (string) - If set, will be used as the base domain for API requests. Examples are okta.com,
                oktapreview.com, and okta-emea.com.
            mount_accessor: |-
                (string: <required>) - The mount to tie this method to for use in automatic mappings.
                The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
            name: '(string: <required>) – Name of the MFA method.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            org_name: '(string: <required>) - Name of the organization to be used in the Okta API.'
            primary_email: |-
                (string: <required>) - If set to true, the username will only match the
                primary email for the account.
            username_format: |-
                (string) - A format string for mapping Identity names to MFA method names.
                Values to substitute should be placed in {{}}. For example, "{{alias.name}}@example.com".
                If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
        importStatements: []
    vault_mfa_pingid:
        subCategory: ""
        description: Managing the MFA PingID method configuration
        name: vault_mfa_pingid
        title: vault_mfa_pingid resource
        examples:
            - name: my_pingid
              manifest: |-
                {
                  "mount_accessor": "${vault_auth_backend.userpass.accessor}",
                  "name": "my_pingid",
                  "settings_file_base64": "${var.settings_file}",
                  "username_format": "user@example.com"
                }
              references:
                mount_accessor: vault_auth_backend.userpass.accessor
                settings_file_base64: var.settings_file
              dependencies:
                vault_auth_backend.userpass: |-
                    {
                      "path": "userpass",
                      "type": "userpass"
                    }
        argumentDocs:
            <key>: ': The value of the Alias''s metadata parameter'
            admin_url: (string) – Admin URL computed by Vault
            authenticator_url: (string) – Authenticator URL computed by Vault
            id: (string) – ID computed by Vault
            idp_url: (string) – IDP URL computed by Vault
            mount_accessor: |-
                (string: <required>) - The mount to tie this method to for use in automatic mappings.
                The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
            name: '(string: <required>) – Name of the MFA method.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            namespace_id: (string) – Namespace ID computed by Vault
            org_alias: (string) – Org Alias computed by Vault
            settings_file_base64: |-
                (string: <required>) - A base64-encoded third-party settings file retrieved
                from PingID's configuration page.
            type: (string) – Type of configuration computed by Vault
            use_signature: (string) – If set to true, enables use of PingID signature. Computed by Vault
            username_format: |-
                (string) - A format string for mapping Identity names to MFA method names.
                Values to substitute should be placed in {{}}. For example, "{{alias.name}}@example.com".
                If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
        importStatements: []
    vault_mfa_totp:
        subCategory: ""
        description: Managing the MFA TOTP method configuration
        name: vault_mfa_totp
        title: vault_mfa_totp resource
        examples:
            - name: my_totp
              manifest: |-
                {
                  "algorithm": "SHA256",
                  "digits": 8,
                  "issuer": "hashicorp",
                  "key_size": 20,
                  "name": "my_totp",
                  "period": 60
                }
        argumentDocs:
            algorithm: |-
                (string) - Specifies the hashing algorithm used to generate the TOTP code.
                Options include SHA1, SHA256 and SHA512
            digits: |-
                (int) - The number of digits in the generated TOTP token.
                This value can either be 6 or 8.
            issuer: '(string: <required>) - The name of the key''s issuing organization.'
            key_size: (int) - Specifies the size in bytes of the generated key.
            name: '(string: <required>) – Name of the MFA method.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            period: (int) - The length of time used to generate a counter for the TOTP token calculation.
            qr_size: (int) - The pixel size of the generated square QR code.
            skew: |-
                (int) - The number of delay periods that are allowed when validating a TOTP token.
                This value can either be 0 or 1.
        importStatements: []
    vault_mongodbatlas_secret_backend:
        subCategory: ""
        description: Creates a MongoDB Atlas secret backend for Vault.
        name: vault_mongodbatlas_secret_backend
        title: vault_mongodbatlas_secret_backend resource
        examples:
            - name: config
              manifest: |-
                {
                  "mount": "vault_mount.mongo.path",
                  "private_key": "privateKey",
                  "public_key": "publicKey"
                }
              dependencies:
                vault_mount.mongo: |-
                    {
                      "description": "MongoDB Atlas secret engine mount",
                      "path": "mongodbatlas",
                      "type": "mongodbatlas"
                    }
        argumentDocs:
            mount: '- (Required) Path where the MongoDB Atlas Secrets Engine is mounted.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            private_key: '- (Required) Specifies the Private API Key used to authenticate with the MongoDB Atlas API.'
            public_key: '- (Required) Specifies the Public API Key used to authenticate with the MongoDB Atlas API.'
        importStatements: []
    vault_mongodbatlas_secret_role:
        subCategory: ""
        description: Creates a role for the MongoDB Atlas Secret Engine in Vault.
        name: vault_mongodbatlas_secret_role
        title: vault_mongodbatlas_secret_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "cidr_blocks": "192.168.1.3/35",
                  "ip_addresses": "192.168.1.5, 192.168.1.6",
                  "max_ttl": "120",
                  "mount": "${vault_mount.mongo.path}",
                  "name": "tf-test-role",
                  "organization_id": "7cf5a45a9ccf6400e60981b7",
                  "project_id": "5cf5a45a9ccf6400e60981b6",
                  "project_roles": "GROUP_READ_ONLY",
                  "roles": "ORG_READ_ONLY",
                  "ttl": "60"
                }
              references:
                mount: vault_mount.mongo.path
              dependencies:
                vault_mongodbatlas_secret_backend.config: |-
                    {
                      "mount": "vault_mount.mongo.path",
                      "private_key": "privateKey",
                      "public_key": "publicKey"
                    }
                vault_mount.mongo: |-
                    {
                      "description": "MongoDB Atlas secret engine mount",
                      "path": "%s",
                      "type": "mongodbatlas"
                    }
        argumentDocs:
            cidr_blocks: '- (Optional) Whitelist entry in CIDR notation to be added for the API key.'
            ip_addresses: '- (Optional) IP address to be added to the whitelist for the API key.'
            max_ttl: '- (Optional) The maximum allowed lifetime of credentials issued using this role.'
            mount: '- (Required) Path where the MongoDB Atlas Secrets Engine is mounted.'
            name: '- (Required) The name of the role.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization_id: |-
                - (Optional) Unique identifier for the organization to which the target API Key belongs.
                Required if project_id is not set.
            project_id: |-
                - (Optional) Unique identifier for the project to which the target API Key belongs.
                Required if organization_id is not set.
            project_roles: '- (Optional) Roles assigned when an org API key is assigned to a project API key.'
            roles: '- (Required) List of roles that the API Key needs to have.'
            ttl: '- (Optional) Duration in seconds after which the issued credential should expire.'
        importStatements: []
    vault_mount:
        subCategory: ""
        description: Managing the mounting of secret backends in Vault
        name: vault_mount
        title: vault_mount resource
        examples:
            - name: example
              manifest: |-
                {
                  "description": "This is an example mount",
                  "path": "dummy",
                  "type": "generic"
                }
            - name: kvv2-example
              manifest: |-
                {
                  "description": "This is an example KV Version 2 secret engine mount",
                  "options": {
                    "type": "kv-v2",
                    "version": "2"
                  },
                  "path": "version2-example",
                  "type": "kv-v2"
                }
            - name: transit-example
              manifest: |-
                {
                  "description": "This is an example transit secret engine mount",
                  "options": {
                    "convergent_encryption": false
                  },
                  "path": "transit-example",
                  "type": "transit"
                }
            - name: pki-example
              manifest: |-
                {
                  "default_lease_ttl_seconds": 3600,
                  "description": "This is an example PKI mount",
                  "max_lease_ttl_seconds": 86400,
                  "path": "pki-example",
                  "type": "pki"
                }
        argumentDocs:
            accessor: '- The accessor for this mount.'
            allowed_managed_keys: '- (Optional) Set of managed key registry entry names that the mount in question is allowed to access'
            audit_non_hmac_request_keys: '- (Optional) Specifies the list of keys that will not be HMAC''d by audit devices in the request data object.'
            audit_non_hmac_response_keys: '- (Optional) Specifies the list of keys that will not be HMAC''d by audit devices in the response data object.'
            default_lease_ttl_seconds: '- (Optional) Default lease duration for tokens and secrets in seconds'
            description: '- (Optional) Human-friendly description of the mount'
            external_entropy_access: '- (Optional) Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault''s external entropy source'
            local: '- (Optional) Boolean flag that can be explicitly set to true to enforce local mount in HA environment'
            max_lease_ttl_seconds: '- (Optional) Maximum possible lease duration for tokens and secrets in seconds'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            options: '- (Optional) Specifies mount type specific options that are passed to the backend'
            path: '- (Required) Where the secret backend will be mounted'
            seal_wrap: '- (Optional) Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal''s encryption capability'
            type: '- (Required) Type of the backend, such as "aws"'
        importStatements: []
    vault_namespace:
        subCategory: ""
        description: Writes namespaces for Vault
        name: vault_namespace
        title: vault_namespace resource
        examples:
            - name: ns1
              manifest: |-
                {
                  "path": "ns1"
                }
            - name: parent
              manifest: |-
                {
                  "path": "parent"
                }
              dependencies:
                vault_generic_secret.children: |-
                    {
                      "data_json": "${jsonencode(\n    {\n      \"ns\" = each.key\n    }\n  )}",
                      "for_each": "${vault_mount.children}",
                      "namespace": "${each.value.namespace}",
                      "path": "${each.value.path}/secret"
                    }
                vault_mount.children: |-
                    {
                      "for_each": "${vault_namespace.children}",
                      "namespace": "${each.value.path_fq}",
                      "options": {
                        "version": "1"
                      },
                      "path": "secrets",
                      "type": "kv"
                    }
            - name: children
              manifest: |-
                {
                  "for_each": "${var.child_namespaces}",
                  "namespace": "${vault_namespace.parent.path}",
                  "path": "${each.key}"
                }
              references:
                for_each: var.child_namespaces
                namespace: vault_namespace.parent.path
                path: each.key
              dependencies:
                vault_generic_secret.children: |-
                    {
                      "data_json": "${jsonencode(\n    {\n      \"ns\" = each.key\n    }\n  )}",
                      "for_each": "${vault_mount.children}",
                      "namespace": "${each.value.namespace}",
                      "path": "${each.value.path}/secret"
                    }
                vault_mount.children: |-
                    {
                      "for_each": "${vault_namespace.children}",
                      "namespace": "${each.value.path_fq}",
                      "options": {
                        "version": "1"
                      },
                      "path": "secrets",
                      "type": "kv"
                    }
            - name: example2
              manifest: |-
                {
                  "path": "example2",
                  "provider": "${vault.example}"
                }
              references:
                provider: vault.example
        argumentDocs:
            custom_metadata: |-
                - (Optional) Custom metadata describing this namespace. Value type
                is map[string]string. Requires Vault version 1.12+.
            id: '- The fully qualified path to the namespace, including the provider namespace and a trailing slash.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            namespace_id: '- Vault server''s internal ID of the namespace.'
            path: '- (Required) The path of the namespace. Must not have a trailing /.'
            path_fq: |-
                - The fully qualified path to the namespace. Useful when provisioning resources in a child namespace.
                The path is relative to the provider's namespace argument.
        importStatements: []
    vault_nomad_secret_backend:
        subCategory: ""
        description: Creates a Nomad secret backend for Vault.
        name: vault_nomad_secret_backend
        title: vault_nomad_secret_backend resource
        examples:
            - name: config
              manifest: |-
                {
                  "address": "https://127.0.0.1:4646",
                  "backend": "nomad",
                  "default_lease_ttl_seconds": "3600",
                  "description": "test description",
                  "max_lease_ttl_seconds": "7200",
                  "max_ttl": "240",
                  "token": "ae20ceaa-...",
                  "ttl": "120"
                }
        argumentDocs:
            address: |-
                - (Optional) Specifies the address of the Nomad instance, provided
                as "protocol://host:port" like "http://127.0.0.1:4646".
            backend: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to nomad.
            ca_cert: |-
                - (Optional) CA certificate to use when verifying the Nomad server certificate, must be
                x509 PEM encoded.
            client_cert: '- (Optional) Client certificate to provide to the Nomad server, must be x509 PEM encoded.'
            client_key: '- (Optional) Client certificate key to provide to the Nomad server, must be x509 PEM encoded.'
            default_lease_ttl_seconds: '- (Optional) Default lease duration for secrets in seconds.'
            description: '- (Optional) Human-friendly description of the mount for the Active Directory backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            local: |-
                - (Optional) Mark the secrets engine as local-only. Local engines are not replicated or removed by
                replication.Tolerance duration to use when checking the last rotation time.
            max_token_name_length: |-
                - (Optional) Specifies the maximum length to use for the name of the Nomad token
                generated with Generate Credential. If omitted, 0 is used and ignored, defaulting to the max value allowed
                by the Nomad version.
            max_ttl: '- (Optional) Maximum possible lease duration for secrets in seconds.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            token: '- (Optional) Specifies the Nomad Management token to use.'
            ttl: '- (Optional) Specifies the ttl of the lease for the generated token.'
        importStatements: []
    vault_nomad_secret_role:
        subCategory: ""
        description: Creates a Nomad role.
        name: vault_nomad_secret_role
        title: vault_nomad_secret_role resource
        examples:
            - name: test
              manifest: |-
                {
                  "backend": "${vault_nomad_secret_backend.config.backend}",
                  "policies": [
                    "readonly"
                  ],
                  "role": "test",
                  "type": "client"
                }
              references:
                backend: vault_nomad_secret_backend.config.backend
              dependencies:
                vault_nomad_secret_backend.config: |-
                    {
                      "address": "https://127.0.0.1:4646",
                      "backend": "nomad",
                      "default_lease_ttl_seconds": "3600",
                      "description": "test description",
                      "max_lease_ttl_seconds": "7200",
                      "token": "ae20ceaa-..."
                    }
        argumentDocs:
            backend: '- (Required) The unique path this backend should be mounted at.'
            global: |-
                - (Optional) Specifies if the generated token should be global. Defaults to
                false.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policies: |-
                - (Optional) List of policies attached to the generated token. This setting is only used
                when type is 'client'.
            role: |-
                - (Required) The name to identify this role within the backend.
                Must be unique within the backend.
            type: |-
                - (Optional)  Specifies the type of token to create when using this role. Valid
                settings are 'client' and 'management'. Defaults to 'client'.
        importStatements: []
    vault_password_policy:
        subCategory: ""
        description: Writes Password policies for Vault
        name: vault_password_policy
        title: vault_password_policy resource
        examples:
            - name: alphanumeric
              manifest: |-
                {
                  "name": "alphanumeric",
                  "policy": "    length = 20\n    rule \"charset\" {\n      charset = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    }\n"
                }
        argumentDocs:
            name: '- (Required) The name of the password policy.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policy: '- (Required) String containing a password policy.'
        importStatements: []
    vault_pki_secret_backend_cert:
        subCategory: ""
        description: Generate an PKI certificate.
        name: vault_pki_secret_backend_cert
        title: vault_pki_secret_backend_cert resource
        examples:
            - name: app
              manifest: |-
                {
                  "backend": "${vault_mount.intermediate.path}",
                  "common_name": "app.my.domain",
                  "depends_on": [
                    "${vault_pki_secret_backend_role.admin}"
                  ],
                  "name": "${vault_pki_secret_backend_role.test.name}"
                }
              references:
                backend: vault_mount.intermediate.path
                name: vault_pki_secret_backend_role.test.name
        argumentDocs:
            alt_names: '- (Optional) List of alternative names'
            auto_renew: '- (Optional) If set to true, certs will be renewed if the expiration is within min_seconds_remaining. Default false'
            backend: '- (Required) The PKI secret backend the resource belongs to.'
            ca_chain: '- The CA chain'
            certificate: '- The certificate'
            common_name: '- (Required) CN of certificate to create'
            exclude_cn_from_sans: '- (Optional) Flag to exclude CN from SANs'
            expiration: '- The expiration date of the certificate in unix epoch format'
            format: '- (Optional) The format of data'
            ip_sans: '- (Optional) List of alternative IPs'
            issuing_ca: '- The issuing CA'
            min_seconds_remaining: '- (Optional) Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)'
            name: '- (Required) Name of the role to create the certificate against'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            other_sans: '- (Optional) List of other SANs'
            private_key: '- The private key'
            private_key_format: '- (Optional) The private key format'
            private_key_type: '- The private key type'
            renew_pending: '- true if the current time (during refresh) is after the start of the early renewal window declared by min_seconds_remaining, and false otherwise; if auto_renew is set to true then the provider will plan to replace the certificate once renewal is pending.'
            revoke: '- If set to true, the certificate will be revoked on resource destruction.'
            serial_number: '- The serial number'
            ttl: '- (Optional) Time to live'
            uri_sans: '- (Optional) List of alternative URIs'
            user_ids: '- (Optional) List of Subject User IDs'
        importStatements: []
    vault_pki_secret_backend_config_ca:
        subCategory: ""
        description: Submit the CA information to PKI.
        name: vault_pki_secret_backend_config_ca
        title: vault_pki_secret_backend_config_ca resource
        examples:
            - name: intermediate
              manifest: |-
                {
                  "backend": "${vault_mount.intermediate.path}",
                  "depends_on": [
                    "${vault_mount.intermediate}"
                  ],
                  "pem_bundle": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAwvEHeJCXnFgi88rE1dTX6FHdBPK0wSjedh0ywVnCZxLWbBv/\n5PytjTcCPdrfW7g2sfbPwOge/WF3X2KeYSP8SxZA0czmz6QDspeG921JkZWtyp5o\n++N0leLTIUAhq339p3O1onAOUO1k4sHfmCwfrDpTn2hcx4URa5Pzzb1fHigusjIH\n1mcGdncaA6Z2CzO1w4E8kPOUukIDrcZT4faOZrWUIQZKQw2JzTyKJ+ZMDCZq2TFz\nWwpL3eG48wB7J7mibFQ/9nFvxpIflBjDAZ8QiqkwYr5N0DNsTxcfTCSeubfJDCUf\nIWwFZhLitzwOxazazUQKXX/SPMQ1l/L9o3nnHwIDAQABAoIBAAQidJQcDPsl62fc\nTxxx7TpiMhvewfKu2TkMGX18V+EzxxR364+BxHSQTB3fvIkHeTGBGJrw0WdyX8PI\nJa/NwZYeHLXWcLbKtcFd8WDiEoNh91Oq1HMzOc/MBcpYv94RSAX7MEkHs2YIAvHE\nRufFV86hVhC1d/JLYjkz5CHi+Fd9XTYjBK78tHhJd4IJPu5LYvwlmzC1zeS7s1Tg\nQW1FQuVDV8tWa4PMTrQHwfaGqn95AKc+tbg+ubpCiWl5bBNI3Ghuh4sAC9dMdAkd\nw27i29O9/Y3XJSSGUZlZqDBP4YU388RgHpzLDUxgRcaQt9vdeEz6frULPW67e9D2\nmPPDzjECgYEA4aPOwvnSwGoOKsS6vANGy4Ajsq09PR+1ltMJUR5kDlXGuZWI72eX\n3/GAnovDuCp0tbYt0r7Fmkfel0Ore7SYM18TH5QGpPddcZLvKUf7AchCIOYY0Te3\npS9+7S1lEGrLXyuox4N26Ov6wHVrmZTcQoZsDWbjYxNNsNACsiQNjGMCgYEA3SvQ\nJets9e9SgNVvao2TijX+/vcNKRfcWB71T9Xc4BuSNEu5+ZLtptlwaSnVCVu1Xilk\nsWDh+3EhByl4EteENPvE/7A2s1sfcDOprvg0r52aBZKeTp0AukrT8+Ad4hap7g1x\n2Lz11MFDkhRqt2KqQaIL+5Mq5WfptbBJ0YI7ARUCgYAD6iSfK1hlsDFYupsGwgPL\nagi0g97pHZC38idaOe3AdeqBs79xb9mpr/XsSj52Bn6J3IRFALxK5e5Nr4XdGo/9\nbCvXw2iuGgCMBOGTVMVdDY1gJr3Ne2r7Oay5Dq2PMFsg5pACDhzVA6sRBbh9LKD5\non1jaiKNyHrzk1hIoOl/QwKBgA+Ov2uLbfS2yvTpDpdOMiyss603r6NOXF+Ofe8J\nuinBhr1K/mAB59muveuH18Z6vv1KqByaFgtb39jjH+Eja9dWRns95/sh08pOuAbo\nyrv3uBfgQmaBQMXZ8aLcBv4aXgWyyGlYkWpP1fL2oLMZq6RGQ9WEeqX8c0ImjmrA\nYGopAoGBAJZPFlZi2Rfq4MfFZp/X1/zM09hphZwkxkSI+RnsjDUjTgB8CuQul5ep\nKWE98yLw4C25Cqw5fKKQ2addizLnZCAIfJKVNRjYLWlWyGQydDEUzqwXlSLS9LVX\nLxLkWDajIyjeFn21Ttb42L9pBo3TAQIxUenom/lP2SQTvCKBiPai\n-----END RSA PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIIDazCCAlOgAwIBAgIUahce2sCO7Bom/Rznd5HsNAlr1NgwDQYJKoZIhvcNAQEL\nBQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM\nGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0xODEyMDIwMTAxNDRaFw00NjEy\nMTUwMTAxNDRaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEw\nHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggEiMA0GCSqGSIb3DQEB\nAQUAA4IBDwAwggEKAoIBAQDC8Qd4kJecWCLzysTV1NfoUd0E8rTBKN52HTLBWcJn\nEtZsG//k/K2NNwI92t9buDax9s/A6B79YXdfYp5hI/xLFkDRzObPpAOyl4b3bUmR\nla3Knmj743SV4tMhQCGrff2nc7WicA5Q7WTiwd+YLB+sOlOfaFzHhRFrk/PNvV8e\nKC6yMgfWZwZ2dxoDpnYLM7XDgTyQ85S6QgOtxlPh9o5mtZQhBkpDDYnNPIon5kwM\nJmrZMXNbCkvd4bjzAHsnuaJsVD/2cW/Gkh+UGMMBnxCKqTBivk3QM2xPFx9MJJ65\nt8kMJR8hbAVmEuK3PA7FrNrNRApdf9I8xDWX8v2jeecfAgMBAAGjUzBRMB0GA1Ud\nDgQWBBQXGfrns8OqxTGKsXG5pDZS/WyyYDAfBgNVHSMEGDAWgBQXGfrns8OqxTGK\nsXG5pDZS/WyyYDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCt\n8aUX26cl2PgdIEByZSHAX5G+2b0IEtTclPkl4uDyyKRY4dVq6gK3ueVSU5eUmBip\nJbV5aRetovGOcV//8vbxkZm/ntQ8Oo+2sfGR5lIzd0UdlOr5pkD6g3bFy/zJ+4DR\nDAe8fklUacfz6CFmD+H8GyHm+fKmF+mjr4oOGQW6OegRDJHuiipUk2lJyuXdlPSa\nFpNRO2sGbjn000ANinFgnFiVzGDnx0/G1Kii/6GWrI6rrdVmXioQzF+8AloWckeB\n+hbmbwkwQa/JrLb5SWcBDOXSgtn1Li3XF5AQQBBjA3pOlyBXqnI94Irw89Lv9uPT\nMUR4qFxeUOW/GJGccMUd\n-----END CERTIFICATE-----\n"
                }
              references:
                backend: vault_mount.intermediate.path
        argumentDocs:
            backend: '- (Required) The PKI secret backend the resource belongs to.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            pem_bundle: '- (Required) The key and certificate PEM bundle'
        importStatements: []
    vault_pki_secret_backend_config_issuers:
        subCategory: ""
        description: Allows setting the value of the default issuer.
        name: vault_pki_secret_backend_config_issuers
        title: vault_pki_secret_backend_config_issuers resource
        examples:
            - name: config
              manifest: |-
                {
                  "backend": "${vault_mount.pki.path}",
                  "default": "${vault_pki_secret_backend_issuer.example.issuer_id}",
                  "default_follows_latest_issuer": true
                }
              references:
                backend: vault_mount.pki.path
                default: vault_pki_secret_backend_issuer.example.issuer_id
              dependencies:
                vault_mount.pki: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "max_lease_ttl_seconds": 86400,
                      "path": "pki",
                      "type": "pki"
                    }
                vault_pki_secret_backend_issuer.example: |-
                    {
                      "backend": "${vault_pki_secret_backend_root_cert.root.backend}",
                      "issuer_name": "example-issuer",
                      "issuer_ref": "${vault_pki_secret_backend_root_cert.root.issuer_id}"
                    }
                vault_pki_secret_backend_root_cert.root: |-
                    {
                      "backend": "${vault_mount.pki.path}",
                      "common_name": "test",
                      "ttl": "86400",
                      "type": "internal"
                    }
        argumentDocs:
            backend: |-
                - (Required) The path the PKI secret backend is mounted at, with no
                leading or trailing /s.
            default: |-
                - (Required) Specifies the default issuer using the issuer ID.
                NOTE: It is recommended to only set the default issuer using the ID.
                While Vault does allow passing in the issuer name, this can lead to possible drifts in the Terraform state.
            default_follows_latest_issuer: |-
                - (Optional) Specifies whether a root creation
                or an issuer import operation updates the default issuer to the newly added issuer.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_pki_secret_backend_config_urls:
        subCategory: ""
        description: Sets the config URL's on an PKI Secret Backend for Vault.
        name: vault_pki_secret_backend_config_urls
        title: vault_pki_secret_backend_config_urls resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_mount.root.path}",
                  "issuing_certificates": [
                    "http://127.0.0.1:8200/v1/pki/ca"
                  ]
                }
              references:
                backend: vault_mount.root.path
              dependencies:
                vault_mount.root: |-
                    {
                      "default_lease_ttl_seconds": 8640000,
                      "description": "root PKI",
                      "max_lease_ttl_seconds": 8640000,
                      "path": "pki-root",
                      "type": "pki"
                    }
        argumentDocs:
            backend: '- (Required) The path the PKI secret backend is mounted at, with no leading or trailing /s.'
            crl_distribution_points: '- (Optional) Specifies the URL values for the CRL Distribution Points field.'
            issuing_certificates: '- (Optional) Specifies the URL values for the Issuing Certificate field.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            ocsp_servers: '- (Optional) Specifies the URL values for the OCSP Servers field.'
        importStatements: []
    vault_pki_secret_backend_crl_config:
        subCategory: ""
        description: Sets the CRL config on an PKI Secret Backend for Vault.
        name: vault_pki_secret_backend_crl_config
        title: vault_pki_secret_backend_crl_config resource
        examples:
            - name: crl_config
              manifest: |-
                {
                  "backend": "${vault_mount.pki.path}",
                  "disable": false,
                  "expiry": "72h"
                }
              references:
                backend: vault_mount.pki.path
              dependencies:
                vault_mount.pki: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "max_lease_ttl_seconds": 86400,
                      "path": "%s",
                      "type": "pki"
                    }
        argumentDocs:
            auto_rebuild: '- (Optional) Enables periodic rebuilding of the CRL upon expiry. Vault 1.12+'
            auto_rebuild_grace_period: '- (Optional) Grace period before CRL expiry to attempt rebuild of CRL. Vault 1.12+'
            backend: '- (Required) The path the PKI secret backend is mounted at, with no leading or trailing /s.'
            cross_cluster_revocation: '- (Optional) Enable cross-cluster revocation request queues. Vault 1.13+'
            delta_rebuild_interval: '- (Optional) Interval to check for new revocations on, to regenerate the delta CRL.'
            disable: '- (Optional) Disables or enables CRL building.'
            enable_delta: |-
                - (Optional) Enables building of delta CRLs with up-to-date revocation information,
                augmenting the last complete CRL.  Vault 1.12+
            expiry: '- (Optional) Specifies the time until expiration.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            ocsp_disable: '- (Optional) Disables the OCSP responder in Vault. Vault 1.12+'
            ocsp_expiry: |-
                - (Optional) The amount of time an OCSP response can be cached for, useful for OCSP stapling
                refresh durations. Vault 1.12+
            unified_crl: '- (Optional) Enables unified CRL and OCSP building. Vault 1.13+'
            unified_crl_on_existing_paths: |-
                - (Optional) Enables serving the unified CRL and OCSP on the existing, previously
                cluster-local paths. Vault 1.13+
        importStatements: []
    vault_pki_secret_backend_intermediate_cert_request:
        subCategory: ""
        description: Generate a new private key and a CSR for signing the PKI.
        name: vault_pki_secret_backend_intermediate_cert_request
        title: vault_pki_secret_backend_intermediate_cert_request resource
        examples:
            - name: test
              manifest: |-
                {
                  "backend": "${vault_mount.pki.path}",
                  "common_name": "app.my.domain",
                  "depends_on": [
                    "${vault_mount.pki}"
                  ],
                  "type": "internal"
                }
              references:
                backend: vault_mount.pki.path
        argumentDocs:
            add_basic_constraints: |-
                - (Optional) Adds a Basic Constraints extension with 'CA: true'.
                Only needed as a workaround in some compatibility scenarios with Active Directory
                Certificate Services
            alt_names: '- (Optional) List of alternative names'
            backend: '- (Required) The PKI secret backend the resource belongs to.'
            common_name: '- (Required) CN of intermediate to create'
            country: '- (Optional) The country'
            csr: '- The CSR'
            exclude_cn_from_sans: '- (Optional) Flag to exclude CN from SANs'
            format: '- (Optional) The format of data'
            ip_sans: '- (Optional) List of alternative IPs'
            key_bits: '- (Optional) The number of bits to use'
            key_id: '- The ID of the generated key.'
            key_name: |-
                - (Optional) When a new key is created with this request, optionally specifies
                the name for this. The global ref default may not be used as a name.
            key_ref: |-
                - (Optional) Specifies the key (either default, by name, or by identifier) to use
                for generating this request. Only suitable for type=existing requests.
            key_type: '- (Optional) The desired key type'
            locality: '- (Optional) The locality'
            managed_key_id: |-
                - (Optional) The ID of the previously configured managed key. This field is
                required if type is kms and it conflicts with managed_key_name
            managed_key_name: |-
                - (Optional) The name of the previously configured managed key. This field is
                required if type is kms  and it conflicts with managed_key_id
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization: '- (Optional) The organization'
            other_sans: '- (Optional) List of other SANs'
            ou: '- (Optional) The organization unit'
            postal_code: '- (Optional) The postal code'
            private_key: '- The private key'
            private_key_format: '- (Optional) The private key format'
            private_key_type: '- The private key type'
            province: '- (Optional) The province'
            serial_number: '- The serial number'
            street_address: '- (Optional) The street address'
            type: |-
                - (Required) Type of intermediate to create. Must be either "exported" or "internal"
                or "kms"
            uri_sans: '- (Optional) List of alternative URIs'
        importStatements: []
    vault_pki_secret_backend_intermediate_set_signed:
        subCategory: ""
        description: Submit the PKI CA certificate.
        name: vault_pki_secret_backend_intermediate_set_signed
        title: vault_pki_secret_backend_intermediate_set_signed resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_mount.intermediate.path}",
                  "certificate": "${vault_pki_secret_backend_root_sign_intermediate.example.certificate}"
                }
              references:
                backend: vault_mount.intermediate.path
                certificate: vault_pki_secret_backend_root_sign_intermediate.example.certificate
              dependencies:
                vault_mount.intermediate: |-
                    {
                      "default_lease_ttl_seconds": 86400,
                      "description": "intermediate",
                      "max_lease_ttl_seconds": 86400,
                      "path": "pki-int",
                      "type": "${vault_mount.root.type}"
                    }
                vault_mount.root: |-
                    {
                      "default_lease_ttl_seconds": 8640000,
                      "description": "root",
                      "max_lease_ttl_seconds": 8640000,
                      "path": "pki-root",
                      "type": "pki"
                    }
                vault_pki_secret_backend_intermediate_cert_request.example: |-
                    {
                      "backend": "${vault_mount.intermediate.path}",
                      "common_name": "SubOrg Intermediate CA",
                      "type": "${vault_pki_secret_backend_root_cert.example.type}"
                    }
                vault_pki_secret_backend_root_cert.example: |-
                    {
                      "backend": "${vault_mount.root.path}",
                      "common_name": "RootOrg Root CA",
                      "country": "US",
                      "exclude_cn_from_sans": true,
                      "format": "pem",
                      "key_bits": 4096,
                      "key_type": "rsa",
                      "locality": "San Francisco",
                      "organization": "RootOrg",
                      "ou": "Organizational Unit",
                      "private_key_format": "der",
                      "province": "CA",
                      "ttl": 86400,
                      "type": "internal"
                    }
                vault_pki_secret_backend_root_sign_intermediate.example: |-
                    {
                      "backend": "${vault_mount.root.path}",
                      "common_name": "SubOrg Intermediate CA",
                      "country": "US",
                      "csr": "${vault_pki_secret_backend_intermediate_cert_request.example.csr}",
                      "exclude_cn_from_sans": true,
                      "locality": "San Francisco",
                      "organization": "SubOrg",
                      "ou": "SubUnit",
                      "province": "CA",
                      "revoke": true
                    }
        argumentDocs:
            backend: '- (Required) The PKI secret backend the resource belongs to.'
            certificate: |-
                - (Required) Specifies the PEM encoded certificate. May optionally append additional
                CA certificates to populate the whole chain, which will then enable returning the full chain from
                issue and sign operations.
            imported_issuers: |-
                - The imported issuers indicating which issuers were created as part of
                this request.
            imported_keys: '- The imported keys indicating which keys were created as part of this request.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
        importStatements: []
    vault_pki_secret_backend_issuer:
        subCategory: ""
        description: Manages the lifecycle of an existing issuer on a PKI Secret Backend.
        name: vault_pki_secret_backend_issuer
        title: vault_pki_secret_backend_issuer resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_pki_secret_backend_root_cert.root.backend}",
                  "issuer_name": "example-issuer",
                  "issuer_ref": "${vault_pki_secret_backend_root_cert.root.issuer_id}"
                }
              references:
                backend: vault_pki_secret_backend_root_cert.root.backend
                issuer_ref: vault_pki_secret_backend_root_cert.root.issuer_id
              dependencies:
                vault_mount.pki: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "max_lease_ttl_seconds": 86400,
                      "path": "pki",
                      "type": "pki"
                    }
                vault_pki_secret_backend_root_cert.root: |-
                    {
                      "backend": "${vault_mount.pki.path}",
                      "common_name": "test",
                      "ttl": "86400",
                      "type": "internal"
                    }
        argumentDocs:
            backend: |-
                - (Required) The path the PKI secret backend is mounted at, with no
                leading or trailing /s.
            crl_distribution_points: |-
                - (Optional) Specifies the URL values for the CRL
                Distribution Points field.
            enable_aia_url_templating: |-
                - (Optional) Specifies that the AIA URL values should
                be templated.
            issuer_id: '- ID of the issuer.'
            issuer_name: '- (Optional) Name of the issuer.'
            issuer_ref: '- (Required) Reference to an existing issuer.'
            issuing_certificates: |-
                - (Optional) Specifies the URL values for the Issuing
                Certificate field.
            leaf_not_after_behavior: |-
                - (Optional) Behavior of a leaf's NotAfter field during
                issuance.
            manual_chain: |-
                - (Optional) Chain of issuer references to build this issuer's
                computed CAChain field from, when non-empty.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            ocsp_servers: '- (Optional) Specifies the URL values for the OCSP Servers field.'
            revocation_signature_algorithm: |-
                - (Optional) Which signature algorithm to use
                when building CRLs.
            usage: '- (Optional) Allowed usages for this issuer.'
        importStatements: []
    vault_pki_secret_backend_key:
        subCategory: ""
        description: Creates a key on a PKI Secret Backend for Vault.
        name: vault_pki_secret_backend_key
        title: vault_pki_secret_backend_key resource
        examples:
            - name: key
              manifest: |-
                {
                  "key_bits": "2048",
                  "key_name": "example-key",
                  "key_type": "rsa",
                  "mount": "${vault_mount.pki.path}",
                  "type": "exported"
                }
              references:
                mount: vault_mount.pki.path
              dependencies:
                vault_mount.pki: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "max_lease_ttl_seconds": 86400,
                      "path": "pki",
                      "type": "pki"
                    }
        argumentDocs:
            backend: '- (Required) The path the PKI secret backend is mounted at, with no leading or trailing /s.'
            key_bits: |-
                - (Optional) Specifies the number of bits to use for the generated keys.
                Allowed values are 0 (universal default); with key_type=rsa, allowed values are:
                2048 (default), 3072, or 4096; with key_type=ec, allowed values are: 224, 256 (default),
                384, or 521; ignored with key_type=ed25519.
            key_id: '- ID of the generated key.'
            key_name: |-
                - (Optional) When a new key is created with this request, optionally specifies the name for this.
                The global ref default may not be used as a name.
            key_type: '- (Optional) Specifies the desired key type; must be rsa, ed25519 or ec.'
            managed_key_id: '- (Optional) The managed key''s UUID.'
            managed_key_name: '- (Optional) The managed key''s configured name.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            type: '- (Required) Specifies the type of the key to create. Can be exported,internal or kms.'
        importStatements: []
    vault_pki_secret_backend_role:
        subCategory: ""
        description: Create a role on an PKI Secret Backend for Vault.
        name: vault_pki_secret_backend_role
        title: vault_pki_secret_backend_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "allow_ip_sans": true,
                  "allow_subdomains": true,
                  "allowed_domains": [
                    "example.com",
                    "my.domain"
                  ],
                  "backend": "${vault_mount.pki.path}",
                  "key_bits": 4096,
                  "key_type": "rsa",
                  "name": "my_role",
                  "ttl": 3600
                }
              references:
                backend: vault_mount.pki.path
              dependencies:
                vault_mount.pki: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "max_lease_ttl_seconds": 86400,
                      "path": "pki",
                      "type": "pki"
                    }
            - name: role
              manifest: |-
                {
                  "allow_ip_sans": true,
                  "allow_subdomains": true,
                  "allowed_domains": [
                    "example.com",
                    "my.domain"
                  ],
                  "backend": "${vault_mount.pki.path}",
                  "key_bits": 4096,
                  "key_type": "rsa",
                  "name": "my_role",
                  "policy_identifier": [
                    {
                      "notice": "I am a user Notice",
                      "oid": "1.3.6.1.4.1.7.8"
                    },
                    {
                      "cps": "https://example.com",
                      "oid": "1.3.6.1.4.1.44947.1.2.4"
                    }
                  ],
                  "ttl": 3600
                }
              references:
                backend: vault_mount.pki.path
              dependencies:
                vault_mount.pki: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "max_lease_ttl_seconds": 86400,
                      "path": "pki",
                      "type": "pki"
                    }
        argumentDocs:
            allow_any_name: '- (Optional) Flag to allow any name'
            allow_bare_domains: '- (Optional) Flag to allow certificates matching the actual domain'
            allow_glob_domains: '- (Optional) Flag to allow names containing glob patterns.'
            allow_ip_sans: '- (Optional) Flag to allow IP SANs'
            allow_localhost: '- (Optional) Flag to allow certificates for localhost'
            allow_subdomains: '- (Optional) Flag to allow certificates matching subdomains'
            allow_wildcard_certificates: '- (Optional) Flag to allow wildcard certificates.'
            allowed_domains: '- (Optional) List of allowed domains for certificates'
            allowed_domains_template: '- (Optional) Flag, if set, allowed_domains can be specified using identity template expressions such as {{identity.entity.aliases.<mount accessor>.name}}.'
            allowed_other_sans: '- (Optional) Defines allowed custom SANs'
            allowed_serial_numbers: '- (Optional) An array of allowed serial numbers to put in Subject'
            allowed_uri_sans: '- (Optional) Defines allowed URI SANs'
            allowed_uri_sans_template: '- (Optional) Flag, if set, allowed_uri_sans can be specified using identity template expressions such as {{identity.entity.aliases.<mount accessor>.name}}.'
            allowed_user_ids: '- (Optional) Defines allowed User IDs'
            backend: '- (Required) The path the PKI secret backend is mounted at, with no leading or trailing /s.'
            basic_constraints_valid_for_non_ca: '- (Optional) Flag to mark basic constraints valid when issuing non-CA certificates'
            client_flag: '- (Optional) Flag to specify certificates for client use'
            code_signing_flag: '- (Optional) Flag to specify certificates for code signing use'
            country: '- (Optional) The country of generated certificates'
            email_protection_flag: '- (Optional) Flag to specify certificates for email protection use'
            enforce_hostnames: '- (Optional) Flag to allow only valid host names'
            ext_key_usage: '- (Optional) Specify the allowed extended key usage constraint on issued certificates'
            ext_key_usage_oids: '- (Optional) Specify the allowed extended key usage OIDs constraint on issued certificates'
            generate_lease: '- (Optional) Flag to generate leases with certificates'
            issuer_ref: |-
                - (Optional) Specifies the default issuer of this request. May
                be the value default, a name, or an issuer ID. Use ACLs to prevent access to
                the /pki/issuer/:issuer_ref/{issue,sign}/:name paths to prevent users
                overriding the role's issuer_ref value.
            key_bits: '- (Optional) The number of bits of generated keys'
            key_type: |-
                - (Optional) The generated key type, choices: rsa, ec, ed25519, any
                Defaults to rsa
            key_usage: |-
                - (Optional) Specify the allowed key usage constraint on issued
                certificates. Defaults to ["DigitalSignature", "KeyAgreement", "KeyEncipherment"]).
                To specify no default key usage constraints, set this to an empty list [].
            locality: '- (Optional) The locality of generated certificates'
            max_ttl: '- (Optional, integer) The maximum lease TTL, in seconds, for the role.'
            name: '- (Required) The name to identify this role within the backend. Must be unique within the backend.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            no_store: '- (Optional) Flag to not store certificates in the storage backend'
            not_before_duration: '- (Optional) Specifies the duration by which to backdate the NotBefore property.'
            organization: '- (Optional) The organization of generated certificates'
            ou: '- (Optional) The organization unit of generated certificates'
            policy_identifier: '- (Optional) (Vault 1.11+ only) A block for specifying policy identifers. The policy_identifier block can be repeated, and supports the following arguments:'
            policy_identifier.cps: '- (Optional) The URL of the CPS for the policy identifier'
            policy_identifier.notice: '- (Optional) A notice for the policy identifier'
            policy_identifier.oid: '- (Required) The OID for the policy identifier'
            policy_identifiers: '- (Optional) Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use policy_identifier blocks instead'
            postal_code: '- (Optional) The postal code of generated certificates'
            province: '- (Optional) The province of generated certificates'
            require_cn: '- (Optional) Flag to force CN usage'
            server_flag: '- (Optional) Flag to specify certificates for server use'
            street_address: '- (Optional) The street address of generated certificates'
            ttl: '- (Optional, integer) The TTL, in seconds, for any certificate issued against this role.'
            use_csr_common_name: '- (Optional) Flag to use the CN in the CSR'
            use_csr_sans: '- (Optional) Flag to use the SANs in the CSR'
        importStatements: []
    vault_pki_secret_backend_root_cert:
        subCategory: ""
        description: Generate root.
        name: vault_pki_secret_backend_root_cert
        title: vault_pki_secret_backend_root_cert resource
        examples:
            - name: test
              manifest: |-
                {
                  "backend": "${vault_mount.pki.path}",
                  "common_name": "Root CA",
                  "depends_on": [
                    "${vault_mount.pki}"
                  ],
                  "exclude_cn_from_sans": true,
                  "format": "pem",
                  "key_bits": 4096,
                  "key_type": "rsa",
                  "organization": "My organization",
                  "ou": "My OU",
                  "private_key_format": "der",
                  "ttl": "315360000",
                  "type": "internal"
                }
              references:
                backend: vault_mount.pki.path
        argumentDocs:
            alt_names: '- (Optional) List of alternative names'
            backend: '- (Required) The PKI secret backend the resource belongs to.'
            certificate: '- The certificate.'
            common_name: '- (Required) CN of intermediate to create'
            country: '- (Optional) The country'
            exclude_cn_from_sans: '- (Optional) Flag to exclude CN from SANs'
            format: '- (Optional) The format of data'
            ip_sans: '- (Optional) List of alternative IPs'
            issuer_id: '- The ID of the generated issuer.'
            issuer_name: |-
                - (Optional) Provides a name to the specified issuer. The name must be unique
                across all issuers and not be the reserved value default
            issuing_ca: '- The issuing CA certificate.'
            key_bits: '- (Optional) The number of bits to use'
            key_id: '- The ID of the generated key.'
            key_name: |-
                - (Optional) When a new key is created with this request, optionally specifies
                the name for this. The global ref default may not be used as a name.
            key_ref: |-
                - (Optional) Specifies the key (either default, by name, or by identifier) to use
                for generating this request. Only suitable for type=existing requests.
            key_type: '- (Optional) The desired key type'
            locality: '- (Optional) The locality'
            managed_key_id: |-
                - (Optional) The ID of the previously configured managed key. This field is
                required if type is kms and it conflicts with managed_key_name
            managed_key_name: |-
                - (Optional) The name of the previously configured managed key. This field is
                required if type is kms  and it conflicts with managed_key_id
            max_path_length: '- (Optional) The maximum path length to encode in the generated certificate'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization: '- (Optional) The organization'
            other_sans: '- (Optional) List of other SANs'
            ou: '- (Optional) The organization unit'
            permitted_dns_domains: '- (Optional) List of domains for which certificates are allowed to be issued'
            postal_code: '- (Optional) The postal code'
            private_key_format: '- (Optional) The private key format'
            province: '- (Optional) The province'
            serial: '- Deprecated, use serial_number instead.'
            serial_number: '- The certificate''s serial number, hex formatted.'
            street_address: '- (Optional) The street address'
            ttl: '- (Optional) Time to live'
            type: |-
                - (Required) Type of intermediate to create. Must be either "exported", "internal"
                or "kms"
            uri_sans: '- (Optional) List of alternative URIs'
        importStatements: []
    vault_pki_secret_backend_sign:
        subCategory: ""
        description: Sign a new certificate based on the CSR by the PKI.
        name: vault_pki_secret_backend_sign
        title: vault_pki_secret_backend_sign resource
        examples:
            - name: test
              manifest: |-
                {
                  "backend": "${vault_mount.pki.path}",
                  "common_name": "test.my.domain",
                  "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIEqDCCApACAQAwYzELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUx\nITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEcMBoGA1UEAwwTY2Vy\ndC50ZXN0Lm15LmRvbWFpbjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB\nAJupYCQ8UVCWII1Zof1c6YcSSaM9hEaDU78cfKP5RoSeH10BvrWRfT+mzCONVpNP\nCW9Iabtvk6hm0ot6ilnndEyVJbc0g7hdDLBX5BM25D+DGZGJRKUz1V+uBrWmXtIt\nVonj7JTDTe7ViH0GDsB7CvqXFGXO2a2cDYBchLkL6vQiFPshxvUsLtwxuy/qdYgy\nX6ya+AUoZcoQGy1XxNjfH6cPtWSWQGEp1oPR6vL9hU3laTZb3C+VV4jZem+he8/0\nV+qV6fLG92WTXm2hmf8nrtUqqJ+C7mW/RJod+TviviBadIX0OHXW7k5HVsZood01\nte8vMRUNJNiZfa9EMIK5oncbQn0LcM3Wo9VrjpL7jREb/4HCS2gswYGv7hzk9cCS\nkVY4rDucchKbApuI3kfzmO7GFOF5eiSkYZpY/czNn7VVM3WCu6dpOX4+3rhgrZQw\nkY14L930DaLVRUgve/zKVP2D2GHdEOs+MbV7s96UgigT9pXly/yHPj+1sSYqmnaD\n5b7jSeJusmzO/nrwXVGLsnezR87VzHl9Ux9g5s6zh+R+PrZuVxYsLvoUpaasH47O\ngIcBzSb/6pSGZKAUizmYsHsR1k88dAvsQ+FsUDaNokdi9VndEB4QPmiFmjyLV+0I\n1TFoXop4sW11NPz1YCq+IxnYrEaIN3PyhY0GvBJDFY1/AgMBAAGgADANBgkqhkiG\n9w0BAQsFAAOCAgEActuqnqS8Y9UF7e08w7tR3FPzGecWreuvxILrlFEZJxiLPFqL\nIt7uJvtypCVQvz6UQzKdBYO7tMpRaWViB8DrWzXNZjLMrg+QHcpveg8C0Ett4scG\nfnvLk6fTDFYrnGvwHTqiHos5i0y3bFLyS1BGwSpdLAykGtvC+VM8mRyw/Y7CPcKN\n77kebY/9xduW1g2uxWLr0x90RuQDv9psPojT+59tRLGSp5Kt0IeD3QtnAZEFE4aN\nvt+Pd69eg3BgZ8ZeDgoqAw3yppvOkpAFiE5pw2qPZaM4SRphl4d2Lek2zNIMyZqv\ndo5zh356HOgXtDaSg0POnRGrN/Ua+LMCRTg6GEPUnx9uQb/zt8Zu0hIexDGyykp1\nOGqtWlv/Nc8UYuS38v0BeB6bMPeoqQUjkqs8nHlAEFn0KlgYdtDC+7SdQx6wS4te\ndBKRNDfC4lS3jYJgs55jHqonZgkpSi3bamlxpfpW0ukGBcmq91wRe4bOw/4uD/vf\nUwqMWOdCYcU3mdYNjTWy22ORW3SGFQxMBwpUEURCSoeqWr6aJeQ7KAYkx1PrB5T8\nOTEc13lWf+B0PU9UJuGTsmpIuImPDVd0EVDayr3mT5dDbqTVDbe8ppf2IswABmf0\no3DybUeUmknYjl109rdSf+76nuREICHatxXgN3xCMFuBaN4WLO+ksd6Y1Ys=\n-----END CERTIFICATE REQUEST-----\n",
                  "depends_on": [
                    "${vault_pki_secret_backend_role.admin}"
                  ],
                  "name": "${vault_pki_secret_backend_role.admin.name}"
                }
              references:
                backend: vault_mount.pki.path
                name: vault_pki_secret_backend_role.admin.name
        argumentDocs:
            alt_names: '- (Optional) List of alternative names'
            auto_renew: '- (Optional) If set to true, certs will be renewed if the expiration is within min_seconds_remaining. Default false'
            backend: '- (Required) The PKI secret backend the resource belongs to.'
            ca_chain: '- The CA chain'
            certificate: '- The certificate'
            common_name: '- (Required) CN of certificate to create'
            csr: '- (Required) The CSR'
            exclude_cn_from_sans: '- (Optional) Flag to exclude CN from SANs'
            expiration: '- The expiration date of the certificate in unix epoch format'
            format: '- (Optional) The format of data'
            ip_sans: '- (Optional) List of alternative IPs'
            issuer_ref: |-
                - (Optional) Specifies the default issuer of this request. Can
                be the value default, a name, or an issuer ID. Use ACLs to prevent access to
                the /pki/issuer/:issuer_ref/{issue,sign}/:name paths to prevent users
                overriding the role's issuer_ref value.
            issuing_ca: '- The issuing CA'
            min_seconds_remaining: '- (Optional) Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)'
            name: '- (Required) Name of the role to create the certificate against'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            other_sans: '- (Optional) List of other SANs'
            renew_pending: '- true if the current time (during refresh) is after the start of the early renewal window declared by min_seconds_remaining, and false otherwise; if auto_renew is set to true then the provider will plan to replace the certificate once renewal is pending.'
            serial: '- Use serial_number instead.'
            serial_number: '- The certificate''s serial number, hex formatted.'
            ttl: '- (Optional) Time to live'
            uri_sans: '- (Optional) List of alternative URIs'
        importStatements: []
    vault_policy:
        subCategory: ""
        description: Writes arbitrary policies for Vault
        name: vault_policy
        title: vault_policy resource
        examples:
            - name: example
              manifest: |-
                {
                  "name": "dev-team",
                  "policy": "path \"secret/my_app\" {\n  capabilities = [\"update\"]\n}\n"
                }
        argumentDocs:
            name: '- (Required) The name of the policy'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policy: '- (Required) String containing a Vault policy'
        importStatements: []
    vault_quota_lease_count:
        subCategory: ""
        description: Manage Lease Count Quota
        name: vault_quota_lease_count
        title: vault_quota_lease_count resource
        examples:
            - name: global
              manifest: |-
                {
                  "max_leases": 100,
                  "name": "global",
                  "path": ""
                }
        argumentDocs:
            max_leases: |-
                - (Required) The maximum number of leases to be allowed by the quota
                rule. The max_leases must be positive.
            name: '- (Required) Name of the rate limit quota'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Optional) Path of the mount or namespace to apply the quota. A blank path configures a
                global rate limit quota. For example namespace1/ adds a quota to a full namespace,
                namespace1/auth/userpass adds a quota to userpass in namespace1.
                Updating this field on an existing quota can have "moving" effects. For example, updating
                auth/userpass to namespace1/auth/userpass moves this quota from being a global mount quota to
                a namespace specific mount quota. Note, namespaces are supported in Enterprise only.
            role: '- (Optional) If set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.'
        importStatements: []
    vault_quota_rate_limit:
        subCategory: ""
        description: Manage Rate Limit Quota
        name: vault_quota_rate_limit
        title: vault_quota_rate_limit resource
        examples:
            - name: global
              manifest: |-
                {
                  "name": "global",
                  "path": "",
                  "rate": 100
                }
        argumentDocs:
            block_interval: |-
                - (Optional) If set, when a client reaches a rate limit threshold, the client will
                be prohibited from any further requests until after the 'block_interval' in seconds has elapsed.
            interval: '- (Optional) The duration in seconds to enforce rate limiting for.'
            name: '- (Required) Name of the rate limit quota'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Optional) Path of the mount or namespace to apply the quota. A blank path configures a
                global rate limit quota. For example namespace1/ adds a quota to a full namespace,
                namespace1/auth/userpass adds a quota to userpass in namespace1.
                Updating this field on an existing quota can have "moving" effects. For example, updating
                auth/userpass to namespace1/auth/userpass moves this quota from being a global mount quota to
                a namespace specific mount quota. Note, namespaces are supported in Enterprise only.
            rate: |-
                - (Required) The maximum number of requests at any given second to be allowed by the quota
                rule. The rate must be positive.
            role: '- (Optional) If set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.'
        importStatements: []
    vault_rabbitmq_secret_backend:
        subCategory: ""
        description: Creates an RabbitMQ secret backend for Vault.
        name: vault_rabbitmq_secret_backend
        title: vault_rabbitmq_secret_backend resource
        examples:
            - name: rabbitmq
              manifest: |-
                {
                  "connection_uri": "https://.....",
                  "password": "password",
                  "username": "user"
                }
        argumentDocs:
            connection_uri: '- (Required)  Specifies the RabbitMQ connection URI.'
            default_lease_ttl_seconds: |-
                - (Optional) The default TTL for credentials
                issued by this backend.
            description: '- (Optional) A human-friendly description for this backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            max_lease_ttl_seconds: |-
                - (Optional) The maximum TTL that can be requested
                for credentials issued by this backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            password: '- (Required) Specifies the RabbitMQ management administrator password.'
            password_policy: '- (Optional) Specifies a password policy to use when creating dynamic credentials. Defaults to generating an alphanumeric password if not set.'
            path: |-
                - (Optional) The unique path this backend should be mounted at. Must
                not begin or end with a /. Defaults to rabbitmq.
            username: '- (Required) Specifies the RabbitMQ management administrator username.'
            username_template: '- (Optional) Template describing how dynamic usernames are generated.'
            verify_connection: |-
                - (Optional) Specifies whether to verify connection URI, username, and password.
                Defaults to true.
        importStatements: []
    vault_rabbitmq_secret_backend_role:
        subCategory: ""
        description: Creates a role on an RabbitMQ Secret Backend for Vault.
        name: vault_rabbitmq_secret_backend_role
        title: vault_rabbitmq_secret_backend_role resource
        examples:
            - name: role
              manifest: |-
                {
                  "backend": "${vault_rabbitmq_secret_backend.rabbitmq.path}",
                  "name": "deploy",
                  "tags": "tag1,tag2",
                  "vhost": [
                    {
                      "configure": "",
                      "host": "/",
                      "read": ".*",
                      "write": ""
                    }
                  ],
                  "vhost_topic": [
                    {
                      "host": "/",
                      "vhost": [
                        {
                          "read": ".*",
                          "topic": "amq.topic",
                          "write": ""
                        }
                      ]
                    }
                  ]
                }
              references:
                backend: vault_rabbitmq_secret_backend.rabbitmq.path
              dependencies:
                vault_rabbitmq_secret_backend.rabbitmq: |-
                    {
                      "connection_uri": "https://.....",
                      "password": "password",
                      "username": "user"
                    }
        argumentDocs:
            backend: |-
                - (Required) The path the RabbitMQ secret backend is mounted at,
                with no leading or trailing /s.
            name: |-
                - (Required) The name to identify this role within the backend.
                Must be unique within the backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            tags: '- (Optional) Specifies a comma-separated RabbitMQ management tags.'
            vhost: '- (Optional) Specifies a map of virtual hosts to permissions.'
            vhost_topic: '- (Optional) Specifies a map of virtual hosts and exchanges to topic permissions. This option requires RabbitMQ 3.7.0 or later.'
        importStatements: []
    vault_raft_autopilot:
        subCategory: ""
        description: Configures Raft's Autopilot capabilities.
        name: vault_raft_autopilot
        title: vault_raft_autopilot resource
        examples:
            - name: autopilot
              manifest: |-
                {
                  "cleanup_dead_servers": true,
                  "dead_server_last_contact_threshold": "24h0m0s",
                  "last_contact_threshold": "10s",
                  "max_trailing_logs": 1000,
                  "min_quorum": 3,
                  "server_stabilization_time": "10s"
                }
        argumentDocs:
            cleanup_dead_servers: |-
                – (Optional) Specifies whether to remove dead server nodes
                periodically or when a new server joins. This requires that min-quorum is also set.
            dead_server_last_contact_threshold: |-
                - (Optional) Limit the amount of time a
                server can go without leader contact before being considered failed. This only takes
                effect when cleanup_dead_servers is set.
            disable_upgrade_migration: – (Optional) Disables automatically upgrading Vault using autopilot. (Enterprise-only)
            last_contact_threshold: |-
                - (Optional) Limit the amount of time a server can go
                without leader contact before being considered unhealthy.
            max_trailing_logs: |-
                - (Optional) Maximum number of log entries in the Raft log
                that a server can be behind its leader before being considered unhealthy.
            min_quorum: |-
                - (Optional) Minimum number of servers allowed in a cluster before
                autopilot can prune dead servers. This should at least be 3. Applicable only for
                voting nodes.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            server_stabilization_time: |-
                - (Optional) Minimum amount of time a server must be
                stable in the 'healthy' state before being added to the cluster.
        importStatements: []
    vault_raft_snapshot_agent_config:
        subCategory: ""
        description: Creates a Raft Snapshot Agent Configuration for Vault.
        name: vault_raft_snapshot_agent_config
        title: vault_raft_snapshot_agent_config resource
        examples:
            - name: local_backups
              manifest: |-
                {
                  "interval_seconds": 86400,
                  "local_max_space": 10000000,
                  "name": "local",
                  "path_prefix": "/opt/vault/snapshots/",
                  "retain": 7,
                  "storage_type": "local"
                }
            - name: s3_backups
              manifest: |-
                {
                  "aws_access_key_id": "${var.aws_access_key_id}",
                  "aws_s3_bucket": "my-bucket",
                  "aws_s3_enable_kms": true,
                  "aws_s3_region": "${data.aws_region.current.name}",
                  "aws_secret_access_key": "${var.aws_secret_access_key}",
                  "interval_seconds": 86400,
                  "name": "s3",
                  "path_prefix": "/path/in/bucket",
                  "retain": 7,
                  "storage_type": "aws-s3"
                }
              references:
                aws_access_key_id: var.aws_access_key_id
                aws_s3_region: data.aws_region.current.name
                aws_secret_access_key: var.aws_secret_access_key
            - name: azure_backups
              manifest: |-
                {
                  "azure_account_key": "${var.azure_account_key}",
                  "azure_account_name": "${var.azure_account_name}",
                  "azure_container_name": "vault-blob",
                  "interval_seconds": 86400,
                  "name": "azure_backup",
                  "path_prefix": "/",
                  "retain": 7,
                  "storage_type": "azure-blob"
                }
              references:
                azure_account_key: var.azure_account_key
                azure_account_name: var.azure_account_name
        argumentDocs:
            aws_access_key_id: '- AWS access key ID.'
            aws_s3_bucket: <required> - S3 bucket to write snapshots to.
            aws_s3_disable_tls: |-
                - Disable TLS for the S3 endpoint. This
                should only be used for testing purposes, typically in conjunction with
                aws_s3_endpoint.
            aws_s3_enable_kms: '- Use KMS to encrypt bucket contents.'
            aws_s3_endpoint: |-
                - AWS endpoint. This is typically only set when
                using a non-AWS S3 implementation like Minio.
            aws_s3_force_path_style: |-
                - Use the endpoint/bucket URL style
                instead of bucket.endpoint. May be needed when setting aws_s3_endpoint.
            aws_s3_kms_key: '- Use named KMS key, when aws_s3_enable_kms = true'
            aws_s3_region: <required> - AWS region bucket is in.
            aws_s3_server_side_encryption: '- Use AES256 to encrypt bucket contents.'
            aws_secret_access_key: '- AWS secret access key.'
            aws_session_token: '- AWS session token.'
            azure_account_key: '- Azure account key.'
            azure_account_name: '- Azure account name.'
            azure_blob_environment: '- Azure blob environment.'
            azure_container_name: |-
                <required> - Azure container name to write
                snapshots to.
            azure_endpoint: |-
                - Azure blob storage endpoint. This is typically
                only set when using a non-Azure implementation like Azurite.
            file_prefix: |-
                - Within the directory or bucket
                prefix given by path_prefix, the file or object name of snapshot files
                will start with this string.
            google_disable_tls: |-
                - Disable TLS for the GCS endpoint. This
                should only be used for testing purposes, typically in conjunction with
                google_endpoint.
            google_endpoint: |-
                - GCS endpoint. This is typically only set when
                using a non-Google GCS implementation like fake-gcs-server.
            google_gcs_bucket: <required> - GCS bucket to write snapshots to.
            google_service_account_key: |-
                - Google service account key in JSON format.
                The raw value looks like this:
            interval_seconds: <required> - Time (in seconds) between snapshots.
            local_max_space: |-
                - For storage_type = local, the maximum
                space, in bytes, to use for snapshots. Snapshot attempts will fail if there is not enough
                space left in this allowance.
            name: <required> – Name of the configuration to modify.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path_prefix: |-
                <required> - For storage_type = "local", the directory to
                write the snapshots in. For cloud storage types, the bucket prefix to use.
                Types azure-s3 and google-gcs require a trailing / (slash).
                Types local and aws-s3 the trailing / is optional.
            retain: |-
                - How many snapshots are to be kept; when writing a
                snapshot, if there are more snapshots already stored than this number, the
                oldest ones will be deleted.
            storage_type: |-
                <required> - One of "local", "azure-blob", "aws-s3",
                or "google-gcs". The remaining parameters described below are all specific to
                the selected storage_type and prefixed accordingly.
        importStatements: []
    vault_rgp_policy:
        subCategory: ""
        description: Writes Sentinel role governing policies for Vault
        name: vault_rgp_policy
        title: vault_rgp_policy resource
        examples:
            - name: allow-all
              manifest: |-
                {
                  "enforcement_level": "soft-mandatory",
                  "name": "allow-all",
                  "policy": "main = rule {\n  true\n}\n"
                }
        argumentDocs:
            enforcement_level: '- (Required) Enforcement level of Sentinel policy. Can be either advisory or soft-mandatory or hard-mandatory'
            name: '- (Required) The name of the policy'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            policy: '- (Required) String containing a Sentinel policy'
        importStatements: []
    vault_saml_auth_backend:
        subCategory: ""
        description: Manages SAML Auth mounts in Vault.
        name: vault_saml_auth_backend
        title: vault_saml_auth_backend resource
        examples:
            - name: test
              manifest: |-
                {
                  "acs_urls": [
                    "https://my.vault.primary/v1/auth/saml/callback"
                  ],
                  "default_role": "admin",
                  "entity_id": "https://my.vault/v1/auth/saml",
                  "idp_metadata_url": "https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml/metadata",
                  "path": "saml"
                }
        argumentDocs:
            acs_urls: |-
                - (Optional) The well-formatted URLs of your Assertion Consumer Service (ACS)
                that should receive a response from the identity provider.
            default_role: '- (Optional) The role to use if no role is provided during login.'
            disable_remount: |-
                - (Optional) If set to true, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            entity_id: '- (Optional) The entity ID of the SAML authentication service provider.'
            idp_cert: |-
                (Optional) The PEM encoded certificate of the identity provider. Mutually exclusive
                with idp_metadata_url.
            idp_entity_id: |-
                (Optional) The entity ID of the identity provider. Mutually exclusive with
                idp_metadata_url.
            idp_metadata_url: '- (Optional) The metadata URL of the identity provider.'
            idp_sso_url: |-
                (Optional) The SSO URL of the identity provider. Mutually exclusive with
                idp_metadata_url.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: |-
                - (Optional) Path where the auth backend will be mounted. Defaults to auth/saml
                if not specified.
            verbose_logging: |-
                - (Optional) If set to true, logs additional, potentially sensitive
                information during the SAML exchange according to the current logging level. Not
                recommended for production.
        importStatements: []
    vault_saml_auth_backend_role:
        subCategory: ""
        description: Manages SAML auth backend roles in Vault.
        name: vault_saml_auth_backend_role
        title: vault_saml_auth_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "bound_attributes": {
                    "group": "admin"
                  },
                  "bound_subjects": [
                    "*example.com"
                  ],
                  "groups_attribute": "groups",
                  "name": "my-role",
                  "path": "${vault_saml_auth_backend.example.path}",
                  "token_policies": [
                    "writer"
                  ],
                  "token_ttl": 86400
                }
              references:
                path: vault_saml_auth_backend.example.path
              dependencies:
                vault_saml_auth_backend.example: |-
                    {
                      "acs_urls": [
                        "https://my.vault.primary/v1/auth/saml/callback"
                      ],
                      "default_role": "default-role",
                      "entity_id": "https://my.vault/v1/auth/saml",
                      "idp_metadata_url": "https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml/metadata",
                      "path": "saml"
                    }
        argumentDocs:
            bound_attributes: |-
                - (Optional) Mapping of attribute names to values that are expected to
                exist in the SAML assertion.
            bound_attributes_type: |-
                - (Optional) The type of matching assertion to perform on
                bound_attributes_type.
            bound_subjects: '- (Optional) List of subjects being asserted for SAML authentication.'
            bound_subjects_type: '- (Optional) The type of matching assertion to perform on bound_subjects.'
            groups_attribute: |-
                - (Optional) The attribute to use to identify the set of groups to which the
                user belongs.
            name: '- (Required) Unique name of the role.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) Path where the auth backend is mounted.'
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_policies: |-
                - (Optional) List of policies to encode onto generated tokens. Depending
                on the auth method, this list may be supplemented by user/group/other values.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_secrets_sync_association:
        subCategory: ""
        description: Triggers a sync operation in Vault and links a secret to an existing destination
        name: vault_secrets_sync_association
        title: vault_secrets_sync_association resource
        examples:
            - name: gh_token
              manifest: |-
                {
                  "mount": "${vault_mount.kvv2.path}",
                  "name": "${vault_secrets_sync_gh_destination.gh.name}",
                  "secret_name": "${vault_kv_secret_v2.token.name}",
                  "type": "${vault_secrets_sync_gh_destination.gh.type}"
                }
              references:
                mount: vault_mount.kvv2.path
                name: vault_secrets_sync_gh_destination.gh.name
                secret_name: vault_kv_secret_v2.token.name
                type: vault_secrets_sync_gh_destination.gh.type
              dependencies:
                vault_kv_secret_v2.token: |-
                    {
                      "data_json": "${jsonencode(\n    {\n      dev  = \"B!gS3cr3t\",\n      prod = \"S3cureP4$$\"\n    }\n  )}",
                      "mount": "${vault_mount.kvv2.path}",
                      "name": "token"
                    }
                vault_mount.kvv2: |-
                    {
                      "description": "KV Version 2 secret engine mount",
                      "options": {
                        "version": "2"
                      },
                      "path": "kvv2",
                      "type": "kv"
                    }
                vault_secrets_sync_gh_destination.gh: |-
                    {
                      "access_token": "${var.access_token}",
                      "name": "gh-dest",
                      "repository_name": "repo-name-example",
                      "repository_owner": "${var.repo_owner}",
                      "secret_name_template": "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"
                    }
        argumentDocs:
            mount: '- (Required) Specifies the mount where the secret is located.'
            name: '- (Required) Specifies the name of the destination.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
            secret_name: '- (Required) Specifies the name of the secret to synchronize.'
            sync_status: '- Specifies the status of the association (for eg. SYNCED).'
            type: '- (Required) Specifies the destination type.'
            updated_at: '- Duration string specifying when the secret was last updated.'
        importStatements: []
    vault_secrets_sync_aws_destination:
        subCategory: ""
        description: Creates an AWS destination to synchronize secrets in Vault
        name: vault_secrets_sync_aws_destination
        title: vault_secrets_sync_aws_destination resource
        examples:
            - name: aws
              manifest: |-
                {
                  "access_key_id": "${var.access_key_id}",
                  "custom_tags": {
                    "foo": "bar"
                  },
                  "name": "aws-dest",
                  "region": "us-east-1",
                  "secret_access_key": "${var.secret_access_key}",
                  "secret_name_template": "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"
                }
              references:
                access_key_id: var.access_key_id
                secret_access_key: var.secret_access_key
        argumentDocs:
            access_key_id: |-
                - (Optional) Access key id to authenticate against the AWS secrets manager.
                Can be omitted and directly provided to Vault using the AWS_ACCESS_KEY_ID environment
                variable.
            custom_tags: '- (Optional) Custom tags to set on the secret managed at the destination.'
            name: '- (Required) Unique name of the AWS destination.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
            region: |-
                - (Optional) Region where to manage the secrets manager entries.
                Can be omitted and directly provided to Vault using the AWS_REGION environment
                variable.
            secret_access_key: |-
                - (Optional) Secret access key to authenticate against the AWS secrets manager.
                Can be omitted and directly provided to Vault using the AWS_SECRET_ACCESS_KEY environment
                variable.
            secret_name_template: |-
                - (Optional) Template describing how to generate external secret names.
                Supports a subset of the Go Template syntax.
            type: '- The type of the secrets destination (aws-sm).'
        importStatements: []
    vault_secrets_sync_azure_destination:
        subCategory: ""
        description: Creates a Azure destination to synchronize secrets in Vault
        name: vault_secrets_sync_azure_destination
        title: vault_secrets_sync_azure_destination resource
        examples:
            - name: az
              manifest: |-
                {
                  "client_id": "${var.client_id}",
                  "client_secret": "${var.client_secret}",
                  "custom_tags": {
                    "foo": "bar"
                  },
                  "key_vault_uri": "${var.key_vault_uri}",
                  "name": "az-dest",
                  "secret_name_template": "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}",
                  "tenant_id": "${var.tenant_id}"
                }
              references:
                client_id: var.client_id
                client_secret: var.client_secret
                key_vault_uri: var.key_vault_uri
                tenant_id: var.tenant_id
        argumentDocs:
            client_id: |-
                - (Optional) Client ID of an Azure app registration.
                Can be omitted and directly provided to Vault using the AZURE_CLIENT_ID environment
                variable.
            client_secret: |-
                - (Optional) Client Secret of an Azure app registration.
                Can be omitted and directly provided to Vault using the AZURE_CLIENT_SECRET environment
                variable.
            cloud: '- (Optional) Specifies a cloud for the client. The default is Azure Public Cloud.'
            custom_tags: '- (Optional) Custom tags to set on the secret managed at the destination.'
            key_vault_uri: |-
                - (Optional) URI of an existing Azure Key Vault instance.
                Can be omitted and directly provided to Vault using the KEY_VAULT_URI environment
                variable.
            name: '- (Required) Unique name of the Azure destination.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
            secret_name_template: |-
                - (Optional) Template describing how to generate external secret names.
                Supports a subset of the Go Template syntax.
            tenant_id: |-
                - (Optional) ID of the target Azure tenant.
                Can be omitted and directly provided to Vault using the AZURE_TENANT_ID environment
                variable.
            type: '- The type of the secrets destination (azure-kv).'
        importStatements: []
    vault_secrets_sync_config:
        subCategory: ""
        description: Configures the secret sync global config.
        name: vault_secrets_sync_config
        title: vault_secrets_sync_config resource
        examples:
            - name: global_config
              manifest: |-
                {
                  "disabled": true,
                  "queue_capacity": 500000
                }
        argumentDocs:
            disabled: '- (Optional) Disables the syncing process between Vault and external destinations. Defaults to false.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                This resource can only be configured in the root namespace.
                Available only for Vault Enterprise.
            queue_capacity: '- (Optional) Maximum number of pending sync operations allowed on the queue. Defaults to 1000000.'
        importStatements: []
    vault_secrets_sync_gcp_destination:
        subCategory: ""
        description: Creates a GCP destination to synchronize secrets in Vault
        name: vault_secrets_sync_gcp_destination
        title: vault_secrets_sync_gcp_destination resource
        examples:
            - name: gcp
              manifest: |-
                {
                  "credentials": "${file(var.credentials_file)}",
                  "custom_tags": {
                    "foo": "bar"
                  },
                  "name": "gcp-dest",
                  "secret_name_template": "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"
                }
        argumentDocs:
            credentials: |-
                - (Optional) JSON-encoded credentials to use to connect to GCP.
                Can be omitted and directly provided to Vault using the GOOGLE_APPLICATION_CREDENTIALS environment
                variable.
            custom_tags: '- (Optional) Custom tags to set on the secret managed at the destination.'
            name: '- (Required) Unique name of the GCP destination.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
            secret_name_template: |-
                - (Optional) Template describing how to generate external secret names.
                Supports a subset of the Go Template syntax.
            type: '- The type of the secrets destination (gcp-sm).'
        importStatements: []
    vault_secrets_sync_gh_destination:
        subCategory: ""
        description: Creates a GitHub destination to synchronize secrets in Vault
        name: vault_secrets_sync_gh_destination
        title: vault_secrets_sync_gh_destination resource
        examples:
            - name: gh
              manifest: |-
                {
                  "access_token": "${var.access_token}",
                  "name": "gh-dest",
                  "repository_name": "repo-name-example",
                  "repository_owner": "${var.repo_owner}",
                  "secret_name_template": "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"
                }
              references:
                access_token: var.access_token
                repository_owner: var.repo_owner
        argumentDocs:
            access_token: |-
                - (Optional) Fine-grained or personal access token.
                Can be omitted and directly provided to Vault using the GITHUB_ACCESS_TOKEN environment
                variable.
            name: '- (Required) Unique name of the GitHub destination.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
            repository_name: |-
                - (Optional) Name of the repository.
                Can be omitted and directly provided to Vault using the GITHUB_REPOSITORY_NAME environment
                variable.
            repository_owner: |-
                - (Optional) GitHub organization or username that owns the repository.
                Can be omitted and directly provided to Vault using the GITHUB_REPOSITORY_OWNER environment
                variable.
            secret_name_template: |-
                - (Optional) Template describing how to generate external secret names.
                Supports a subset of the Go Template syntax.
            type: '- The type of the secrets destination (gh).'
        importStatements: []
    vault_secrets_sync_vercel_destination:
        subCategory: ""
        description: Creates a GitHub destination to synchronize secrets in Vault
        name: vault_secrets_sync_vercel_destination
        title: vault_secrets_sync_vercel_destination resource
        examples:
            - name: vercel
              manifest: |-
                {
                  "access_token": "${var.access_token}",
                  "deployment_environments": [
                    "development",
                    "preview",
                    "production"
                  ],
                  "name": "vercel-dest",
                  "project_id": "${var.project_id}",
                  "secret_name_template": "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"
                }
              references:
                access_token: var.access_token
                project_id: var.project_id
        argumentDocs:
            access_token: |-
                - (Required) Vercel API access token with the permissions to manage environment
                variables.
            deployment_environments: |-
                - (Required) Deployment environments where the environment variables
                are available. Accepts development, preview and production.
            name: '- (Required) Unique name of the GitHub destination.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
            project_id: '- (Required) Project ID where to manage environment variables.'
            secret_name_template: |-
                - (Optional) Template describing how to generate external secret names.
                Supports a subset of the Go Template syntax.
            team_id: '- (Optional) Team ID where to manage environment variables.'
            type: '- The type of the secrets destination (vercel-project).'
        importStatements: []
    vault_ssh_secret_backend_ca:
        subCategory: ""
        description: Managing CA information in an SSH secret backend in Vault
        name: vault_ssh_secret_backend_ca
        title: vault_ssh_secret_backend_ca resource
        examples:
            - name: foo
              manifest: |-
                {
                  "backend": "${vault_mount.example.path}"
                }
              references:
                backend: vault_mount.example.path
              dependencies:
                vault_mount.example: |-
                    {
                      "type": "ssh"
                    }
        argumentDocs:
            backend: '- (Optional) The path where the SSH secret backend is mounted. Defaults to ''ssh'''
            generate_signing_key: '- (Optional) Whether Vault should generate the signing key pair internally. Defaults to true'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            private_key: '- (Optional) The private key part the SSH CA key pair; required if generate_signing_key is false.'
            public_key: '- (Optional) The public key part the SSH CA key pair; required if generate_signing_key is false.'
        importStatements: []
    vault_ssh_secret_backend_role:
        subCategory: ""
        description: Managing roles in an SSH secret backend in Vault
        name: vault_ssh_secret_backend_role
        title: vault_ssh_secret_backend_role resource
        examples:
            - name: foo
              manifest: |-
                {
                  "allow_user_certificates": true,
                  "backend": "${vault_mount.example.path}",
                  "key_type": "ca",
                  "name": "my-role"
                }
              references:
                backend: vault_mount.example.path
              dependencies:
                vault_mount.example: |-
                    {
                      "type": "ssh"
                    }
            - name: bar
              manifest: |-
                {
                  "allowed_users": "default,baz",
                  "backend": "${vault_mount.example.path}",
                  "cidr_list": "0.0.0.0/0",
                  "default_user": "default",
                  "key_type": "otp",
                  "name": "otp-role"
                }
              references:
                backend: vault_mount.example.path
              dependencies:
                vault_mount.example: |-
                    {
                      "type": "ssh"
                    }
        argumentDocs:
            algorithm_signer: '- (Optional) When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.'
            allow_bare_domains: '- (Optional) Specifies if host certificates that are requested are allowed to use the base domains listed in allowed_domains.'
            allow_host_certificates: '- (Optional) Specifies if certificates are allowed to be signed for use as a ''host''.'
            allow_subdomains: '- (Optional) Specifies if host certificates that are requested are allowed to be subdomains of those listed in allowed_domains.'
            allow_user_certificates: '- (Optional) Specifies if certificates are allowed to be signed for use as a ''user''.'
            allow_user_key_ids: '- (Optional) Specifies if users can override the key ID for a signed certificate with the key_id field.'
            allowed_critical_options: '- (Optional) Specifies a comma-separated list of critical options that certificates can have when signed.'
            allowed_domains: '- (Optional) The list of domains for which a client can request a host certificate.'
            allowed_domains_template: |-
                - (Optional) Specifies if allowed_domains can be declared using
                identity template policies. Non-templated domains are also permitted.
            allowed_extensions: '- (Optional) Specifies a comma-separated list of extensions that certificates can have when signed.'
            allowed_user_key_config: |-
                - (Optional) Set of configuration blocks to define allowed
                user key configuration, like key type and their lengths. Can be specified multiple times.
                See
            allowed_user_key_lengths: |-
                - (Optional) Specifies a map of ssh key types and their expected sizes which
                are allowed to be signed by the CA type.
                Deprecated: use allowed_user_key_config instead
            allowed_users: '- (Optional) Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.'
            allowed_users_template: '- (Optional) Specifies if allowed_users can be declared using identity template policies. Non-templated users are also permitted.'
            backend: '- (Required) The path where the SSH secret backend is mounted.'
            cidr_list: '- (Optional) The comma-separated string of CIDR blocks for which this role is applicable.'
            default_critical_options: '- (Optional) Specifies a map of critical options that certificates have when signed.'
            default_extensions: '- (Optional) Specifies a map of extensions that certificates have when signed.'
            default_user: '- (Optional) Specifies the default username for which a credential will be generated.'
            default_user_template: '- (Optional) If set, default_users can be specified using identity template values. A non-templated user is also permitted.'
            key_id_format: '- (Optional) Specifies a custom format for the key id of a signed certificate.'
            key_type: '- (Required)  Specifies the type of credentials generated by this role. This can be either otp, dynamic or ca.'
            lengths: |-
                - (Required) A list of allowed key lengths as integers.
                For key types that do not support setting the length a value of [0] should be used.
                Setting multiple lengths is only supported on Vault 1.10+. For prior releases length
                must be set to a single element list.
            max_ttl: '- (Optional) Specifies the maximum Time To Live value.'
            name: '- (Required) Specifies the name of the role to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            not_before_duration: |-
                - (Optional) Specifies the duration by which to backdate the ValidAfter property.
                Uses duration format strings.
            ttl: '- (Optional) Specifies the Time To Live value.'
            type: |-
                - (Required) The SSH public key type.
                Supported key types are:
                rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519,
                ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
        importStatements: []
    vault_terraform_cloud_secret_backend:
        subCategory: ""
        description: Creates a Terraform Cloud secret backend for Vault.
        name: vault_terraform_cloud_secret_backend
        title: vault_terraform_cloud_secret_backend resource
        examples:
            - name: test
              manifest: |-
                {
                  "backend": "terraform",
                  "description": "Manages the Terraform Cloud backend",
                  "token": "V0idfhi2iksSDU234ucdbi2nidsi..."
                }
        argumentDocs:
            backend: '- (Optional) The unique location this backend should be mounted at. Must not begin or end with a /. Defaults to terraform.'
            default_lease_ttl_seconds: '- (Optional) The default TTL for credentials issued by this backend.'
            description: '- (Optional) A human-friendly description for this backend.'
            disable_remount: |-
                - (Optional) If set, opts out of mount migration on path updates.
                See here for more info on Mount Migration
            max_lease_ttl_seconds: |-
                - (Optional) The maximum TTL that can be requested
                for credentials issued by this backend.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            token: |-
                - (Required) The Terraform Cloud management token this backend should
                use to issue new tokens.
        importStatements: []
    vault_terraform_cloud_secret_creds:
        subCategory: ""
        description: Generates tokens for Terraform Cloud.
        name: vault_terraform_cloud_secret_creds
        title: vault_terraform_cloud_secret_creds resource
        examples:
            - name: token
              manifest: |-
                {
                  "backend": "${vault_terraform_cloud_secret_backend.test.backend}",
                  "role": "${vault_terraform_cloud_secret_role.example.name}"
                }
              references:
                backend: vault_terraform_cloud_secret_backend.test.backend
                role: vault_terraform_cloud_secret_role.example.name
              dependencies:
                vault_terraform_cloud_secret_backend.test: |-
                    {
                      "backend": "terraform",
                      "description": "Manages the Terraform Cloud backend",
                      "token": "V0idfhi2iksSDU234ucdbi2nidsi..."
                    }
                vault_terraform_cloud_secret_role.example: |-
                    {
                      "backend": "${vault_terraform_cloud_secret_backend.test.backend}",
                      "name": "test-role",
                      "organization": "example-organization-name",
                      "team_id": "team-ieF4isC..."
                    }
        argumentDocs:
            backend: |-
                - (Required) The path to the Terraform Cloud secret backend to
                read credentials from, with no leading or trailing /s.
            lease_id: |-
                - The lease associated with the token. Only user tokens will have a
                Vault lease associated with them.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization: '- The organization associated with the token provided.'
            role: |-
                - (Required) The name of the Terraform Cloud secret backend role to generate
                a token for, with no leading or trailing /s.
            team_id: '- The team id associated with the token provided.'
            token: |-
                - The actual token that was generated and can be used with API calls
                to identify the user of the call.
            token_id: |-
                - The public identifier for a specific token. It can be used
                to look up information about a token or to revoke a token.
        importStatements: []
    vault_terraform_cloud_secret_role:
        subCategory: ""
        description: Manages a Terraform Cloud secrets role for a Terraform Cloud secrets engine in Vault.
        name: vault_terraform_cloud_secret_role
        title: vault_terraform_cloud_secret_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "backend": "${vault_terraform_cloud_secret_backend.test.backend}",
                  "name": "test-role",
                  "organization": "example-organization-name",
                  "team_id": "team-ieF4isC..."
                }
              references:
                backend: vault_terraform_cloud_secret_backend.test.backend
              dependencies:
                vault_terraform_cloud_secret_backend.test: |-
                    {
                      "backend": "terraform",
                      "description": "Manages the Terraform Cloud backend",
                      "token": "V0idfhi2iksSDU234ucdbi2nidsi..."
                    }
        argumentDocs:
            backend: '- (Optional) The unique name of an existing Terraform Cloud secrets backend mount. Must not begin or end with a /.'
            max_ttl: '- (Optional) Maximum TTL for leases associated with this role, in seconds.'
            name: '- (Required) The name of the Terraform Cloud secrets engine role to create.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            organization: '- (Optional) The organization name managing your Terraform Cloud instance.'
            team_id: '- (Optional) The id of the team you wish to create a token for in your Terraform Cloud instance.'
            ttl: '- (Optional) Specifies the TTL for this role.'
            user_id: '- (Optional) The user id you wish to create a token for in your Terraform Cloud instance. (Note: this value can not be provided in conjunction with team_id and/or organization)'
        importStatements: []
    vault_token:
        subCategory: ""
        description: Writes token for Vault
        name: vault_token
        title: vault_token resource
        examples:
            - name: example
              manifest: |-
                {
                  "metadata": {
                    "purpose": "service-account"
                  },
                  "policies": [
                    "policy1",
                    "policy2"
                  ],
                  "renew_increment": 86400,
                  "renew_min_lease": 43200,
                  "renewable": true,
                  "role_name": "app",
                  "ttl": "24h"
                }
        argumentDocs:
            client_token: '- String containing the client token if stored in present file'
            display_name: '- (Optional) String containing the token display name'
            explicit_max_ttl: '- (Optional) The explicit max TTL of this token. This is specified as a numeric string with suffix like "30s" ro "5m"'
            lease_duration: '- String containing the token lease duration if present in state file'
            lease_started: '- String containing the token lease started time if present in state file'
            metadata: '- (Optional) Metadata to be set on this token'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            no_default_policy: '- (Optional) Flag to not attach the default policy to this token'
            no_parent: '- (Optional) Flag to create a token without parent'
            num_uses: '- (Optional) The number of allowed uses of this token'
            period: '- (Optional) The period of this token. This is specified as a numeric string with suffix like "30s" ro "5m"'
            policies: '- (Optional) List of policies to attach to this token'
            renew_increment: '- (Optional) The renew increment. This is specified in seconds'
            renew_min_lease: '- (Optional) The minimal lease to renew this token'
            renewable: '- (Optional) Flag to allow to renew this token'
            role_name: '- (Optional) The token role name'
            ttl: '- (Optional) The TTL period of this token. This is specified as a numeric string with suffix like "30s" ro "5m"'
        importStatements: []
    vault_token_auth_backend_role:
        subCategory: ""
        description: Manages Token auth backend roles in Vault.
        name: vault_token_auth_backend_role
        title: vault_token_auth_backend_role resource
        examples:
            - name: example
              manifest: |-
                {
                  "allowed_entity_aliases": [
                    "test_entity"
                  ],
                  "allowed_policies": [
                    "dev",
                    "test"
                  ],
                  "disallowed_policies": [
                    "default"
                  ],
                  "orphan": true,
                  "path_suffix": "path-suffix",
                  "renewable": true,
                  "role_name": "my-role",
                  "token_explicit_max_ttl": "115200",
                  "token_period": "86400"
                }
        argumentDocs:
            allowed_entity_aliases: (Optional) List of allowed entity aliases.
            allowed_policies: (Optional) List of allowed policies for given role.
            allowed_policies_glob: (Optional) Set of allowed policies with glob match for given role.
            disallowed_policies: (Optional) List of disallowed policies for given role.
            disallowed_policies_glob: (Optional) Set of disallowed policies with glob match for given role.
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            orphan: (Optional) If true, tokens created against this policy will be orphan tokens.
            path_suffix: (Optional) Tokens created against this role will have the given suffix as part of their path in addition to the role name.
            renewable: (Optional) Whether to disable the ability of the token to be renewed past its initial TTL.
            role_name: '- (Required) The name of the role.'
            token_bound_cidrs: |-
                - (Optional) List of CIDR blocks; if set, specifies blocks of IP
                addresses which can authenticate successfully, and ties the resulting token to these blocks
                as well.
            token_explicit_max_ttl: |-
                - (Optional) If set, will encode an
                explicit max TTL
                onto the token in number of seconds. This is a hard cap even if token_ttl and
                token_max_ttl would otherwise allow a renewal.
            token_max_ttl: |-
                - (Optional) The maximum lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_no_default_policy: |-
                - (Optional) If set, the default policy will not be set on
                generated tokens; otherwise it will be added to the policies set in token_policies.
            token_num_uses: |-
                - (Optional) The maximum number
                of times a generated token may be used (within its lifetime); 0 means unlimited.
            token_period: |-
                - (Optional) If set, indicates that the
                token generated using this role should never expire. The token should be renewed within the
                duration specified by this value. At each renewal, the token's TTL will be set to the
                value of this field. Specified in seconds.
            token_ttl: |-
                - (Optional) The incremental lifetime for generated tokens in number of seconds.
                Its current value will be referenced at renewal time.
            token_type: |-
                - (Optional) The type of token that should be generated. Can be service,
                batch, or default to use the mount's tuned default (which unless changed will be
                service tokens). For token store roles, there are two additional possibilities:
                default-service and default-batch which specify the type to return unless the client
                requests a different type at generation time.
        importStatements: []
    vault_transform_alphabet:
        subCategory: ""
        description: '"/transform/alphabet/{name}"'
        name: vault_transform_alphabet
        title: vault_transform_alphabet resource
        examples:
            - name: test
              manifest: |-
                {
                  "alphabet": "0123456789",
                  "name": "numerics",
                  "path": "${vault_mount.mount_transform.path}"
                }
              references:
                path: vault_mount.mount_transform.path
              dependencies:
                vault_mount.mount_transform: |-
                    {
                      "path": "transform",
                      "type": "transform"
                    }
        argumentDocs:
            alphabet: '- (Optional) A string of characters that contains the alphabet set.'
            name: '- (Required) The name of the alphabet.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) Path to where the back-end is mounted within Vault.'
        importStatements: []
    vault_transform_role:
        subCategory: ""
        description: '"/transform/role/{name}"'
        name: vault_transform_role
        title: vault_transform_role resource
        examples:
            - name: test
              manifest: |-
                {
                  "name": "payments",
                  "path": "${vault_mount.mount_transform.path}",
                  "transformations": [
                    "ccn-fpe"
                  ]
                }
              references:
                path: vault_mount.mount_transform.path
              dependencies:
                vault_mount.mount_transform: |-
                    {
                      "path": "transform",
                      "type": "transform"
                    }
        argumentDocs:
            name: '- (Required) The name of the role.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) Path to where the back-end is mounted within Vault.'
            transformations: '- (Optional) A comma separated string or slice of transformations to use.'
        importStatements: []
    vault_transform_template:
        subCategory: ""
        description: '"/transform/template/{name}"'
        name: vault_transform_template
        title: vault_transform_template resource
        examples:
            - name: test
              manifest: |-
                {
                  "alphabet": "numerics",
                  "decode_formats": {
                    "last-four-digits": "$4"
                  },
                  "encode_format": "$1-$2-$3-$4",
                  "name": "ccn",
                  "path": "${vault_transform_alphabet.numerics.path}",
                  "pattern": "(\\d{4})[- ](\\d{4})[- ](\\d{4})[- ](\\d{4})",
                  "type": "regex"
                }
              references:
                path: vault_transform_alphabet.numerics.path
              dependencies:
                vault_mount.transform: |-
                    {
                      "path": "transform",
                      "type": "transform"
                    }
                vault_transform_alphabet.numerics: |-
                    {
                      "alphabet": "0123456789",
                      "name": "numerics",
                      "path": "${vault_mount.transform.path}"
                    }
        argumentDocs:
            alphabet: '- (Optional) The alphabet to use for this template. This is only used during FPE transformations.'
            decode_formats: |-
                - (Optional) - Optional mapping of name to regular expression template, used to customize
                the decoded output. (requires Vault Enterprise 1.9+)
            encode_format: |-
                - (Optional) - The regular expression template used to format encoded values.
                (requires Vault Enterprise 1.9+)
            name: '- (Required) The name of the template.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) Path to where the back-end is mounted within Vault.'
            pattern: '- (Optional) The pattern used for matching. Currently, only regular expression pattern is supported.'
            type: '- (Optional) The pattern type to use for match detection. Currently, only regex is supported.'
        importStatements: []
    vault_transform_transformation:
        subCategory: ""
        description: '"/transform/transformation/{name}"'
        name: vault_transform_transformation
        title: vault_transform_transformation resource
        examples:
            - name: example
              manifest: |-
                {
                  "allowed_roles": [
                    "payments"
                  ],
                  "name": "ccn-fpe",
                  "path": "${vault_mount.example.path}",
                  "template": "ccn",
                  "tweak_source": "internal",
                  "type": "fpe"
                }
              references:
                path: vault_mount.example.path
              dependencies:
                vault_mount.example: |-
                    {
                      "path": "transform",
                      "type": "transform"
                    }
        argumentDocs:
            allowed_roles: '- (Optional) The set of roles allowed to perform this transformation.'
            deletion_allowed: |-
                - (Optional) If true, this transform can be deleted.
                Otherwise, deletion is blocked while this value remains false. Default: false
                Only supported on vault-1.12+
            masking_character: '- (Optional) The character used to replace data when in masking mode'
            name: '- (Required) The name of the transformation.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            path: '- (Required) Path to where the back-end is mounted within Vault.'
            template: '- (Optional) The name of the template to use.'
            templates: '- (Optional) Templates configured for transformation.'
            tweak_source: '- (Optional) The source of where the tweak value comes from. Only valid when in FPE mode.'
            type: '- (Optional) The type of transformation to perform.'
        importStatements: []
    vault_transit_secret_backend_key:
        subCategory: ""
        description: Create an Encryption Keyring on a Transit Secret Backend for Vault.
        name: vault_transit_secret_backend_key
        title: vault_transit_secret_backend_key resource
        examples:
            - name: key
              manifest: |-
                {
                  "backend": "${vault_mount.transit.path}",
                  "name": "my_key"
                }
              references:
                backend: vault_mount.transit.path
              dependencies:
                vault_mount.transit: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "description": "Example description",
                      "max_lease_ttl_seconds": 86400,
                      "path": "transit",
                      "type": "transit"
                    }
        argumentDocs:
            aes128-gcm96: ', aes256-gcm96 and chacha20-poly1305, each key version will be a map of a single value id which is just a hash of the key''s metadata.'
            allow_plaintext_backup: '- (Optional) Enables taking backup of entire keyring in the plaintext format. Once set, this cannot be disabled.'
            auto_rotate_interval: '- Replaced by auto_rotate_period.'
            auto_rotate_period: |-
                - (Optional) Amount of seconds the key should live before being automatically rotated.
                A value of 0 disables automatic rotation for the key.
            backend: '- (Required) The path the transit secret backend is mounted at, with no leading or trailing /s.'
            convergent_encryption: '- (Optional) Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires derived to be set to true.'
            creation_time: '- ISO 8601 format timestamp indicating when the key version was created'
            deletion_allowed: '- (Optional) Specifies if the keyring is allowed to be deleted. Must be set to ''true'' before terraform will be able to destroy keys.'
            derived: '- (Optional) Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.'
            ed25519: ', ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072 and rsa-4096, each key version will be a map of the following:'
            exportable: '- (Optional) Enables keys to be exportable. This allows for all valid private keys in the keyring to be exported. Once set, this cannot be disabled.'
            key_size: '- (Optional) The key size in bytes for algorithms that allow variable key sizes. Currently only applicable to HMAC, where it must be between 32 and 512 bytes.'
            keys: '- List of key versions in the keyring. This attribute is zero-indexed and will contain a map of values depending on the type of the encryption key.'
            latest_version: '- Latest key version available. This value is 1-indexed, so if latest_version is 1, then the key''s information can be referenced from keys by selecting element 0'
            min_available_version: '- Minimum key version available for use. If keys have been archived by increasing min_decryption_version, this attribute will reflect that change.'
            min_decryption_version: '- (Optional) Minimum key version to use for decryption.'
            min_encryption_version: '- (Optional) Minimum key version to use for encryption'
            name: '- (Required) The name to identify this key within the backend. Must be unique within the backend.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            public_key: '- This is the base64-encoded public key for use outside of Vault.'
            supports_decryption: '- Whether or not the key supports decryption, based on key type.'
            supports_derivation: '- Whether or not the key supports derivation, based on key type.'
            supports_encryption: '- Whether or not the key supports encryption, based on key type.'
            supports_signing: '- Whether or not the key supports signing, based on key type.'
            type: '- (Optional) Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96 (default), chacha20-poly1305, ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, hmac, rsa-2048, rsa-3072 and rsa-4096.'
        importStatements: []
    vault_transit_secret_cache_config:
        subCategory: ""
        description: Configure the cache for the Transit Secret Backend in Vault.
        name: vault_transit_secret_cache_config
        title: vault_transit_secret_cache_config resource
        examples:
            - name: cfg
              manifest: |-
                {
                  "backend": "${vault_mount.transit.path}",
                  "size": 500
                }
              references:
                backend: vault_mount.transit.path
              dependencies:
                vault_mount.transit: |-
                    {
                      "default_lease_ttl_seconds": 3600,
                      "description": "Example description",
                      "max_lease_ttl_seconds": 86400,
                      "path": "transit",
                      "type": "transit"
                    }
        argumentDocs:
            backend: '- (Required) The path the transit secret backend is mounted at, with no leading or trailing /s.'
            namespace: |-
                - (Optional) The namespace to provision the resource in.
                The value should not contain leading or trailing forward slashes.
                The namespace is always relative to the provider's configured namespace.
                Available only for Vault Enterprise.
            size: '- (Required) The number of cache entries. 0 means unlimited.'
        importStatements: []
