---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.1
  name: secretbackends.aws.vault.upbound.io
spec:
  group: aws.vault.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - vault
    kind: SecretBackend
    listKind: SecretBackendList
    plural: secretbackends
    singular: secretbackend
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: SecretBackend is the Schema for the SecretBackends API. Creates
          an AWS secret backend for Vault.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SecretBackendSpec defines the desired state of SecretBackend
            properties:
              deletionPolicy:
                default: Delete
                description: 'DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource. This field is planned to be deprecated
                  in favor of the ManagementPolicies field in a future release. Currently,
                  both could be set independently and non-default values would be
                  honored if the feature flag is enabled. See the design doc for more
                  information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  accessKeySecretRef:
                    description: The AWS Access Key ID this backend should use to
                      issue new credentials. Vault uses the official AWS SDK to authenticate,
                      and thus can also use standard AWS environment credentials,
                      shared file credentials or IAM role/ECS task credentials. The
                      AWS Access Key ID to use when generating new credentials.
                    properties:
                      key:
                        description: The key to select.
                        type: string
                      name:
                        description: Name of the secret.
                        type: string
                      namespace:
                        description: Namespace of the secret.
                        type: string
                    required:
                    - key
                    - name
                    - namespace
                    type: object
                  defaultLeaseTtlSeconds:
                    description: The default TTL for credentials issued by this backend.
                      Default lease duration for secrets in seconds
                    type: number
                  description:
                    description: A human-friendly description for this backend. Human-friendly
                      description of the mount for the backend.
                    type: string
                  disableRemount:
                    description: If set, opts out of mount migration on path updates.
                      See here for more info on Mount Migration If set, opts out of
                      mount migration on path updates.
                    type: boolean
                  iamEndpoint:
                    description: Specifies a custom HTTP IAM endpoint to use. Specifies
                      a custom HTTP IAM endpoint to use.
                    type: string
                  identityTokenAudience:
                    description: The audience claim value. Requires Vault 1.16+. The
                      audience claim value.
                    type: string
                  identityTokenKey:
                    description: The key to use for signing identity tokens. Requires
                      Vault 1.16+. The key to use for signing identity tokens.
                    type: string
                  identityTokenTtl:
                    description: The TTL of generated identity tokens in seconds.
                      Requires Vault 1.16+. The TTL of generated identity tokens in
                      seconds.
                    type: number
                  local:
                    description: Specifies whether the secrets mount will be marked
                      as local. Local mounts are not replicated to performance replicas.
                      Specifies if the secret backend is local only
                    type: boolean
                  maxLeaseTtlSeconds:
                    description: The maximum TTL that can be requested for credentials
                      issued by this backend. Maximum possible lease duration for
                      secrets in seconds
                    type: number
                  namespace:
                    description: The namespace to provision the resource in. The value
                      should not contain leading or trailing forward slashes. The
                      namespace is always relative to the provider's configured namespace.
                      Available only for Vault Enterprise. Target namespace. (requires
                      Enterprise)
                    type: string
                  path:
                    description: The unique path this backend should be mounted at.
                      Must not begin or end with a /. Defaults to aws. Path to mount
                      the backend at.
                    type: string
                  region:
                    description: The AWS region for API calls. Defaults to us-east-1.
                      The AWS region to make API calls against. Defaults to us-east-1.
                    type: string
                  roleArn:
                    description: Role ARN to assume for plugin identity token federation.
                      Requires Vault 1.16+. Role ARN to assume for plugin identity
                      token federation.
                    type: string
                  secretKeySecretRef:
                    description: The AWS Secret Key this backend should use to issue
                      new credentials. Vault uses the official AWS SDK to authenticate,
                      and thus can also use standard AWS environment credentials,
                      shared file credentials or IAM role/ECS task credentials. The
                      AWS Secret Access Key to use when generating new credentials.
                    properties:
                      key:
                        description: The key to select.
                        type: string
                      name:
                        description: Name of the secret.
                        type: string
                      namespace:
                        description: Namespace of the secret.
                        type: string
                    required:
                    - key
                    - name
                    - namespace
                    type: object
                  stsEndpoint:
                    description: Specifies a custom HTTP STS endpoint to use. Specifies
                      a custom HTTP STS endpoint to use.
                    type: string
                  usernameTemplate:
                    description: 'Template describing how dynamic usernames are generated.
                      The username template is used to generate both IAM usernames
                      (capped at 64 characters) and STS usernames (capped at 32 characters).
                      If no template is provided the field defaults to the template:
                      Template describing how dynamic usernames are generated.'
                    type: string
                type: object
              initProvider:
                description: THIS IS AN ALPHA FIELD. Do not use it in production.
                  It is not honored unless the relevant Crossplane feature flag is
                  enabled, and may be changed or removed without notice. InitProvider
                  holds the same fields as ForProvider, with the exception of Identifier
                  and other resource reference fields. The fields that are in InitProvider
                  are merged into ForProvider when the resource is created. The same
                  fields are also added to the terraform ignore_changes hook, to avoid
                  updating them after creation. This is useful for fields that are
                  required on creation, but we do not desire to update them after
                  creation, for example because of an external controller is managing
                  them, like an autoscaler.
                properties:
                  defaultLeaseTtlSeconds:
                    description: The default TTL for credentials issued by this backend.
                      Default lease duration for secrets in seconds
                    type: number
                  description:
                    description: A human-friendly description for this backend. Human-friendly
                      description of the mount for the backend.
                    type: string
                  disableRemount:
                    description: If set, opts out of mount migration on path updates.
                      See here for more info on Mount Migration If set, opts out of
                      mount migration on path updates.
                    type: boolean
                  iamEndpoint:
                    description: Specifies a custom HTTP IAM endpoint to use. Specifies
                      a custom HTTP IAM endpoint to use.
                    type: string
                  identityTokenAudience:
                    description: The audience claim value. Requires Vault 1.16+. The
                      audience claim value.
                    type: string
                  identityTokenKey:
                    description: The key to use for signing identity tokens. Requires
                      Vault 1.16+. The key to use for signing identity tokens.
                    type: string
                  identityTokenTtl:
                    description: The TTL of generated identity tokens in seconds.
                      Requires Vault 1.16+. The TTL of generated identity tokens in
                      seconds.
                    type: number
                  local:
                    description: Specifies whether the secrets mount will be marked
                      as local. Local mounts are not replicated to performance replicas.
                      Specifies if the secret backend is local only
                    type: boolean
                  maxLeaseTtlSeconds:
                    description: The maximum TTL that can be requested for credentials
                      issued by this backend. Maximum possible lease duration for
                      secrets in seconds
                    type: number
                  namespace:
                    description: The namespace to provision the resource in. The value
                      should not contain leading or trailing forward slashes. The
                      namespace is always relative to the provider's configured namespace.
                      Available only for Vault Enterprise. Target namespace. (requires
                      Enterprise)
                    type: string
                  path:
                    description: The unique path this backend should be mounted at.
                      Must not begin or end with a /. Defaults to aws. Path to mount
                      the backend at.
                    type: string
                  region:
                    description: The AWS region for API calls. Defaults to us-east-1.
                      The AWS region to make API calls against. Defaults to us-east-1.
                    type: string
                  roleArn:
                    description: Role ARN to assume for plugin identity token federation.
                      Requires Vault 1.16+. Role ARN to assume for plugin identity
                      token federation.
                    type: string
                  stsEndpoint:
                    description: Specifies a custom HTTP STS endpoint to use. Specifies
                      a custom HTTP STS endpoint to use.
                    type: string
                  usernameTemplate:
                    description: 'Template describing how dynamic usernames are generated.
                      The username template is used to generate both IAM usernames
                      (capped at 64 characters) and STS usernames (capped at 32 characters).
                      If no template is provided the field defaults to the template:
                      Template describing how dynamic usernames are generated.'
                    type: string
                type: object
              managementPolicies:
                default:
                - '*'
                description: 'THIS IS AN ALPHA FIELD. Do not use it in production.
                  It is not honored unless the relevant Crossplane feature flag is
                  enabled, and may be changed or removed without notice. ManagementPolicies
                  specify the array of actions Crossplane is allowed to take on the
                  managed and external resources. This field is planned to replace
                  the DeletionPolicy field in a future release. Currently, both could
                  be set independently and non-default values would be honored if
                  the feature flag is enabled. If both are custom, the DeletionPolicy
                  field will be ignored. See the design doc for more information:
                  https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md'
                items:
                  description: A ManagementAction represents an action that the Crossplane
                    controllers can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: SecretBackendStatus defines the observed state of SecretBackend.
            properties:
              atProvider:
                properties:
                  defaultLeaseTtlSeconds:
                    description: The default TTL for credentials issued by this backend.
                      Default lease duration for secrets in seconds
                    type: number
                  description:
                    description: A human-friendly description for this backend. Human-friendly
                      description of the mount for the backend.
                    type: string
                  disableRemount:
                    description: If set, opts out of mount migration on path updates.
                      See here for more info on Mount Migration If set, opts out of
                      mount migration on path updates.
                    type: boolean
                  iamEndpoint:
                    description: Specifies a custom HTTP IAM endpoint to use. Specifies
                      a custom HTTP IAM endpoint to use.
                    type: string
                  id:
                    type: string
                  identityTokenAudience:
                    description: The audience claim value. Requires Vault 1.16+. The
                      audience claim value.
                    type: string
                  identityTokenKey:
                    description: The key to use for signing identity tokens. Requires
                      Vault 1.16+. The key to use for signing identity tokens.
                    type: string
                  identityTokenTtl:
                    description: The TTL of generated identity tokens in seconds.
                      Requires Vault 1.16+. The TTL of generated identity tokens in
                      seconds.
                    type: number
                  local:
                    description: Specifies whether the secrets mount will be marked
                      as local. Local mounts are not replicated to performance replicas.
                      Specifies if the secret backend is local only
                    type: boolean
                  maxLeaseTtlSeconds:
                    description: The maximum TTL that can be requested for credentials
                      issued by this backend. Maximum possible lease duration for
                      secrets in seconds
                    type: number
                  namespace:
                    description: The namespace to provision the resource in. The value
                      should not contain leading or trailing forward slashes. The
                      namespace is always relative to the provider's configured namespace.
                      Available only for Vault Enterprise. Target namespace. (requires
                      Enterprise)
                    type: string
                  path:
                    description: The unique path this backend should be mounted at.
                      Must not begin or end with a /. Defaults to aws. Path to mount
                      the backend at.
                    type: string
                  region:
                    description: The AWS region for API calls. Defaults to us-east-1.
                      The AWS region to make API calls against. Defaults to us-east-1.
                    type: string
                  roleArn:
                    description: Role ARN to assume for plugin identity token federation.
                      Requires Vault 1.16+. Role ARN to assume for plugin identity
                      token federation.
                    type: string
                  stsEndpoint:
                    description: Specifies a custom HTTP STS endpoint to use. Specifies
                      a custom HTTP STS endpoint to use.
                    type: string
                  usernameTemplate:
                    description: 'Template describing how dynamic usernames are generated.
                      The username template is used to generate both IAM usernames
                      (capped at 64 characters) and STS usernames (capped at 32 characters).
                      If no template is provided the field defaults to the template:
                      Template describing how dynamic usernames are generated.'
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
