/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthBackendConfigIdentityInitParameters struct {

	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// How to generate the identity alias when using the ec2 auth method. Valid choices are
	// role_id, instance_id, and image_id. Defaults to role_id
	// Configures how to generate the identity alias when using the ec2 auth method.
	EC2Alias *string `json:"ec2Alias,omitempty" tf:"ec2_alias,omitempty"`

	// The metadata to include on the token returned by the login endpoint. This metadata will be
	// added to both audit logs, and on the ec2_alias
	// The metadata to include on the token returned by the login endpoint.
	// +listType=set
	EC2Metadata []*string `json:"ec2Metadata,omitempty" tf:"ec2_metadata,omitempty"`

	// How to generate the identity alias when using the iam auth method. Valid choices are
	// role_id, unique_id, and full_arn. Defaults to role_id
	// How to generate the identity alias when using the iam auth method.
	IAMAlias *string `json:"iamAlias,omitempty" tf:"iam_alias,omitempty"`

	// The metadata to include on the token returned by the login endpoint. This metadata will be
	// added to both audit logs, and on the iam_alias
	// The metadata to include on the token returned by the login endpoint.
	// +listType=set
	IAMMetadata []*string `json:"iamMetadata,omitempty" tf:"iam_metadata,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type AuthBackendConfigIdentityObservation struct {

	// Unique name of the auth backend to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// How to generate the identity alias when using the ec2 auth method. Valid choices are
	// role_id, instance_id, and image_id. Defaults to role_id
	// Configures how to generate the identity alias when using the ec2 auth method.
	EC2Alias *string `json:"ec2Alias,omitempty" tf:"ec2_alias,omitempty"`

	// The metadata to include on the token returned by the login endpoint. This metadata will be
	// added to both audit logs, and on the ec2_alias
	// The metadata to include on the token returned by the login endpoint.
	// +listType=set
	EC2Metadata []*string `json:"ec2Metadata,omitempty" tf:"ec2_metadata,omitempty"`

	// How to generate the identity alias when using the iam auth method. Valid choices are
	// role_id, unique_id, and full_arn. Defaults to role_id
	// How to generate the identity alias when using the iam auth method.
	IAMAlias *string `json:"iamAlias,omitempty" tf:"iam_alias,omitempty"`

	// The metadata to include on the token returned by the login endpoint. This metadata will be
	// added to both audit logs, and on the iam_alias
	// The metadata to include on the token returned by the login endpoint.
	// +listType=set
	IAMMetadata []*string `json:"iamMetadata,omitempty" tf:"iam_metadata,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type AuthBackendConfigIdentityParameters struct {

	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// How to generate the identity alias when using the ec2 auth method. Valid choices are
	// role_id, instance_id, and image_id. Defaults to role_id
	// Configures how to generate the identity alias when using the ec2 auth method.
	// +kubebuilder:validation:Optional
	EC2Alias *string `json:"ec2Alias,omitempty" tf:"ec2_alias,omitempty"`

	// The metadata to include on the token returned by the login endpoint. This metadata will be
	// added to both audit logs, and on the ec2_alias
	// The metadata to include on the token returned by the login endpoint.
	// +kubebuilder:validation:Optional
	// +listType=set
	EC2Metadata []*string `json:"ec2Metadata,omitempty" tf:"ec2_metadata,omitempty"`

	// How to generate the identity alias when using the iam auth method. Valid choices are
	// role_id, unique_id, and full_arn. Defaults to role_id
	// How to generate the identity alias when using the iam auth method.
	// +kubebuilder:validation:Optional
	IAMAlias *string `json:"iamAlias,omitempty" tf:"iam_alias,omitempty"`

	// The metadata to include on the token returned by the login endpoint. This metadata will be
	// added to both audit logs, and on the iam_alias
	// The metadata to include on the token returned by the login endpoint.
	// +kubebuilder:validation:Optional
	// +listType=set
	IAMMetadata []*string `json:"iamMetadata,omitempty" tf:"iam_metadata,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// AuthBackendConfigIdentitySpec defines the desired state of AuthBackendConfigIdentity
type AuthBackendConfigIdentitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthBackendConfigIdentityParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthBackendConfigIdentityInitParameters `json:"initProvider,omitempty"`
}

// AuthBackendConfigIdentityStatus defines the observed state of AuthBackendConfigIdentity.
type AuthBackendConfigIdentityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthBackendConfigIdentityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AuthBackendConfigIdentity is the Schema for the AuthBackendConfigIdentitys API. Manages AWS auth backend identity configuration in Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type AuthBackendConfigIdentity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthBackendConfigIdentitySpec   `json:"spec"`
	Status            AuthBackendConfigIdentityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendConfigIdentityList contains a list of AuthBackendConfigIdentitys
type AuthBackendConfigIdentityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthBackendConfigIdentity `json:"items"`
}

// Repository type metadata.
var (
	AuthBackendConfigIdentity_Kind             = "AuthBackendConfigIdentity"
	AuthBackendConfigIdentity_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthBackendConfigIdentity_Kind}.String()
	AuthBackendConfigIdentity_KindAPIVersion   = AuthBackendConfigIdentity_Kind + "." + CRDGroupVersion.String()
	AuthBackendConfigIdentity_GroupVersionKind = CRDGroupVersion.WithKind(AuthBackendConfigIdentity_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthBackendConfigIdentity{}, &AuthBackendConfigIdentityList{})
}
