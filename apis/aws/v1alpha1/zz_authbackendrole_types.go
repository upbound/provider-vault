/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthBackendRoleInitParameters struct {

	// If set to true, allows migration of
	// the underlying instance where the client resides.
	// When true, allows migration of the underlying instance where the client resides. Use with caution.
	AllowInstanceMigration *bool `json:"allowInstanceMigration,omitempty" tf:"allow_instance_migration,omitempty"`

	// The auth type permitted for this role. Valid choices
	// are ec2 and iam. Defaults to iam.
	// The auth type permitted for this role.
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Path to the mounted aws auth backend.
	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they should be using the AMI ID
	// specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances using this AMI ID will be permitted to log in.
	// +listType=set
	BoundAMIIds []*string `json:"boundAmiIds,omitempty" tf:"bound_ami_ids,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they should be using the
	// account ID specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances with this account ID in their identity document will be permitted to log in.
	// +listType=set
	BoundAccountIds []*string `json:"boundAccountIds,omitempty" tf:"bound_account_ids,omitempty"`

	// Only EC2 instances that match this instance ID will be permitted to log in.
	// +listType=set
	BoundEC2InstanceIds []*string `json:"boundEc2InstanceIds,omitempty" tf:"bound_ec2_instance_ids,omitempty"`

	// If set, defines a constraint on
	// the EC2 instances that can perform the login operation that they must be
	// associated with an IAM instance profile ARN which has a prefix that matches
	// the value specified by this field. The value is prefix-matched as though it
	// were a glob ending in *. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
	// +listType=set
	BoundIAMInstanceProfileArns []*string `json:"boundIamInstanceProfileArns,omitempty" tf:"bound_iam_instance_profile_arns,omitempty"`

	// If set, defines the IAM principal that
	// must be authenticated when auth_type is set to iam. Wildcards are
	// supported at the end of the ARN.
	// The IAM principal that must be authenticated using the iam auth method.
	// +listType=set
	BoundIAMPrincipalArns []*string `json:"boundIamPrincipalArns,omitempty" tf:"bound_iam_principal_arns,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they must match the IAM
	// role ARN specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances that match this IAM role ARN will be permitted to log in.
	// +listType=set
	BoundIAMRoleArns []*string `json:"boundIamRoleArns,omitempty" tf:"bound_iam_role_arns,omitempty"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that the region in their identity
	// document must match the one specified by this field. auth_type must be set
	// to ec2 or inferred_entity_type must be set to ec2_instance to use this
	// constraint.
	// Only EC2 instances in this region will be permitted to log in.
	// +listType=set
	BoundRegions []*string `json:"boundRegions,omitempty" tf:"bound_regions,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they be associated with
	// the subnet ID that matches the value specified by this field. auth_type
	// must be set to ec2 or inferred_entity_type must be set to ec2_instance
	// to use this constraint.
	// Only EC2 instances associated with this subnet ID will be permitted to log in.
	// +listType=set
	BoundSubnetIds []*string `json:"boundSubnetIds,omitempty" tf:"bound_subnet_ids,omitempty"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they be associated with the VPC ID
	// that matches the value specified by this field. auth_type must be set to
	// ec2 or inferred_entity_type must be set to ec2_instance to use this
	// constraint.
	// Only EC2 instances associated with this VPC ID will be permitted to log in.
	// +listType=set
	BoundVPCIds []*string `json:"boundVpcIds,omitempty" tf:"bound_vpc_ids,omitempty"`

	// IF set to true, only allows a
	// single token to be granted per instance ID. This can only be set when
	// auth_type is set to ec2.
	// When true, only allows a single token to be granted per instance ID.
	DisallowReauthentication *bool `json:"disallowReauthentication,omitempty" tf:"disallow_reauthentication,omitempty"`

	// When inferred_entity_type is set, this
	// is the region to search for the inferred entities. Required if
	// inferred_entity_type is set. This only applies when auth_type is set to
	// iam.
	// The region to search for the inferred entities in.
	InferredAwsRegion *string `json:"inferredAwsRegion,omitempty" tf:"inferred_aws_region,omitempty"`

	// If set, instructs Vault to turn on
	// inferencing. The only valid value is ec2_instance, which instructs Vault to
	// infer that the role comes from an EC2 instance in an IAM instance profile.
	// This only applies when auth_type is set to iam.
	// The type of inferencing Vault should do.
	InferredEntityType *string `json:"inferredEntityType,omitempty" tf:"inferred_entity_type,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Only valid when
	// auth_type is iam. If set to true, the bound_iam_principal_arns are
	// resolved to AWS Unique
	// IDs
	// for the bound principal ARN. This field is ignored when a
	// bound_iam_principal_arn ends in a wildcard. Resolving to unique IDs more
	// closely mimics the behavior of AWS services in that if an IAM user or role is
	// deleted and a new one is recreated with the same name, those new users or
	// roles won't get access to roles in Vault that were permissioned to the prior
	// principals of the same name. Defaults to true.
	// Once set to true, this cannot be changed to false without recreating the role.
	// Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.
	ResolveAwsUniqueIds *bool `json:"resolveAwsUniqueIds,omitempty" tf:"resolve_aws_unique_ids,omitempty"`

	// The name of the role.
	// Name of the role.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// If set, enable role tags for this role. The value set
	// for this field should be the key of the tag on the EC2 instance. auth_type
	// must be set to ec2 or inferred_entity_type must be set to ec2_instance
	// to use this constraint.
	// The key of the tag on EC2 instance to use for role tags.
	RoleTag *string `json:"roleTag,omitempty" tf:"role_tag,omitempty"`

	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// +listType=set
	TokenBoundCidrs []*string `json:"tokenBoundCidrs,omitempty" tf:"token_bound_cidrs,omitempty"`

	// If set, will encode an
	// explicit max TTL
	// onto the token in number of seconds. This is a hard cap even if token_ttl and
	// token_max_ttl would otherwise allow a renewal.
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTTL *float64 `json:"tokenExplicitMaxTtl,omitempty" tf:"token_explicit_max_ttl,omitempty"`

	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The maximum lifetime of the generated token
	TokenMaxTTL *float64 `json:"tokenMaxTtl,omitempty" tf:"token_max_ttl,omitempty"`

	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"tokenNoDefaultPolicy,omitempty" tf:"token_no_default_policy,omitempty"`

	// The maximum number
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *float64 `json:"tokenNumUses,omitempty" tf:"token_num_uses,omitempty"`

	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	// Generated Token's Period
	TokenPeriod *float64 `json:"tokenPeriod,omitempty" tf:"token_period,omitempty"`

	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	// Generated Token's Policies
	// +listType=set
	TokenPolicies []*string `json:"tokenPolicies,omitempty" tf:"token_policies,omitempty"`

	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The initial ttl of the token to generate in seconds
	TokenTTL *float64 `json:"tokenTtl,omitempty" tf:"token_ttl,omitempty"`

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	// The type of token to generate, service or batch
	TokenType *string `json:"tokenType,omitempty" tf:"token_type,omitempty"`
}

type AuthBackendRoleObservation struct {

	// If set to true, allows migration of
	// the underlying instance where the client resides.
	// When true, allows migration of the underlying instance where the client resides. Use with caution.
	AllowInstanceMigration *bool `json:"allowInstanceMigration,omitempty" tf:"allow_instance_migration,omitempty"`

	// The auth type permitted for this role. Valid choices
	// are ec2 and iam. Defaults to iam.
	// The auth type permitted for this role.
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Path to the mounted aws auth backend.
	// Unique name of the auth backend to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they should be using the AMI ID
	// specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances using this AMI ID will be permitted to log in.
	// +listType=set
	BoundAMIIds []*string `json:"boundAmiIds,omitempty" tf:"bound_ami_ids,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they should be using the
	// account ID specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances with this account ID in their identity document will be permitted to log in.
	// +listType=set
	BoundAccountIds []*string `json:"boundAccountIds,omitempty" tf:"bound_account_ids,omitempty"`

	// Only EC2 instances that match this instance ID will be permitted to log in.
	// +listType=set
	BoundEC2InstanceIds []*string `json:"boundEc2InstanceIds,omitempty" tf:"bound_ec2_instance_ids,omitempty"`

	// If set, defines a constraint on
	// the EC2 instances that can perform the login operation that they must be
	// associated with an IAM instance profile ARN which has a prefix that matches
	// the value specified by this field. The value is prefix-matched as though it
	// were a glob ending in *. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
	// +listType=set
	BoundIAMInstanceProfileArns []*string `json:"boundIamInstanceProfileArns,omitempty" tf:"bound_iam_instance_profile_arns,omitempty"`

	// If set, defines the IAM principal that
	// must be authenticated when auth_type is set to iam. Wildcards are
	// supported at the end of the ARN.
	// The IAM principal that must be authenticated using the iam auth method.
	// +listType=set
	BoundIAMPrincipalArns []*string `json:"boundIamPrincipalArns,omitempty" tf:"bound_iam_principal_arns,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they must match the IAM
	// role ARN specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances that match this IAM role ARN will be permitted to log in.
	// +listType=set
	BoundIAMRoleArns []*string `json:"boundIamRoleArns,omitempty" tf:"bound_iam_role_arns,omitempty"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that the region in their identity
	// document must match the one specified by this field. auth_type must be set
	// to ec2 or inferred_entity_type must be set to ec2_instance to use this
	// constraint.
	// Only EC2 instances in this region will be permitted to log in.
	// +listType=set
	BoundRegions []*string `json:"boundRegions,omitempty" tf:"bound_regions,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they be associated with
	// the subnet ID that matches the value specified by this field. auth_type
	// must be set to ec2 or inferred_entity_type must be set to ec2_instance
	// to use this constraint.
	// Only EC2 instances associated with this subnet ID will be permitted to log in.
	// +listType=set
	BoundSubnetIds []*string `json:"boundSubnetIds,omitempty" tf:"bound_subnet_ids,omitempty"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they be associated with the VPC ID
	// that matches the value specified by this field. auth_type must be set to
	// ec2 or inferred_entity_type must be set to ec2_instance to use this
	// constraint.
	// Only EC2 instances associated with this VPC ID will be permitted to log in.
	// +listType=set
	BoundVPCIds []*string `json:"boundVpcIds,omitempty" tf:"bound_vpc_ids,omitempty"`

	// IF set to true, only allows a
	// single token to be granted per instance ID. This can only be set when
	// auth_type is set to ec2.
	// When true, only allows a single token to be granted per instance ID.
	DisallowReauthentication *bool `json:"disallowReauthentication,omitempty" tf:"disallow_reauthentication,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When inferred_entity_type is set, this
	// is the region to search for the inferred entities. Required if
	// inferred_entity_type is set. This only applies when auth_type is set to
	// iam.
	// The region to search for the inferred entities in.
	InferredAwsRegion *string `json:"inferredAwsRegion,omitempty" tf:"inferred_aws_region,omitempty"`

	// If set, instructs Vault to turn on
	// inferencing. The only valid value is ec2_instance, which instructs Vault to
	// infer that the role comes from an EC2 instance in an IAM instance profile.
	// This only applies when auth_type is set to iam.
	// The type of inferencing Vault should do.
	InferredEntityType *string `json:"inferredEntityType,omitempty" tf:"inferred_entity_type,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Only valid when
	// auth_type is iam. If set to true, the bound_iam_principal_arns are
	// resolved to AWS Unique
	// IDs
	// for the bound principal ARN. This field is ignored when a
	// bound_iam_principal_arn ends in a wildcard. Resolving to unique IDs more
	// closely mimics the behavior of AWS services in that if an IAM user or role is
	// deleted and a new one is recreated with the same name, those new users or
	// roles won't get access to roles in Vault that were permissioned to the prior
	// principals of the same name. Defaults to true.
	// Once set to true, this cannot be changed to false without recreating the role.
	// Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.
	ResolveAwsUniqueIds *bool `json:"resolveAwsUniqueIds,omitempty" tf:"resolve_aws_unique_ids,omitempty"`

	// The name of the role.
	// Name of the role.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The Vault generated role ID.
	// The Vault generated role ID.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// If set, enable role tags for this role. The value set
	// for this field should be the key of the tag on the EC2 instance. auth_type
	// must be set to ec2 or inferred_entity_type must be set to ec2_instance
	// to use this constraint.
	// The key of the tag on EC2 instance to use for role tags.
	RoleTag *string `json:"roleTag,omitempty" tf:"role_tag,omitempty"`

	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// +listType=set
	TokenBoundCidrs []*string `json:"tokenBoundCidrs,omitempty" tf:"token_bound_cidrs,omitempty"`

	// If set, will encode an
	// explicit max TTL
	// onto the token in number of seconds. This is a hard cap even if token_ttl and
	// token_max_ttl would otherwise allow a renewal.
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTTL *float64 `json:"tokenExplicitMaxTtl,omitempty" tf:"token_explicit_max_ttl,omitempty"`

	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The maximum lifetime of the generated token
	TokenMaxTTL *float64 `json:"tokenMaxTtl,omitempty" tf:"token_max_ttl,omitempty"`

	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"tokenNoDefaultPolicy,omitempty" tf:"token_no_default_policy,omitempty"`

	// The maximum number
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *float64 `json:"tokenNumUses,omitempty" tf:"token_num_uses,omitempty"`

	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	// Generated Token's Period
	TokenPeriod *float64 `json:"tokenPeriod,omitempty" tf:"token_period,omitempty"`

	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	// Generated Token's Policies
	// +listType=set
	TokenPolicies []*string `json:"tokenPolicies,omitempty" tf:"token_policies,omitempty"`

	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The initial ttl of the token to generate in seconds
	TokenTTL *float64 `json:"tokenTtl,omitempty" tf:"token_ttl,omitempty"`

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	// The type of token to generate, service or batch
	TokenType *string `json:"tokenType,omitempty" tf:"token_type,omitempty"`
}

type AuthBackendRoleParameters struct {

	// If set to true, allows migration of
	// the underlying instance where the client resides.
	// When true, allows migration of the underlying instance where the client resides. Use with caution.
	// +kubebuilder:validation:Optional
	AllowInstanceMigration *bool `json:"allowInstanceMigration,omitempty" tf:"allow_instance_migration,omitempty"`

	// The auth type permitted for this role. Valid choices
	// are ec2 and iam. Defaults to iam.
	// The auth type permitted for this role.
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Path to the mounted aws auth backend.
	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they should be using the AMI ID
	// specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances using this AMI ID will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundAMIIds []*string `json:"boundAmiIds,omitempty" tf:"bound_ami_ids,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they should be using the
	// account ID specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances with this account ID in their identity document will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundAccountIds []*string `json:"boundAccountIds,omitempty" tf:"bound_account_ids,omitempty"`

	// Only EC2 instances that match this instance ID will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundEC2InstanceIds []*string `json:"boundEc2InstanceIds,omitempty" tf:"bound_ec2_instance_ids,omitempty"`

	// If set, defines a constraint on
	// the EC2 instances that can perform the login operation that they must be
	// associated with an IAM instance profile ARN which has a prefix that matches
	// the value specified by this field. The value is prefix-matched as though it
	// were a glob ending in *. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundIAMInstanceProfileArns []*string `json:"boundIamInstanceProfileArns,omitempty" tf:"bound_iam_instance_profile_arns,omitempty"`

	// If set, defines the IAM principal that
	// must be authenticated when auth_type is set to iam. Wildcards are
	// supported at the end of the ARN.
	// The IAM principal that must be authenticated using the iam auth method.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundIAMPrincipalArns []*string `json:"boundIamPrincipalArns,omitempty" tf:"bound_iam_principal_arns,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they must match the IAM
	// role ARN specified by this field. auth_type must be set to ec2 or
	// inferred_entity_type must be set to ec2_instance to use this constraint.
	// Only EC2 instances that match this IAM role ARN will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundIAMRoleArns []*string `json:"boundIamRoleArns,omitempty" tf:"bound_iam_role_arns,omitempty"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that the region in their identity
	// document must match the one specified by this field. auth_type must be set
	// to ec2 or inferred_entity_type must be set to ec2_instance to use this
	// constraint.
	// Only EC2 instances in this region will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundRegions []*string `json:"boundRegions,omitempty" tf:"bound_regions,omitempty"`

	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they be associated with
	// the subnet ID that matches the value specified by this field. auth_type
	// must be set to ec2 or inferred_entity_type must be set to ec2_instance
	// to use this constraint.
	// Only EC2 instances associated with this subnet ID will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundSubnetIds []*string `json:"boundSubnetIds,omitempty" tf:"bound_subnet_ids,omitempty"`

	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they be associated with the VPC ID
	// that matches the value specified by this field. auth_type must be set to
	// ec2 or inferred_entity_type must be set to ec2_instance to use this
	// constraint.
	// Only EC2 instances associated with this VPC ID will be permitted to log in.
	// +kubebuilder:validation:Optional
	// +listType=set
	BoundVPCIds []*string `json:"boundVpcIds,omitempty" tf:"bound_vpc_ids,omitempty"`

	// IF set to true, only allows a
	// single token to be granted per instance ID. This can only be set when
	// auth_type is set to ec2.
	// When true, only allows a single token to be granted per instance ID.
	// +kubebuilder:validation:Optional
	DisallowReauthentication *bool `json:"disallowReauthentication,omitempty" tf:"disallow_reauthentication,omitempty"`

	// When inferred_entity_type is set, this
	// is the region to search for the inferred entities. Required if
	// inferred_entity_type is set. This only applies when auth_type is set to
	// iam.
	// The region to search for the inferred entities in.
	// +kubebuilder:validation:Optional
	InferredAwsRegion *string `json:"inferredAwsRegion,omitempty" tf:"inferred_aws_region,omitempty"`

	// If set, instructs Vault to turn on
	// inferencing. The only valid value is ec2_instance, which instructs Vault to
	// infer that the role comes from an EC2 instance in an IAM instance profile.
	// This only applies when auth_type is set to iam.
	// The type of inferencing Vault should do.
	// +kubebuilder:validation:Optional
	InferredEntityType *string `json:"inferredEntityType,omitempty" tf:"inferred_entity_type,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Only valid when
	// auth_type is iam. If set to true, the bound_iam_principal_arns are
	// resolved to AWS Unique
	// IDs
	// for the bound principal ARN. This field is ignored when a
	// bound_iam_principal_arn ends in a wildcard. Resolving to unique IDs more
	// closely mimics the behavior of AWS services in that if an IAM user or role is
	// deleted and a new one is recreated with the same name, those new users or
	// roles won't get access to roles in Vault that were permissioned to the prior
	// principals of the same name. Defaults to true.
	// Once set to true, this cannot be changed to false without recreating the role.
	// Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.
	// +kubebuilder:validation:Optional
	ResolveAwsUniqueIds *bool `json:"resolveAwsUniqueIds,omitempty" tf:"resolve_aws_unique_ids,omitempty"`

	// The name of the role.
	// Name of the role.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// If set, enable role tags for this role. The value set
	// for this field should be the key of the tag on the EC2 instance. auth_type
	// must be set to ec2 or inferred_entity_type must be set to ec2_instance
	// to use this constraint.
	// The key of the tag on EC2 instance to use for role tags.
	// +kubebuilder:validation:Optional
	RoleTag *string `json:"roleTag,omitempty" tf:"role_tag,omitempty"`

	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// +kubebuilder:validation:Optional
	// +listType=set
	TokenBoundCidrs []*string `json:"tokenBoundCidrs,omitempty" tf:"token_bound_cidrs,omitempty"`

	// If set, will encode an
	// explicit max TTL
	// onto the token in number of seconds. This is a hard cap even if token_ttl and
	// token_max_ttl would otherwise allow a renewal.
	// Generated Token's Explicit Maximum TTL in seconds
	// +kubebuilder:validation:Optional
	TokenExplicitMaxTTL *float64 `json:"tokenExplicitMaxTtl,omitempty" tf:"token_explicit_max_ttl,omitempty"`

	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The maximum lifetime of the generated token
	// +kubebuilder:validation:Optional
	TokenMaxTTL *float64 `json:"tokenMaxTtl,omitempty" tf:"token_max_ttl,omitempty"`

	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	// If true, the 'default' policy will not automatically be added to generated tokens
	// +kubebuilder:validation:Optional
	TokenNoDefaultPolicy *bool `json:"tokenNoDefaultPolicy,omitempty" tf:"token_no_default_policy,omitempty"`

	// The maximum number
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	// The maximum number of times a token may be used, a value of zero means unlimited
	// +kubebuilder:validation:Optional
	TokenNumUses *float64 `json:"tokenNumUses,omitempty" tf:"token_num_uses,omitempty"`

	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	// Generated Token's Period
	// +kubebuilder:validation:Optional
	TokenPeriod *float64 `json:"tokenPeriod,omitempty" tf:"token_period,omitempty"`

	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	// Generated Token's Policies
	// +kubebuilder:validation:Optional
	// +listType=set
	TokenPolicies []*string `json:"tokenPolicies,omitempty" tf:"token_policies,omitempty"`

	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The initial ttl of the token to generate in seconds
	// +kubebuilder:validation:Optional
	TokenTTL *float64 `json:"tokenTtl,omitempty" tf:"token_ttl,omitempty"`

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	// The type of token to generate, service or batch
	// +kubebuilder:validation:Optional
	TokenType *string `json:"tokenType,omitempty" tf:"token_type,omitempty"`
}

// AuthBackendRoleSpec defines the desired state of AuthBackendRole
type AuthBackendRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthBackendRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthBackendRoleInitParameters `json:"initProvider,omitempty"`
}

// AuthBackendRoleStatus defines the observed state of AuthBackendRole.
type AuthBackendRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthBackendRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AuthBackendRole is the Schema for the AuthBackendRoles API. Manages AWS auth backend roles in Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type AuthBackendRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	Spec   AuthBackendRoleSpec   `json:"spec"`
	Status AuthBackendRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendRoleList contains a list of AuthBackendRoles
type AuthBackendRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthBackendRole `json:"items"`
}

// Repository type metadata.
var (
	AuthBackendRole_Kind             = "AuthBackendRole"
	AuthBackendRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthBackendRole_Kind}.String()
	AuthBackendRole_KindAPIVersion   = AuthBackendRole_Kind + "." + CRDGroupVersion.String()
	AuthBackendRole_GroupVersionKind = CRDGroupVersion.WithKind(AuthBackendRole_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthBackendRole{}, &AuthBackendRoleList{})
}
