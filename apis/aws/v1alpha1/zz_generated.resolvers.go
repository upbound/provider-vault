/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1alpha1 "github.com/upbound/provider-vault/v2/apis/auth/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AuthBackendCert.
func (mg *AuthBackendCert) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendClient.
func (mg *AuthBackendClient) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendConfigIdentity.
func (mg *AuthBackendConfigIdentity) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendIdentityWhitelist.
func (mg *AuthBackendIdentityWhitelist) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendLogin.
func (mg *AuthBackendLogin) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Role),
		Extract:      resource.ExtractParamPath("role", false),
		Reference:    mg.Spec.ForProvider.RoleRef,
		Selector:     mg.Spec.ForProvider.RoleSelector,
		To: reference.To{
			List:    &AuthBackendRoleList{},
			Managed: &AuthBackendRole{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Role")
	}
	mg.Spec.ForProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Role),
		Extract:      resource.ExtractParamPath("role", false),
		Reference:    mg.Spec.InitProvider.RoleRef,
		Selector:     mg.Spec.InitProvider.RoleSelector,
		To: reference.To{
			List:    &AuthBackendRoleList{},
			Managed: &AuthBackendRole{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Role")
	}
	mg.Spec.InitProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendRole.
func (mg *AuthBackendRole) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendRoleTag.
func (mg *AuthBackendRoleTag) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Role),
		Extract:      resource.ExtractParamPath("role", false),
		Reference:    mg.Spec.ForProvider.RoleRef,
		Selector:     mg.Spec.ForProvider.RoleSelector,
		To: reference.To{
			List:    &AuthBackendRoleList{},
			Managed: &AuthBackendRole{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Role")
	}
	mg.Spec.ForProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Role),
		Extract:      resource.ExtractParamPath("role", false),
		Reference:    mg.Spec.InitProvider.RoleRef,
		Selector:     mg.Spec.InitProvider.RoleSelector,
		To: reference.To{
			List:    &AuthBackendRoleList{},
			Managed: &AuthBackendRole{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Role")
	}
	mg.Spec.InitProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendRoletagBlacklist.
func (mg *AuthBackendRoletagBlacklist) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthBackendStsRole.
func (mg *AuthBackendStsRole) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &v1alpha1.BackendList{},
			Managed: &v1alpha1.Backend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecretBackendRole.
func (mg *SecretBackendRole) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.BackendRef,
		Selector:     mg.Spec.ForProvider.BackendSelector,
		To: reference.To{
			List:    &SecretBackendList{},
			Managed: &SecretBackend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Backend")
	}
	mg.Spec.ForProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.BackendRef,
		Selector:     mg.Spec.InitProvider.BackendSelector,
		To: reference.To{
			List:    &SecretBackendList{},
			Managed: &SecretBackend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Backend")
	}
	mg.Spec.InitProvider.Backend = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendRef = rsp.ResolvedReference

	return nil
}
