//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackend) DeepCopyInto(out *SecretBackend) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackend.
func (in *SecretBackend) DeepCopy() *SecretBackend {
	if in == nil {
		return nil
	}
	out := new(SecretBackend)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackend) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendInitParameters) DeepCopyInto(out *SecretBackendInitParameters) {
	*out = *in
	if in.AnonymousGroupSearch != nil {
		in, out := &in.AnonymousGroupSearch, &out.AnonymousGroupSearch
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Binddn != nil {
		in, out := &in.Binddn, &out.Binddn
		*out = new(string)
		**out = **in
	}
	out.BindpassSecretRef = in.BindpassSecretRef
	if in.CaseSensitiveNames != nil {
		in, out := &in.CaseSensitiveNames, &out.CaseSensitiveNames
		*out = new(bool)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.ClientTLSCertSecretRef != nil {
		in, out := &in.ClientTLSCertSecretRef, &out.ClientTLSCertSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientTLSKeySecretRef != nil {
		in, out := &in.ClientTLSKeySecretRef, &out.ClientTLSKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.DefaultLeaseTTLSeconds != nil {
		in, out := &in.DefaultLeaseTTLSeconds, &out.DefaultLeaseTTLSeconds
		*out = new(float64)
		**out = **in
	}
	if in.DenyNullBind != nil {
		in, out := &in.DenyNullBind, &out.DenyNullBind
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableRemount != nil {
		in, out := &in.DisableRemount, &out.DisableRemount
		*out = new(bool)
		**out = **in
	}
	if in.Discoverdn != nil {
		in, out := &in.Discoverdn, &out.Discoverdn
		*out = new(bool)
		**out = **in
	}
	if in.Groupattr != nil {
		in, out := &in.Groupattr, &out.Groupattr
		*out = new(string)
		**out = **in
	}
	if in.Groupdn != nil {
		in, out := &in.Groupdn, &out.Groupdn
		*out = new(string)
		**out = **in
	}
	if in.Groupfilter != nil {
		in, out := &in.Groupfilter, &out.Groupfilter
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.LastRotationTolerance != nil {
		in, out := &in.LastRotationTolerance, &out.LastRotationTolerance
		*out = new(float64)
		**out = **in
	}
	if in.Local != nil {
		in, out := &in.Local, &out.Local
		*out = new(bool)
		**out = **in
	}
	if in.MaxLeaseTTLSeconds != nil {
		in, out := &in.MaxLeaseTTLSeconds, &out.MaxLeaseTTLSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.PasswordPolicy != nil {
		in, out := &in.PasswordPolicy, &out.PasswordPolicy
		*out = new(string)
		**out = **in
	}
	if in.RequestTimeout != nil {
		in, out := &in.RequestTimeout, &out.RequestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Starttls != nil {
		in, out := &in.Starttls, &out.Starttls
		*out = new(bool)
		**out = **in
	}
	if in.TLSMaxVersion != nil {
		in, out := &in.TLSMaxVersion, &out.TLSMaxVersion
		*out = new(string)
		**out = **in
	}
	if in.TLSMinVersion != nil {
		in, out := &in.TLSMinVersion, &out.TLSMinVersion
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Upndomain != nil {
		in, out := &in.Upndomain, &out.Upndomain
		*out = new(string)
		**out = **in
	}
	if in.UsePre111GroupCnBehavior != nil {
		in, out := &in.UsePre111GroupCnBehavior, &out.UsePre111GroupCnBehavior
		*out = new(bool)
		**out = **in
	}
	if in.UseTokenGroups != nil {
		in, out := &in.UseTokenGroups, &out.UseTokenGroups
		*out = new(bool)
		**out = **in
	}
	if in.Userattr != nil {
		in, out := &in.Userattr, &out.Userattr
		*out = new(string)
		**out = **in
	}
	if in.Userdn != nil {
		in, out := &in.Userdn, &out.Userdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendInitParameters.
func (in *SecretBackendInitParameters) DeepCopy() *SecretBackendInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendList) DeepCopyInto(out *SecretBackendList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackend, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendList.
func (in *SecretBackendList) DeepCopy() *SecretBackendList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendObservation) DeepCopyInto(out *SecretBackendObservation) {
	*out = *in
	if in.AnonymousGroupSearch != nil {
		in, out := &in.AnonymousGroupSearch, &out.AnonymousGroupSearch
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Binddn != nil {
		in, out := &in.Binddn, &out.Binddn
		*out = new(string)
		**out = **in
	}
	if in.CaseSensitiveNames != nil {
		in, out := &in.CaseSensitiveNames, &out.CaseSensitiveNames
		*out = new(bool)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.DefaultLeaseTTLSeconds != nil {
		in, out := &in.DefaultLeaseTTLSeconds, &out.DefaultLeaseTTLSeconds
		*out = new(float64)
		**out = **in
	}
	if in.DenyNullBind != nil {
		in, out := &in.DenyNullBind, &out.DenyNullBind
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableRemount != nil {
		in, out := &in.DisableRemount, &out.DisableRemount
		*out = new(bool)
		**out = **in
	}
	if in.Discoverdn != nil {
		in, out := &in.Discoverdn, &out.Discoverdn
		*out = new(bool)
		**out = **in
	}
	if in.Groupattr != nil {
		in, out := &in.Groupattr, &out.Groupattr
		*out = new(string)
		**out = **in
	}
	if in.Groupdn != nil {
		in, out := &in.Groupdn, &out.Groupdn
		*out = new(string)
		**out = **in
	}
	if in.Groupfilter != nil {
		in, out := &in.Groupfilter, &out.Groupfilter
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.LastRotationTolerance != nil {
		in, out := &in.LastRotationTolerance, &out.LastRotationTolerance
		*out = new(float64)
		**out = **in
	}
	if in.Local != nil {
		in, out := &in.Local, &out.Local
		*out = new(bool)
		**out = **in
	}
	if in.MaxLeaseTTLSeconds != nil {
		in, out := &in.MaxLeaseTTLSeconds, &out.MaxLeaseTTLSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.PasswordPolicy != nil {
		in, out := &in.PasswordPolicy, &out.PasswordPolicy
		*out = new(string)
		**out = **in
	}
	if in.RequestTimeout != nil {
		in, out := &in.RequestTimeout, &out.RequestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Starttls != nil {
		in, out := &in.Starttls, &out.Starttls
		*out = new(bool)
		**out = **in
	}
	if in.TLSMaxVersion != nil {
		in, out := &in.TLSMaxVersion, &out.TLSMaxVersion
		*out = new(string)
		**out = **in
	}
	if in.TLSMinVersion != nil {
		in, out := &in.TLSMinVersion, &out.TLSMinVersion
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Upndomain != nil {
		in, out := &in.Upndomain, &out.Upndomain
		*out = new(string)
		**out = **in
	}
	if in.UsePre111GroupCnBehavior != nil {
		in, out := &in.UsePre111GroupCnBehavior, &out.UsePre111GroupCnBehavior
		*out = new(bool)
		**out = **in
	}
	if in.UseTokenGroups != nil {
		in, out := &in.UseTokenGroups, &out.UseTokenGroups
		*out = new(bool)
		**out = **in
	}
	if in.Userattr != nil {
		in, out := &in.Userattr, &out.Userattr
		*out = new(string)
		**out = **in
	}
	if in.Userdn != nil {
		in, out := &in.Userdn, &out.Userdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendObservation.
func (in *SecretBackendObservation) DeepCopy() *SecretBackendObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendParameters) DeepCopyInto(out *SecretBackendParameters) {
	*out = *in
	if in.AnonymousGroupSearch != nil {
		in, out := &in.AnonymousGroupSearch, &out.AnonymousGroupSearch
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Binddn != nil {
		in, out := &in.Binddn, &out.Binddn
		*out = new(string)
		**out = **in
	}
	out.BindpassSecretRef = in.BindpassSecretRef
	if in.CaseSensitiveNames != nil {
		in, out := &in.CaseSensitiveNames, &out.CaseSensitiveNames
		*out = new(bool)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.ClientTLSCertSecretRef != nil {
		in, out := &in.ClientTLSCertSecretRef, &out.ClientTLSCertSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientTLSKeySecretRef != nil {
		in, out := &in.ClientTLSKeySecretRef, &out.ClientTLSKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.DefaultLeaseTTLSeconds != nil {
		in, out := &in.DefaultLeaseTTLSeconds, &out.DefaultLeaseTTLSeconds
		*out = new(float64)
		**out = **in
	}
	if in.DenyNullBind != nil {
		in, out := &in.DenyNullBind, &out.DenyNullBind
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableRemount != nil {
		in, out := &in.DisableRemount, &out.DisableRemount
		*out = new(bool)
		**out = **in
	}
	if in.Discoverdn != nil {
		in, out := &in.Discoverdn, &out.Discoverdn
		*out = new(bool)
		**out = **in
	}
	if in.Groupattr != nil {
		in, out := &in.Groupattr, &out.Groupattr
		*out = new(string)
		**out = **in
	}
	if in.Groupdn != nil {
		in, out := &in.Groupdn, &out.Groupdn
		*out = new(string)
		**out = **in
	}
	if in.Groupfilter != nil {
		in, out := &in.Groupfilter, &out.Groupfilter
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.LastRotationTolerance != nil {
		in, out := &in.LastRotationTolerance, &out.LastRotationTolerance
		*out = new(float64)
		**out = **in
	}
	if in.Local != nil {
		in, out := &in.Local, &out.Local
		*out = new(bool)
		**out = **in
	}
	if in.MaxLeaseTTLSeconds != nil {
		in, out := &in.MaxLeaseTTLSeconds, &out.MaxLeaseTTLSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.PasswordPolicy != nil {
		in, out := &in.PasswordPolicy, &out.PasswordPolicy
		*out = new(string)
		**out = **in
	}
	if in.RequestTimeout != nil {
		in, out := &in.RequestTimeout, &out.RequestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Starttls != nil {
		in, out := &in.Starttls, &out.Starttls
		*out = new(bool)
		**out = **in
	}
	if in.TLSMaxVersion != nil {
		in, out := &in.TLSMaxVersion, &out.TLSMaxVersion
		*out = new(string)
		**out = **in
	}
	if in.TLSMinVersion != nil {
		in, out := &in.TLSMinVersion, &out.TLSMinVersion
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Upndomain != nil {
		in, out := &in.Upndomain, &out.Upndomain
		*out = new(string)
		**out = **in
	}
	if in.UsePre111GroupCnBehavior != nil {
		in, out := &in.UsePre111GroupCnBehavior, &out.UsePre111GroupCnBehavior
		*out = new(bool)
		**out = **in
	}
	if in.UseTokenGroups != nil {
		in, out := &in.UseTokenGroups, &out.UseTokenGroups
		*out = new(bool)
		**out = **in
	}
	if in.Userattr != nil {
		in, out := &in.Userattr, &out.Userattr
		*out = new(string)
		**out = **in
	}
	if in.Userdn != nil {
		in, out := &in.Userdn, &out.Userdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendParameters.
func (in *SecretBackendParameters) DeepCopy() *SecretBackendParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSpec) DeepCopyInto(out *SecretBackendSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSpec.
func (in *SecretBackendSpec) DeepCopy() *SecretBackendSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendStatus) DeepCopyInto(out *SecretBackendStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendStatus.
func (in *SecretBackendStatus) DeepCopy() *SecretBackendStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRole) DeepCopyInto(out *SecretRole) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRole.
func (in *SecretRole) DeepCopy() *SecretRole {
	if in == nil {
		return nil
	}
	out := new(SecretRole)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretRole) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRoleInitParameters) DeepCopyInto(out *SecretRoleInitParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.BackendSelector != nil {
		in, out := &in.BackendSelector, &out.BackendSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountName != nil {
		in, out := &in.ServiceAccountName, &out.ServiceAccountName
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRoleInitParameters.
func (in *SecretRoleInitParameters) DeepCopy() *SecretRoleInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretRoleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRoleList) DeepCopyInto(out *SecretRoleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretRole, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRoleList.
func (in *SecretRoleList) DeepCopy() *SecretRoleList {
	if in == nil {
		return nil
	}
	out := new(SecretRoleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretRoleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRoleObservation) DeepCopyInto(out *SecretRoleObservation) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LastVaultRotation != nil {
		in, out := &in.LastVaultRotation, &out.LastVaultRotation
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.PasswordLastSet != nil {
		in, out := &in.PasswordLastSet, &out.PasswordLastSet
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountName != nil {
		in, out := &in.ServiceAccountName, &out.ServiceAccountName
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRoleObservation.
func (in *SecretRoleObservation) DeepCopy() *SecretRoleObservation {
	if in == nil {
		return nil
	}
	out := new(SecretRoleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRoleParameters) DeepCopyInto(out *SecretRoleParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.BackendSelector != nil {
		in, out := &in.BackendSelector, &out.BackendSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountName != nil {
		in, out := &in.ServiceAccountName, &out.ServiceAccountName
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRoleParameters.
func (in *SecretRoleParameters) DeepCopy() *SecretRoleParameters {
	if in == nil {
		return nil
	}
	out := new(SecretRoleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRoleSpec) DeepCopyInto(out *SecretRoleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRoleSpec.
func (in *SecretRoleSpec) DeepCopy() *SecretRoleSpec {
	if in == nil {
		return nil
	}
	out := new(SecretRoleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRoleStatus) DeepCopyInto(out *SecretRoleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRoleStatus.
func (in *SecretRoleStatus) DeepCopy() *SecretRoleStatus {
	if in == nil {
		return nil
	}
	out := new(SecretRoleStatus)
	in.DeepCopyInto(out)
	return out
}
