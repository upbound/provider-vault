/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendInitParameters struct {

	// Use anonymous binds when performing LDAP group searches
	// (if true the initial credentials will still be used for the initial connection test).
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).
	AnonymousGroupSearch *bool `json:"anonymousGroupSearch,omitempty" tf:"anonymous_group_search,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to ad.
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Distinguished name of object to bind when performing user and group search.
	// Distinguished name of object to bind when performing user and group search.
	Binddn *string `json:"binddn,omitempty" tf:"binddn,omitempty"`

	// Password to use along with binddn when performing user search.
	// LDAP password for searching for the user DN.
	BindpassSecretRef v1.SecretKeySelector `json:"bindpassSecretRef" tf:"-"`

	// If set, user and group names assigned to policies within the
	// backend will be case sensitive. Otherwise, names will be normalized to lower case.
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames *bool `json:"caseSensitiveNames,omitempty" tf:"case_sensitive_names,omitempty"`

	// CA certificate to use when verifying LDAP server certificate, must be
	// x509 PEM encoded.
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	ClientTLSCertSecretRef *v1.SecretKeySelector `json:"clientTlsCertSecretRef,omitempty" tf:"-"`

	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	ClientTLSKeySecretRef *v1.SecretKeySelector `json:"clientTlsKeySecretRef,omitempty" tf:"-"`

	// Default lease duration for secrets in seconds.
	// Default lease duration for secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// Denies an unauthenticated LDAP bind request if the user's password is empty;
	// defaults to true.
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind *bool `json:"denyNullBind,omitempty" tf:"deny_null_bind,omitempty"`

	// Human-friendly description of the mount for the Active Directory backend.
	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// Use anonymous bind to discover the bind Distinguished Name of a user.
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn *bool `json:"discoverdn,omitempty" tf:"discoverdn,omitempty"`

	// LDAP attribute to follow on objects returned by  in order to enumerate
	// user group membership. Examples: cn or memberOf, etc. Defaults to cn.
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: "cn" or "memberOf", etc. Default: cn
	Groupattr *string `json:"groupattr,omitempty" tf:"groupattr,omitempty"`

	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn *string `json:"groupdn,omitempty" tf:"groupdn,omitempty"`

	// Go template for querying group membership of user  The template can access
	// the following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	// Go template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter *string `json:"groupfilter,omitempty" tf:"groupfilter,omitempty"`

	// Skip LDAP server SSL Certificate verification. This is not recommended for production.
	// Defaults to false.
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The number of seconds after a Vault rotation where, if Active Directory
	// shows a later rotation, it should be considered out-of-band
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.
	LastRotationTolerance *float64 `json:"lastRotationTolerance,omitempty" tf:"last_rotation_tolerance,omitempty"`

	// Mark the secrets engine as local-only. Local engines are not replicated or removed by
	// replication.Tolerance duration to use when checking the last rotation time.
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for secrets in seconds.
	// Maximum possible lease duration for secrets in seconds.
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// In seconds, the maximum password time-to-live.
	// In seconds, the maximum password time-to-live.
	MaxTTL *float64 `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the password policy to use to generate passwords.
	// Name of the password policy to use to generate passwords.
	PasswordPolicy *string `json:"passwordPolicy,omitempty" tf:"password_policy,omitempty"`

	// Timeout, in seconds, for the connection when making requests against the server
	// before returning back an error.
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// Issue a StartTLS command after establishing unencrypted connection.
	// Issue a StartTLS command after establishing unencrypted connection.
	Starttls *bool `json:"starttls,omitempty" tf:"starttls,omitempty"`

	// Maximum TLS version to use. Accepted values are tls10, tls11,
	// tls12 or tls13. Defaults to tls12.
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TLSMaxVersion *string `json:"tlsMaxVersion,omitempty" tf:"tls_max_version,omitempty"`

	// Minimum TLS version to use. Accepted values are tls10, tls11,
	// tls12 or tls13. Defaults to tls12.
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version,omitempty"`

	// In seconds, the default password time-to-live.
	// In seconds, the default password time-to-live.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// LDAP URL to connect to. Multiple URLs can be specified by concatenating
	// them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Enables userPrincipalDomain login with [username]@UPNDomain.
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	Upndomain *string `json:"upndomain,omitempty" tf:"upndomain,omitempty"`

	// In Vault 1.1.1 a fix for handling group CN values of
	// different cases unfortunately introduced a regression that could cause previously defined groups
	// to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
	// matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
	// compatibility. It is enabled by default if the config is upgraded but disabled by default on
	// new configurations.
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior *bool `json:"usePre111GroupCnBehavior,omitempty" tf:"use_pre111_group_cn_behavior,omitempty"`

	// If true, use the Active Directory tokenGroups constructed attribute of the
	// user to find the group memberships. This will find all security groups including nested ones.
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.
	UseTokenGroups *bool `json:"useTokenGroups,omitempty" tf:"use_token_groups,omitempty"`

	// Attribute used when searching users. Defaults to cn.
	// Attribute used for users (default: cn)
	Userattr *string `json:"userattr,omitempty" tf:"userattr,omitempty"`

	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn *string `json:"userdn,omitempty" tf:"userdn,omitempty"`
}

type SecretBackendObservation struct {

	// Use anonymous binds when performing LDAP group searches
	// (if true the initial credentials will still be used for the initial connection test).
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).
	AnonymousGroupSearch *bool `json:"anonymousGroupSearch,omitempty" tf:"anonymous_group_search,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to ad.
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Distinguished name of object to bind when performing user and group search.
	// Distinguished name of object to bind when performing user and group search.
	Binddn *string `json:"binddn,omitempty" tf:"binddn,omitempty"`

	// If set, user and group names assigned to policies within the
	// backend will be case sensitive. Otherwise, names will be normalized to lower case.
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames *bool `json:"caseSensitiveNames,omitempty" tf:"case_sensitive_names,omitempty"`

	// CA certificate to use when verifying LDAP server certificate, must be
	// x509 PEM encoded.
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Default lease duration for secrets in seconds.
	// Default lease duration for secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// Denies an unauthenticated LDAP bind request if the user's password is empty;
	// defaults to true.
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind *bool `json:"denyNullBind,omitempty" tf:"deny_null_bind,omitempty"`

	// Human-friendly description of the mount for the Active Directory backend.
	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// Use anonymous bind to discover the bind Distinguished Name of a user.
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn *bool `json:"discoverdn,omitempty" tf:"discoverdn,omitempty"`

	// LDAP attribute to follow on objects returned by  in order to enumerate
	// user group membership. Examples: cn or memberOf, etc. Defaults to cn.
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: "cn" or "memberOf", etc. Default: cn
	Groupattr *string `json:"groupattr,omitempty" tf:"groupattr,omitempty"`

	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn *string `json:"groupdn,omitempty" tf:"groupdn,omitempty"`

	// Go template for querying group membership of user  The template can access
	// the following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	// Go template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter *string `json:"groupfilter,omitempty" tf:"groupfilter,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Skip LDAP server SSL Certificate verification. This is not recommended for production.
	// Defaults to false.
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The number of seconds after a Vault rotation where, if Active Directory
	// shows a later rotation, it should be considered out-of-band
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.
	LastRotationTolerance *float64 `json:"lastRotationTolerance,omitempty" tf:"last_rotation_tolerance,omitempty"`

	// Mark the secrets engine as local-only. Local engines are not replicated or removed by
	// replication.Tolerance duration to use when checking the last rotation time.
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for secrets in seconds.
	// Maximum possible lease duration for secrets in seconds.
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// In seconds, the maximum password time-to-live.
	// In seconds, the maximum password time-to-live.
	MaxTTL *float64 `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the password policy to use to generate passwords.
	// Name of the password policy to use to generate passwords.
	PasswordPolicy *string `json:"passwordPolicy,omitempty" tf:"password_policy,omitempty"`

	// Timeout, in seconds, for the connection when making requests against the server
	// before returning back an error.
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// Issue a StartTLS command after establishing unencrypted connection.
	// Issue a StartTLS command after establishing unencrypted connection.
	Starttls *bool `json:"starttls,omitempty" tf:"starttls,omitempty"`

	// Maximum TLS version to use. Accepted values are tls10, tls11,
	// tls12 or tls13. Defaults to tls12.
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TLSMaxVersion *string `json:"tlsMaxVersion,omitempty" tf:"tls_max_version,omitempty"`

	// Minimum TLS version to use. Accepted values are tls10, tls11,
	// tls12 or tls13. Defaults to tls12.
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version,omitempty"`

	// In seconds, the default password time-to-live.
	// In seconds, the default password time-to-live.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// LDAP URL to connect to. Multiple URLs can be specified by concatenating
	// them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Enables userPrincipalDomain login with [username]@UPNDomain.
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	Upndomain *string `json:"upndomain,omitempty" tf:"upndomain,omitempty"`

	// In Vault 1.1.1 a fix for handling group CN values of
	// different cases unfortunately introduced a regression that could cause previously defined groups
	// to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
	// matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
	// compatibility. It is enabled by default if the config is upgraded but disabled by default on
	// new configurations.
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior *bool `json:"usePre111GroupCnBehavior,omitempty" tf:"use_pre111_group_cn_behavior,omitempty"`

	// If true, use the Active Directory tokenGroups constructed attribute of the
	// user to find the group memberships. This will find all security groups including nested ones.
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.
	UseTokenGroups *bool `json:"useTokenGroups,omitempty" tf:"use_token_groups,omitempty"`

	// Attribute used when searching users. Defaults to cn.
	// Attribute used for users (default: cn)
	Userattr *string `json:"userattr,omitempty" tf:"userattr,omitempty"`

	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn *string `json:"userdn,omitempty" tf:"userdn,omitempty"`
}

type SecretBackendParameters struct {

	// Use anonymous binds when performing LDAP group searches
	// (if true the initial credentials will still be used for the initial connection test).
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).
	// +kubebuilder:validation:Optional
	AnonymousGroupSearch *bool `json:"anonymousGroupSearch,omitempty" tf:"anonymous_group_search,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to ad.
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Distinguished name of object to bind when performing user and group search.
	// Distinguished name of object to bind when performing user and group search.
	// +kubebuilder:validation:Optional
	Binddn *string `json:"binddn,omitempty" tf:"binddn,omitempty"`

	// Password to use along with binddn when performing user search.
	// LDAP password for searching for the user DN.
	// +kubebuilder:validation:Optional
	BindpassSecretRef v1.SecretKeySelector `json:"bindpassSecretRef" tf:"-"`

	// If set, user and group names assigned to policies within the
	// backend will be case sensitive. Otherwise, names will be normalized to lower case.
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	// +kubebuilder:validation:Optional
	CaseSensitiveNames *bool `json:"caseSensitiveNames,omitempty" tf:"case_sensitive_names,omitempty"`

	// CA certificate to use when verifying LDAP server certificate, must be
	// x509 PEM encoded.
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	// +kubebuilder:validation:Optional
	ClientTLSCertSecretRef *v1.SecretKeySelector `json:"clientTlsCertSecretRef,omitempty" tf:"-"`

	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	// +kubebuilder:validation:Optional
	ClientTLSKeySecretRef *v1.SecretKeySelector `json:"clientTlsKeySecretRef,omitempty" tf:"-"`

	// Default lease duration for secrets in seconds.
	// Default lease duration for secrets in seconds
	// +kubebuilder:validation:Optional
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// Denies an unauthenticated LDAP bind request if the user's password is empty;
	// defaults to true.
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	// +kubebuilder:validation:Optional
	DenyNullBind *bool `json:"denyNullBind,omitempty" tf:"deny_null_bind,omitempty"`

	// Human-friendly description of the mount for the Active Directory backend.
	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	// +kubebuilder:validation:Optional
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// Use anonymous bind to discover the bind Distinguished Name of a user.
	// Use anonymous bind to discover the bind DN of a user.
	// +kubebuilder:validation:Optional
	Discoverdn *bool `json:"discoverdn,omitempty" tf:"discoverdn,omitempty"`

	// LDAP attribute to follow on objects returned by  in order to enumerate
	// user group membership. Examples: cn or memberOf, etc. Defaults to cn.
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: "cn" or "memberOf", etc. Default: cn
	// +kubebuilder:validation:Optional
	Groupattr *string `json:"groupattr,omitempty" tf:"groupattr,omitempty"`

	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	// +kubebuilder:validation:Optional
	Groupdn *string `json:"groupdn,omitempty" tf:"groupdn,omitempty"`

	// Go template for querying group membership of user  The template can access
	// the following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	// Go template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	// +kubebuilder:validation:Optional
	Groupfilter *string `json:"groupfilter,omitempty" tf:"groupfilter,omitempty"`

	// Skip LDAP server SSL Certificate verification. This is not recommended for production.
	// Defaults to false.
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	// +kubebuilder:validation:Optional
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The number of seconds after a Vault rotation where, if Active Directory
	// shows a later rotation, it should be considered out-of-band
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.
	// +kubebuilder:validation:Optional
	LastRotationTolerance *float64 `json:"lastRotationTolerance,omitempty" tf:"last_rotation_tolerance,omitempty"`

	// Mark the secrets engine as local-only. Local engines are not replicated or removed by
	// replication.Tolerance duration to use when checking the last rotation time.
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.
	// +kubebuilder:validation:Optional
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for secrets in seconds.
	// Maximum possible lease duration for secrets in seconds.
	// +kubebuilder:validation:Optional
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// In seconds, the maximum password time-to-live.
	// In seconds, the maximum password time-to-live.
	// +kubebuilder:validation:Optional
	MaxTTL *float64 `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the password policy to use to generate passwords.
	// Name of the password policy to use to generate passwords.
	// +kubebuilder:validation:Optional
	PasswordPolicy *string `json:"passwordPolicy,omitempty" tf:"password_policy,omitempty"`

	// Timeout, in seconds, for the connection when making requests against the server
	// before returning back an error.
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	// +kubebuilder:validation:Optional
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// Issue a StartTLS command after establishing unencrypted connection.
	// Issue a StartTLS command after establishing unencrypted connection.
	// +kubebuilder:validation:Optional
	Starttls *bool `json:"starttls,omitempty" tf:"starttls,omitempty"`

	// Maximum TLS version to use. Accepted values are tls10, tls11,
	// tls12 or tls13. Defaults to tls12.
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	// +kubebuilder:validation:Optional
	TLSMaxVersion *string `json:"tlsMaxVersion,omitempty" tf:"tls_max_version,omitempty"`

	// Minimum TLS version to use. Accepted values are tls10, tls11,
	// tls12 or tls13. Defaults to tls12.
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	// +kubebuilder:validation:Optional
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version,omitempty"`

	// In seconds, the default password time-to-live.
	// In seconds, the default password time-to-live.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// LDAP URL to connect to. Multiple URLs can be specified by concatenating
	// them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Enables userPrincipalDomain login with [username]@UPNDomain.
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	// +kubebuilder:validation:Optional
	Upndomain *string `json:"upndomain,omitempty" tf:"upndomain,omitempty"`

	// In Vault 1.1.1 a fix for handling group CN values of
	// different cases unfortunately introduced a regression that could cause previously defined groups
	// to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
	// matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
	// compatibility. It is enabled by default if the config is upgraded but disabled by default on
	// new configurations.
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.
	// +kubebuilder:validation:Optional
	UsePre111GroupCnBehavior *bool `json:"usePre111GroupCnBehavior,omitempty" tf:"use_pre111_group_cn_behavior,omitempty"`

	// If true, use the Active Directory tokenGroups constructed attribute of the
	// user to find the group memberships. This will find all security groups including nested ones.
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.
	// +kubebuilder:validation:Optional
	UseTokenGroups *bool `json:"useTokenGroups,omitempty" tf:"use_token_groups,omitempty"`

	// Attribute used when searching users. Defaults to cn.
	// Attribute used for users (default: cn)
	// +kubebuilder:validation:Optional
	Userattr *string `json:"userattr,omitempty" tf:"userattr,omitempty"`

	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	// +kubebuilder:validation:Optional
	Userdn *string `json:"userdn,omitempty" tf:"userdn,omitempty"`
}

// SecretBackendSpec defines the desired state of SecretBackend
type SecretBackendSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendStatus defines the observed state of SecretBackend.
type SecretBackendStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackend is the Schema for the SecretBackends API. Creates an Active Directory secret backend for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.binddn) || (has(self.initProvider) && has(self.initProvider.binddn))",message="spec.forProvider.binddn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bindpassSecretRef)",message="spec.forProvider.bindpassSecretRef is a required parameter"
	Spec   SecretBackendSpec   `json:"spec"`
	Status SecretBackendStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendList contains a list of SecretBackends
type SecretBackendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackend `json:"items"`
}

// Repository type metadata.
var (
	SecretBackend_Kind             = "SecretBackend"
	SecretBackend_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackend_Kind}.String()
	SecretBackend_KindAPIVersion   = SecretBackend_Kind + "." + CRDGroupVersion.String()
	SecretBackend_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackend_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackend{}, &SecretBackendList{})
}
