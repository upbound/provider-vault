/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MfaPingidInitParameters struct {

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	SettingsFileBase64 *string `json:"settingsFileBase64,omitempty" tf:"settings_file_base64,omitempty"`

	// A template string for mapping Identity names to MFA methods.
	// A template string for mapping Identity names to MFA methods.
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

type MfaPingidObservation struct {

	// The admin URL, derived from "settings_file_base64"
	// The admin URL, derived from "settings_file_base64"
	AdminURL *string `json:"adminUrl,omitempty" tf:"admin_url,omitempty"`

	// A unique identifier of the organization, derived from "settings_file_base64"
	// A unique identifier of the organization, derived from "settings_file_base64"
	AuthenticatorURL *string `json:"authenticatorUrl,omitempty" tf:"authenticator_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IDP URL, derived from "settings_file_base64"
	// The IDP URL, derived from "settings_file_base64"
	IdpURL *string `json:"idpUrl,omitempty" tf:"idp_url,omitempty"`

	// Method ID.
	// Method ID.
	MethodID *string `json:"methodId,omitempty" tf:"method_id,omitempty"`

	// Mount accessor.
	// Mount accessor.
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Method name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Method's namespace ID.
	// Method's namespace ID.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// Method's namespace path.
	// Method's namespace path.
	NamespacePath *string `json:"namespacePath,omitempty" tf:"namespace_path,omitempty"`

	// The name of the PingID client organization, derived from "settings_file_base64"
	// The name of the PingID client organization, derived from "settings_file_base64"
	OrgAlias *string `json:"orgAlias,omitempty" tf:"org_alias,omitempty"`

	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	SettingsFileBase64 *string `json:"settingsFileBase64,omitempty" tf:"settings_file_base64,omitempty"`

	// MFA type.
	// MFA type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Resource UUID.
	// Resource UUID.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Use signature value, derived from "settings_file_base64"
	// Use signature value, derived from "settings_file_base64"
	UseSignature *bool `json:"useSignature,omitempty" tf:"use_signature,omitempty"`

	// A template string for mapping Identity names to MFA methods.
	// A template string for mapping Identity names to MFA methods.
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

type MfaPingidParameters struct {

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
	// +kubebuilder:validation:Optional
	SettingsFileBase64 *string `json:"settingsFileBase64,omitempty" tf:"settings_file_base64,omitempty"`

	// A template string for mapping Identity names to MFA methods.
	// A template string for mapping Identity names to MFA methods.
	// +kubebuilder:validation:Optional
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

// MfaPingidSpec defines the desired state of MfaPingid
type MfaPingidSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MfaPingidParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MfaPingidInitParameters `json:"initProvider,omitempty"`
}

// MfaPingidStatus defines the observed state of MfaPingid.
type MfaPingidStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MfaPingidObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MfaPingid is the Schema for the MfaPingids API. Resource for configuring the pingid MFA method.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type MfaPingid struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.settingsFileBase64) || has(self.initProvider.settingsFileBase64)",message="settingsFileBase64 is a required parameter"
	Spec   MfaPingidSpec   `json:"spec"`
	Status MfaPingidStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MfaPingidList contains a list of MfaPingids
type MfaPingidList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MfaPingid `json:"items"`
}

// Repository type metadata.
var (
	MfaPingid_Kind             = "MfaPingid"
	MfaPingid_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MfaPingid_Kind}.String()
	MfaPingid_KindAPIVersion   = MfaPingid_Kind + "." + CRDGroupVersion.String()
	MfaPingid_GroupVersionKind = CRDGroupVersion.WithKind(MfaPingid_Kind)
)

func init() {
	SchemeBuilder.Register(&MfaPingid{}, &MfaPingidList{})
}
