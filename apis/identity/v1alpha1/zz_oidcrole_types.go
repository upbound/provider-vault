/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OidcRoleInitParameters struct {

	// The value that will be included in the aud field of all the OIDC identity
	// tokens issued by this role
	// The value that will be included in the `aud` field of all the OIDC identity tokens issued by this role
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// A configured named key, the key must already exist
	// before tokens can be issued.
	// A configured named key, the key must already exist.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/identity/v1alpha1.OidcKey
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Reference to a OidcKey in identity to populate key.
	// +kubebuilder:validation:Optional
	KeyRef *v1.Reference `json:"keyRef,omitempty" tf:"-"`

	// Selector for a OidcKey in identity to populate key.
	// +kubebuilder:validation:Optional
	KeySelector *v1.Selector `json:"keySelector,omitempty" tf:"-"`

	// Name of the OIDC Role to create.
	// Name of the role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// TTL of the tokens generated against the role in number of seconds.
	// TTL of the tokens generated against the role in number of seconds.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The template string to use for generating tokens. This may be in
	// string-ified JSON or base64 format. See the
	// documentation
	// for the template format.
	// The template string to use for generating tokens. This may be in string-ified JSON or base64 format.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

type OidcRoleObservation struct {

	// The value that will be included in the aud field of all the OIDC identity
	// tokens issued by this role
	// The value that will be included in the `aud` field of all the OIDC identity tokens issued by this role
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The name of the created role.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A configured named key, the key must already exist
	// before tokens can be issued.
	// A configured named key, the key must already exist.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Name of the OIDC Role to create.
	// Name of the role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// TTL of the tokens generated against the role in number of seconds.
	// TTL of the tokens generated against the role in number of seconds.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The template string to use for generating tokens. This may be in
	// string-ified JSON or base64 format. See the
	// documentation
	// for the template format.
	// The template string to use for generating tokens. This may be in string-ified JSON or base64 format.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

type OidcRoleParameters struct {

	// The value that will be included in the aud field of all the OIDC identity
	// tokens issued by this role
	// The value that will be included in the `aud` field of all the OIDC identity tokens issued by this role
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// A configured named key, the key must already exist
	// before tokens can be issued.
	// A configured named key, the key must already exist.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/identity/v1alpha1.OidcKey
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Reference to a OidcKey in identity to populate key.
	// +kubebuilder:validation:Optional
	KeyRef *v1.Reference `json:"keyRef,omitempty" tf:"-"`

	// Selector for a OidcKey in identity to populate key.
	// +kubebuilder:validation:Optional
	KeySelector *v1.Selector `json:"keySelector,omitempty" tf:"-"`

	// Name of the OIDC Role to create.
	// Name of the role.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// TTL of the tokens generated against the role in number of seconds.
	// TTL of the tokens generated against the role in number of seconds.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The template string to use for generating tokens. This may be in
	// string-ified JSON or base64 format. See the
	// documentation
	// for the template format.
	// The template string to use for generating tokens. This may be in string-ified JSON or base64 format.
	// +kubebuilder:validation:Optional
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

// OidcRoleSpec defines the desired state of OidcRole
type OidcRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OidcRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OidcRoleInitParameters `json:"initProvider,omitempty"`
}

// OidcRoleStatus defines the observed state of OidcRole.
type OidcRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OidcRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OidcRole is the Schema for the OidcRoles API. Creates an Identity OIDC Role for Vault
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type OidcRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   OidcRoleSpec   `json:"spec"`
	Status OidcRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OidcRoleList contains a list of OidcRoles
type OidcRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OidcRole `json:"items"`
}

// Repository type metadata.
var (
	OidcRole_Kind             = "OidcRole"
	OidcRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OidcRole_Kind}.String()
	OidcRole_KindAPIVersion   = OidcRole_Kind + "." + CRDGroupVersion.String()
	OidcRole_GroupVersionKind = CRDGroupVersion.WithKind(OidcRole_Kind)
)

func init() {
	SchemeBuilder.Register(&OidcRole{}, &OidcRoleList{})
}
