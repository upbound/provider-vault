/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OidcAssignmentInitParameters struct {

	// A set of Vault entity IDs.
	// A list of Vault entity IDs.
	// +listType=set
	EntityIds []*string `json:"entityIds,omitempty" tf:"entity_ids,omitempty"`

	// A set of Vault group IDs.
	// A list of Vault group IDs.
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// The name of the assignment.
	// The name of the assignment.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type OidcAssignmentObservation struct {

	// A set of Vault entity IDs.
	// A list of Vault entity IDs.
	// +listType=set
	EntityIds []*string `json:"entityIds,omitempty" tf:"entity_ids,omitempty"`

	// A set of Vault group IDs.
	// A list of Vault group IDs.
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the assignment.
	// The name of the assignment.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type OidcAssignmentParameters struct {

	// A set of Vault entity IDs.
	// A list of Vault entity IDs.
	// +kubebuilder:validation:Optional
	// +listType=set
	EntityIds []*string `json:"entityIds,omitempty" tf:"entity_ids,omitempty"`

	// A set of Vault group IDs.
	// A list of Vault group IDs.
	// +kubebuilder:validation:Optional
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// The name of the assignment.
	// The name of the assignment.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// OidcAssignmentSpec defines the desired state of OidcAssignment
type OidcAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OidcAssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OidcAssignmentInitParameters `json:"initProvider,omitempty"`
}

// OidcAssignmentStatus defines the observed state of OidcAssignment.
type OidcAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OidcAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OidcAssignment is the Schema for the OidcAssignments API. Provision OIDC Assignments in Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type OidcAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   OidcAssignmentSpec   `json:"spec"`
	Status OidcAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OidcAssignmentList contains a list of OidcAssignments
type OidcAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OidcAssignment `json:"items"`
}

// Repository type metadata.
var (
	OidcAssignment_Kind             = "OidcAssignment"
	OidcAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OidcAssignment_Kind}.String()
	OidcAssignment_KindAPIVersion   = OidcAssignment_Kind + "." + CRDGroupVersion.String()
	OidcAssignment_GroupVersionKind = CRDGroupVersion.WithKind(OidcAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&OidcAssignment{}, &OidcAssignmentList{})
}
