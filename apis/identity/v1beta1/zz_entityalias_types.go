/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntityAliasInitParameters struct {

	// Entity ID to which this alias belongs to.
	// ID of the entity to which this is an alias.
	CanonicalID *string `json:"canonicalId,omitempty" tf:"canonical_id,omitempty"`

	// Custom metadata to be associated with this alias.
	// +mapType=granular
	CustomMetadata map[string]*string `json:"customMetadata,omitempty" tf:"custom_metadata,omitempty"`

	// Accessor of the mount to which the alias should belong to.
	// Mount accessor to which this alias belongs toMount accessor to which this alias belongs to.
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.
	// Name of the entity alias.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type EntityAliasObservation struct {

	// Entity ID to which this alias belongs to.
	// ID of the entity to which this is an alias.
	CanonicalID *string `json:"canonicalId,omitempty" tf:"canonical_id,omitempty"`

	// Custom metadata to be associated with this alias.
	// +mapType=granular
	CustomMetadata map[string]*string `json:"customMetadata,omitempty" tf:"custom_metadata,omitempty"`

	// ID of the entity alias.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Accessor of the mount to which the alias should belong to.
	// Mount accessor to which this alias belongs toMount accessor to which this alias belongs to.
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.
	// Name of the entity alias.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type EntityAliasParameters struct {

	// Entity ID to which this alias belongs to.
	// ID of the entity to which this is an alias.
	// +kubebuilder:validation:Optional
	CanonicalID *string `json:"canonicalId,omitempty" tf:"canonical_id,omitempty"`

	// Custom metadata to be associated with this alias.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomMetadata map[string]*string `json:"customMetadata,omitempty" tf:"custom_metadata,omitempty"`

	// Accessor of the mount to which the alias should belong to.
	// Mount accessor to which this alias belongs toMount accessor to which this alias belongs to.
	// +kubebuilder:validation:Optional
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.
	// Name of the entity alias.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// EntityAliasSpec defines the desired state of EntityAlias
type EntityAliasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntityAliasParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EntityAliasInitParameters `json:"initProvider,omitempty"`
}

// EntityAliasStatus defines the observed state of EntityAlias.
type EntityAliasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntityAliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EntityAlias is the Schema for the EntityAliass API. Creates an Identity Entity Alias for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type EntityAlias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.canonicalId) || (has(self.initProvider) && has(self.initProvider.canonicalId))",message="spec.forProvider.canonicalId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mountAccessor) || (has(self.initProvider) && has(self.initProvider.mountAccessor))",message="spec.forProvider.mountAccessor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   EntityAliasSpec   `json:"spec"`
	Status EntityAliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntityAliasList contains a list of EntityAliass
type EntityAliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EntityAlias `json:"items"`
}

// Repository type metadata.
var (
	EntityAlias_Kind             = "EntityAlias"
	EntityAlias_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EntityAlias_Kind}.String()
	EntityAlias_KindAPIVersion   = EntityAlias_Kind + "." + CRDGroupVersion.String()
	EntityAlias_GroupVersionKind = CRDGroupVersion.WithKind(EntityAlias_Kind)
)

func init() {
	SchemeBuilder.Register(&EntityAlias{}, &EntityAliasList{})
}
