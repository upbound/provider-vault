/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretRoleInitParameters struct {

	// The unique path this backend should be mounted at.
	// The mount path for the Nomad backend.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/nomad/v1alpha1.SecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("backend",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a SecretBackend in nomad to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a SecretBackend in nomad to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Specifies if the generated token should be global. Defaults to
	// false.
	// Specifies if the token should be global.
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// List of policies attached to the generated token. This setting is only used
	// when type is 'client'.
	// Comma separated list of Nomad policies the token is going to be created against. These need to be created beforehand in Nomad.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The name to identify this role within the backend.
	// Must be unique within the backend.
	// Name of the role.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Specifies the type of token to create when using this role. Valid
	// settings are 'client' and 'management'. Defaults to 'client'.
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecretRoleObservation struct {

	// The unique path this backend should be mounted at.
	// The mount path for the Nomad backend.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Specifies if the generated token should be global. Defaults to
	// false.
	// Specifies if the token should be global.
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// List of policies attached to the generated token. This setting is only used
	// when type is 'client'.
	// Comma separated list of Nomad policies the token is going to be created against. These need to be created beforehand in Nomad.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The name to identify this role within the backend.
	// Must be unique within the backend.
	// Name of the role.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Specifies the type of token to create when using this role. Valid
	// settings are 'client' and 'management'. Defaults to 'client'.
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecretRoleParameters struct {

	// The unique path this backend should be mounted at.
	// The mount path for the Nomad backend.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/nomad/v1alpha1.SecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("backend",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a SecretBackend in nomad to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a SecretBackend in nomad to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Specifies if the generated token should be global. Defaults to
	// false.
	// Specifies if the token should be global.
	// +kubebuilder:validation:Optional
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// List of policies attached to the generated token. This setting is only used
	// when type is 'client'.
	// Comma separated list of Nomad policies the token is going to be created against. These need to be created beforehand in Nomad.
	// +kubebuilder:validation:Optional
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The name to identify this role within the backend.
	// Must be unique within the backend.
	// Name of the role.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Specifies the type of token to create when using this role. Valid
	// settings are 'client' and 'management'. Defaults to 'client'.
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// SecretRoleSpec defines the desired state of SecretRole
type SecretRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretRoleInitParameters `json:"initProvider,omitempty"`
}

// SecretRoleStatus defines the observed state of SecretRole.
type SecretRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretRole is the Schema for the SecretRoles API. Creates a Nomad role.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	Spec   SecretRoleSpec   `json:"spec"`
	Status SecretRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretRoleList contains a list of SecretRoles
type SecretRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretRole `json:"items"`
}

// Repository type metadata.
var (
	SecretRole_Kind             = "SecretRole"
	SecretRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretRole_Kind}.String()
	SecretRole_KindAPIVersion   = SecretRole_Kind + "." + CRDGroupVersion.String()
	SecretRole_GroupVersionKind = CRDGroupVersion.WithKind(SecretRole_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretRole{}, &SecretRoleList{})
}
