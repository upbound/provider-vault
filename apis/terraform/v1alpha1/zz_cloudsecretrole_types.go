/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudSecretRoleInitParameters struct {

	// Must not begin or end with a /.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/terraform/v1alpha1.CloudSecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("backend",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a CloudSecretBackend in terraform to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a CloudSecretBackend in terraform to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Maximum TTL for leases associated with this role, in seconds.
	// Maximum allowed lease for generated credentials. If not set or set to 0, will use system default.
	MaxTTL *float64 `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// the name of the provider cloud secrets engine role to create.
	// the name of an existing role against which to create this provider cloud credential
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// the organization name managing your provider cloud instance.
	// name of the provider cloud or enterprise organization
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Specifies the TTL for this role.
	// Default lease for generated credentials. If not set or set to 0, will use system default.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// g., settings/teams/team-xxxxxxxxxxxxx)
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// g., user-xxxxxxxxxxxxxxxx)
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type CloudSecretRoleObservation struct {

	// Must not begin or end with a /.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Maximum TTL for leases associated with this role, in seconds.
	// Maximum allowed lease for generated credentials. If not set or set to 0, will use system default.
	MaxTTL *float64 `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// the name of the provider cloud secrets engine role to create.
	// the name of an existing role against which to create this provider cloud credential
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// the organization name managing your provider cloud instance.
	// name of the provider cloud or enterprise organization
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Specifies the TTL for this role.
	// Default lease for generated credentials. If not set or set to 0, will use system default.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// g., settings/teams/team-xxxxxxxxxxxxx)
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// g., user-xxxxxxxxxxxxxxxx)
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type CloudSecretRoleParameters struct {

	// Must not begin or end with a /.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/terraform/v1alpha1.CloudSecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("backend",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a CloudSecretBackend in terraform to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a CloudSecretBackend in terraform to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Maximum TTL for leases associated with this role, in seconds.
	// Maximum allowed lease for generated credentials. If not set or set to 0, will use system default.
	// +kubebuilder:validation:Optional
	MaxTTL *float64 `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// the name of the provider cloud secrets engine role to create.
	// the name of an existing role against which to create this provider cloud credential
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// the organization name managing your provider cloud instance.
	// name of the provider cloud or enterprise organization
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Specifies the TTL for this role.
	// Default lease for generated credentials. If not set or set to 0, will use system default.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// g., settings/teams/team-xxxxxxxxxxxxx)
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// g., user-xxxxxxxxxxxxxxxx)
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// CloudSecretRoleSpec defines the desired state of CloudSecretRole
type CloudSecretRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudSecretRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CloudSecretRoleInitParameters `json:"initProvider,omitempty"`
}

// CloudSecretRoleStatus defines the observed state of CloudSecretRole.
type CloudSecretRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudSecretRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CloudSecretRole is the Schema for the CloudSecretRoles API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type CloudSecretRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CloudSecretRoleSpec   `json:"spec"`
	Status CloudSecretRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudSecretRoleList contains a list of CloudSecretRoles
type CloudSecretRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudSecretRole `json:"items"`
}

// Repository type metadata.
var (
	CloudSecretRole_Kind             = "CloudSecretRole"
	CloudSecretRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudSecretRole_Kind}.String()
	CloudSecretRole_KindAPIVersion   = CloudSecretRole_Kind + "." + CRDGroupVersion.String()
	CloudSecretRole_GroupVersionKind = CRDGroupVersion.WithKind(CloudSecretRole_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudSecretRole{}, &CloudSecretRoleList{})
}
