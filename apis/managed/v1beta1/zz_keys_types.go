/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsInitParameters struct {

	// The AWS access key to use.
	// The AWS access key to use
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The curve to use for an ECDSA key. Used when key_type
	// is ECDSA. Required if allow_generate_key is true.
	// The curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Used to specify a custom AWS endpoint.
	// Used to specify a custom AWS endpoint
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// An identifier for the key.
	// An identifier for the key
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// The size in bits for an RSA key.
	// The size in bits for an RSA key. This field is required when 'key_type' is 'RSA'
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The type of key to use.
	// The type of key to use
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The AWS region where the keys are stored (or will be stored).
	// The AWS region where the keys are stored (or will be stored)
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The AWS access key to use.
	// The AWS secret key to use
	SecretKey *string `json:"secretKey,omitempty" tf:"secret_key,omitempty"`
}

type AwsObservation struct {

	// The AWS access key to use.
	// The AWS access key to use
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The curve to use for an ECDSA key. Used when key_type
	// is ECDSA. Required if allow_generate_key is true.
	// The curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Used to specify a custom AWS endpoint.
	// Used to specify a custom AWS endpoint
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// An identifier for the key.
	// An identifier for the key
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// The size in bits for an RSA key.
	// The size in bits for an RSA key. This field is required when 'key_type' is 'RSA'
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The type of key to use.
	// The type of key to use
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The AWS region where the keys are stored (or will be stored).
	// The AWS region where the keys are stored (or will be stored)
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The AWS access key to use.
	// The AWS secret key to use
	SecretKey *string `json:"secretKey,omitempty" tf:"secret_key,omitempty"`

	// ID of the managed key read from Vault
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AwsParameters struct {

	// The AWS access key to use.
	// The AWS access key to use
	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey" tf:"access_key,omitempty"`

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	// +kubebuilder:validation:Optional
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	// +kubebuilder:validation:Optional
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	// +kubebuilder:validation:Optional
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	// +kubebuilder:validation:Optional
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The curve to use for an ECDSA key. Used when key_type
	// is ECDSA. Required if allow_generate_key is true.
	// The curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true
	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Used to specify a custom AWS endpoint.
	// Used to specify a custom AWS endpoint
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// An identifier for the key.
	// An identifier for the key
	// +kubebuilder:validation:Optional
	KMSKey *string `json:"kmsKey" tf:"kms_key,omitempty"`

	// The size in bits for an RSA key.
	// The size in bits for an RSA key. This field is required when 'key_type' is 'RSA'
	// +kubebuilder:validation:Optional
	KeyBits *string `json:"keyBits" tf:"key_bits,omitempty"`

	// The type of key to use.
	// The type of key to use
	// +kubebuilder:validation:Optional
	KeyType *string `json:"keyType" tf:"key_type,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The AWS region where the keys are stored (or will be stored).
	// The AWS region where the keys are stored (or will be stored)
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The AWS access key to use.
	// The AWS secret key to use
	// +kubebuilder:validation:Optional
	SecretKey *string `json:"secretKey" tf:"secret_key,omitempty"`
}

type AzureInitParameters struct {

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The client id for credentials to query the Azure APIs.
	// The client id for credentials to query the Azure APIs
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The client secret for credentials to query the Azure APIs.
	// The client secret for credentials to query the Azure APIs
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// The Azure Cloud environment API endpoints to use.
	// The Azure Cloud environment API endpoints to use
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The size in bits for an RSA key.
	// The size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The Key Vault key to use for encryption and decryption.
	// The Key Vault key to use for encryption and decryption
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// The type of key to use.
	// The type of key to use
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Azure Key Vault resource's DNS Suffix to connect to.
	// The Azure Key Vault resource's DNS Suffix to connect to
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The tenant id for the Azure Active Directory organization.
	// The tenant id for the Azure Active Directory organization
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The Key Vault vault to use for encryption and decryption.
	// The Key Vault vault to use the encryption keys for encryption and decryption
	VaultName *string `json:"vaultName,omitempty" tf:"vault_name,omitempty"`
}

type AzureObservation struct {

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The client id for credentials to query the Azure APIs.
	// The client id for credentials to query the Azure APIs
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The client secret for credentials to query the Azure APIs.
	// The client secret for credentials to query the Azure APIs
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// The Azure Cloud environment API endpoints to use.
	// The Azure Cloud environment API endpoints to use
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The size in bits for an RSA key.
	// The size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The Key Vault key to use for encryption and decryption.
	// The Key Vault key to use for encryption and decryption
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// The type of key to use.
	// The type of key to use
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Azure Key Vault resource's DNS Suffix to connect to.
	// The Azure Key Vault resource's DNS Suffix to connect to
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The tenant id for the Azure Active Directory organization.
	// The tenant id for the Azure Active Directory organization
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// ID of the managed key read from Vault
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// The Key Vault vault to use for encryption and decryption.
	// The Key Vault vault to use the encryption keys for encryption and decryption
	VaultName *string `json:"vaultName,omitempty" tf:"vault_name,omitempty"`
}

type AzureParameters struct {

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	// +kubebuilder:validation:Optional
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	// +kubebuilder:validation:Optional
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	// +kubebuilder:validation:Optional
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	// +kubebuilder:validation:Optional
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The client id for credentials to query the Azure APIs.
	// The client id for credentials to query the Azure APIs
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// The client secret for credentials to query the Azure APIs.
	// The client secret for credentials to query the Azure APIs
	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret" tf:"client_secret,omitempty"`

	// The Azure Cloud environment API endpoints to use.
	// The Azure Cloud environment API endpoints to use
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The size in bits for an RSA key.
	// The size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true
	// +kubebuilder:validation:Optional
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The Key Vault key to use for encryption and decryption.
	// The Key Vault key to use for encryption and decryption
	// +kubebuilder:validation:Optional
	KeyName *string `json:"keyName" tf:"key_name,omitempty"`

	// The type of key to use.
	// The type of key to use
	// +kubebuilder:validation:Optional
	KeyType *string `json:"keyType" tf:"key_type,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The Azure Key Vault resource's DNS Suffix to connect to.
	// The Azure Key Vault resource's DNS Suffix to connect to
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The tenant id for the Azure Active Directory organization.
	// The tenant id for the Azure Active Directory organization
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`

	// The Key Vault vault to use for encryption and decryption.
	// The Key Vault vault to use the encryption keys for encryption and decryption
	// +kubebuilder:validation:Optional
	VaultName *string `json:"vaultName" tf:"vault_name,omitempty"`
}

type KeysInitParameters struct {

	// Configuration block for AWS Managed Keys
	Aws []AwsInitParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// Configuration block for Azure Managed Keys
	Azure []AzureInitParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Configuration block for PKCS Managed Keys
	Pkcs []PkcsInitParameters `json:"pkcs,omitempty" tf:"pkcs,omitempty"`
}

type KeysObservation struct {

	// Configuration block for AWS Managed Keys
	Aws []AwsObservation `json:"aws,omitempty" tf:"aws,omitempty"`

	// Configuration block for Azure Managed Keys
	Azure []AzureObservation `json:"azure,omitempty" tf:"azure,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Configuration block for PKCS Managed Keys
	Pkcs []PkcsObservation `json:"pkcs,omitempty" tf:"pkcs,omitempty"`
}

type KeysParameters struct {

	// Configuration block for AWS Managed Keys
	// +kubebuilder:validation:Optional
	Aws []AwsParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// Configuration block for Azure Managed Keys
	// +kubebuilder:validation:Optional
	Azure []AzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Configuration block for PKCS Managed Keys
	// +kubebuilder:validation:Optional
	Pkcs []PkcsParameters `json:"pkcs,omitempty" tf:"pkcs,omitempty"`
}

type PkcsInitParameters struct {

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The curve to use for an ECDSA key. Used when key_type
	// is ECDSA. Required if allow_generate_key is true.
	// Supplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Force all operations to open up a read-write session to
	// the HSM.
	// Force all operations to open up a read-write session to the HSM
	ForceRwSession *string `json:"forceRwSession,omitempty" tf:"force_rw_session,omitempty"`

	// The size in bits for an RSA key.
	// Supplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The id of a PKCS#11 key to use.
	// The id of a PKCS#11 key to use
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// The label of the key to use.
	// The label of the key to use
	KeyLabel *string `json:"keyLabel,omitempty" tf:"key_label,omitempty"`

	// The name of the kms_library stanza to use from Vault's config
	// to lookup the local library path.
	// The name of the kms_library stanza to use from Vault's config to lookup the local library path
	Library *string `json:"library,omitempty" tf:"library,omitempty"`

	// The encryption/decryption mechanism to use, specified as a
	// hexadecimal (prefixed by 0x) string.
	// The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The PIN for login.
	// The PIN for login
	Pin *string `json:"pin,omitempty" tf:"pin,omitempty"`

	// The slot number to use, specified as a string in a decimal format
	// (e.g. 2305843009213693953).
	// The slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')
	Slot *string `json:"slot,omitempty" tf:"slot,omitempty"`

	// The slot token label to use.
	// The slot token label to use
	TokenLabel *string `json:"tokenLabel,omitempty" tf:"token_label,omitempty"`
}

type PkcsObservation struct {

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The curve to use for an ECDSA key. Used when key_type
	// is ECDSA. Required if allow_generate_key is true.
	// Supplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Force all operations to open up a read-write session to
	// the HSM.
	// Force all operations to open up a read-write session to the HSM
	ForceRwSession *string `json:"forceRwSession,omitempty" tf:"force_rw_session,omitempty"`

	// The size in bits for an RSA key.
	// Supplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The id of a PKCS#11 key to use.
	// The id of a PKCS#11 key to use
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// The label of the key to use.
	// The label of the key to use
	KeyLabel *string `json:"keyLabel,omitempty" tf:"key_label,omitempty"`

	// The name of the kms_library stanza to use from Vault's config
	// to lookup the local library path.
	// The name of the kms_library stanza to use from Vault's config to lookup the local library path
	Library *string `json:"library,omitempty" tf:"library,omitempty"`

	// The encryption/decryption mechanism to use, specified as a
	// hexadecimal (prefixed by 0x) string.
	// The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The PIN for login.
	// The PIN for login
	Pin *string `json:"pin,omitempty" tf:"pin,omitempty"`

	// The slot number to use, specified as a string in a decimal format
	// (e.g. 2305843009213693953).
	// The slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')
	Slot *string `json:"slot,omitempty" tf:"slot,omitempty"`

	// The slot token label to use.
	// The slot token label to use
	TokenLabel *string `json:"tokenLabel,omitempty" tf:"token_label,omitempty"`

	// ID of the managed key read from Vault
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type PkcsParameters struct {

	// If no existing key can be found in
	// the referenced backend, instructs Vault to generate a key within the backend.
	// If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
	// +kubebuilder:validation:Optional
	AllowGenerateKey *bool `json:"allowGenerateKey,omitempty" tf:"allow_generate_key,omitempty"`

	// Controls the ability for Vault to replace through
	// generation or importing a key into the configured backend even
	// if a key is present, if set to false those operations are forbidden
	// if a key exists.
	// Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
	// +kubebuilder:validation:Optional
	AllowReplaceKey *bool `json:"allowReplaceKey,omitempty" tf:"allow_replace_key,omitempty"`

	// Controls the ability for Vault to import a key to the
	// configured backend, if false, those operations will be forbidden.
	// Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
	// +kubebuilder:validation:Optional
	AllowStoreKey *bool `json:"allowStoreKey,omitempty" tf:"allow_store_key,omitempty"`

	// If true, allows usage from any mount point within the
	// namespace.
	// Allow usage from any mount point within the namespace if 'true'
	// +kubebuilder:validation:Optional
	AnyMount *bool `json:"anyMount,omitempty" tf:"any_mount,omitempty"`

	// The curve to use for an ECDSA key. Used when key_type
	// is ECDSA. Required if allow_generate_key is true.
	// Supplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true
	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Force all operations to open up a read-write session to
	// the HSM.
	// Force all operations to open up a read-write session to the HSM
	// +kubebuilder:validation:Optional
	ForceRwSession *string `json:"forceRwSession,omitempty" tf:"force_rw_session,omitempty"`

	// The size in bits for an RSA key.
	// Supplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true
	// +kubebuilder:validation:Optional
	KeyBits *string `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// The id of a PKCS#11 key to use.
	// The id of a PKCS#11 key to use
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId" tf:"key_id,omitempty"`

	// The label of the key to use.
	// The label of the key to use
	// +kubebuilder:validation:Optional
	KeyLabel *string `json:"keyLabel" tf:"key_label,omitempty"`

	// The name of the kms_library stanza to use from Vault's config
	// to lookup the local library path.
	// The name of the kms_library stanza to use from Vault's config to lookup the local library path
	// +kubebuilder:validation:Optional
	Library *string `json:"library" tf:"library,omitempty"`

	// The encryption/decryption mechanism to use, specified as a
	// hexadecimal (prefixed by 0x) string.
	// The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.
	// +kubebuilder:validation:Optional
	Mechanism *string `json:"mechanism" tf:"mechanism,omitempty"`

	// A unique lowercase name that serves as identifying the key.
	// A unique lowercase name that serves as identifying the key
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The PIN for login.
	// The PIN for login
	// +kubebuilder:validation:Optional
	Pin *string `json:"pin" tf:"pin,omitempty"`

	// The slot number to use, specified as a string in a decimal format
	// (e.g. 2305843009213693953).
	// The slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')
	// +kubebuilder:validation:Optional
	Slot *string `json:"slot,omitempty" tf:"slot,omitempty"`

	// The slot token label to use.
	// The slot token label to use
	// +kubebuilder:validation:Optional
	TokenLabel *string `json:"tokenLabel,omitempty" tf:"token_label,omitempty"`
}

// KeysSpec defines the desired state of Keys
type KeysSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeysParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeysInitParameters `json:"initProvider,omitempty"`
}

// KeysStatus defines the observed state of Keys.
type KeysStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeysObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Keys is the Schema for the Keyss API. Configures Managed Keys in Vault
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Keys struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeysSpec   `json:"spec"`
	Status            KeysStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeysList contains a list of Keyss
type KeysList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Keys `json:"items"`
}

// Repository type metadata.
var (
	Keys_Kind             = "Keys"
	Keys_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Keys_Kind}.String()
	Keys_KindAPIVersion   = Keys_Kind + "." + CRDGroupVersion.String()
	Keys_GroupVersionKind = CRDGroupVersion.WithKind(Keys_Kind)
)

func init() {
	SchemeBuilder.Register(&Keys{}, &KeysList{})
}
