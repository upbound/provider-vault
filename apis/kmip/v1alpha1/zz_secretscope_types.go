/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretScopeInitParameters struct {

	// Boolean field to force deletion even if there are managed objects in the scope.
	// Force deletion even if there are managed objects in the scope
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to kmip.
	// Path where KMIP backend is mounted
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/kmip/v1alpha1.SecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Reference to a SecretBackend in kmip to populate path.
	// +kubebuilder:validation:Optional
	PathRef *v1.Reference `json:"pathRef,omitempty" tf:"-"`

	// Selector for a SecretBackend in kmip to populate path.
	// +kubebuilder:validation:Optional
	PathSelector *v1.Selector `json:"pathSelector,omitempty" tf:"-"`

	// Name of the scope.
	// Name of the scope
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type SecretScopeObservation struct {

	// Boolean field to force deletion even if there are managed objects in the scope.
	// Force deletion even if there are managed objects in the scope
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to kmip.
	// Path where KMIP backend is mounted
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Name of the scope.
	// Name of the scope
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type SecretScopeParameters struct {

	// Boolean field to force deletion even if there are managed objects in the scope.
	// Force deletion even if there are managed objects in the scope
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to kmip.
	// Path where KMIP backend is mounted
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/kmip/v1alpha1.SecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Reference to a SecretBackend in kmip to populate path.
	// +kubebuilder:validation:Optional
	PathRef *v1.Reference `json:"pathRef,omitempty" tf:"-"`

	// Selector for a SecretBackend in kmip to populate path.
	// +kubebuilder:validation:Optional
	PathSelector *v1.Selector `json:"pathSelector,omitempty" tf:"-"`

	// Name of the scope.
	// Name of the scope
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

// SecretScopeSpec defines the desired state of SecretScope
type SecretScopeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretScopeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretScopeInitParameters `json:"initProvider,omitempty"`
}

// SecretScopeStatus defines the observed state of SecretScope.
type SecretScopeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretScopeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretScope is the Schema for the SecretScopes API. Provision KMIP Secret scopes in Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretScope struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   SecretScopeSpec   `json:"spec"`
	Status SecretScopeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretScopeList contains a list of SecretScopes
type SecretScopeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretScope `json:"items"`
}

// Repository type metadata.
var (
	SecretScope_Kind             = "SecretScope"
	SecretScope_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretScope_Kind}.String()
	SecretScope_KindAPIVersion   = SecretScope_Kind + "." + CRDGroupVersion.String()
	SecretScope_GroupVersionKind = CRDGroupVersion.WithKind(SecretScope_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretScope{}, &SecretScopeList{})
}
