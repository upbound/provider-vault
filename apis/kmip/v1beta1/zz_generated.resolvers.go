/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this SecretRole.
func (mg *SecretRole) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Path),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.PathRef,
		Selector:     mg.Spec.ForProvider.PathSelector,
		To: reference.To{
			List:    &SecretScopeList{},
			Managed: &SecretScope{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Path")
	}
	mg.Spec.ForProvider.Path = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PathRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Scope),
		Extract:      resource.ExtractParamPath("scope", false),
		Reference:    mg.Spec.ForProvider.ScopeRef,
		Selector:     mg.Spec.ForProvider.ScopeSelector,
		To: reference.To{
			List:    &SecretScopeList{},
			Managed: &SecretScope{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Scope")
	}
	mg.Spec.ForProvider.Scope = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ScopeRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Path),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.PathRef,
		Selector:     mg.Spec.InitProvider.PathSelector,
		To: reference.To{
			List:    &SecretScopeList{},
			Managed: &SecretScope{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Path")
	}
	mg.Spec.InitProvider.Path = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PathRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Scope),
		Extract:      resource.ExtractParamPath("scope", false),
		Reference:    mg.Spec.InitProvider.ScopeRef,
		Selector:     mg.Spec.InitProvider.ScopeSelector,
		To: reference.To{
			List:    &SecretScopeList{},
			Managed: &SecretScope{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Scope")
	}
	mg.Spec.InitProvider.Scope = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ScopeRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecretScope.
func (mg *SecretScope) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Path),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.ForProvider.PathRef,
		Selector:     mg.Spec.ForProvider.PathSelector,
		To: reference.To{
			List:    &SecretBackendList{},
			Managed: &SecretBackend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Path")
	}
	mg.Spec.ForProvider.Path = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PathRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Path),
		Extract:      resource.ExtractParamPath("path", false),
		Reference:    mg.Spec.InitProvider.PathRef,
		Selector:     mg.Spec.InitProvider.PathSelector,
		To: reference.To{
			List:    &SecretBackendList{},
			Managed: &SecretBackend{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Path")
	}
	mg.Spec.InitProvider.Path = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PathRef = rsp.ResolvedReference

	return nil
}
