/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthBackendLoginInitParameters struct {

	// The unique path of the Vault backend to log in with.
	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The ID of the role to log in with.
	// The RoleID to log in with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/approle/v1alpha1.AuthBackendRole
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("role_id",false)
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Reference to a AuthBackendRole in approle to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDRef *v1.Reference `json:"roleIdRef,omitempty" tf:"-"`

	// Selector for a AuthBackendRole in approle to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDSelector *v1.Selector `json:"roleIdSelector,omitempty" tf:"-"`

	// The secret ID of the role to log in with. Required
	// unless bind_secret_id is set to false on the role.
	// The SecretID to log in with.
	SecretIDSecretRef *v1.SecretKeySelector `json:"secretIdSecretRef,omitempty" tf:"-"`
}

type AuthBackendLoginObservation struct {

	// The accessor for the token.
	// The accessor for the token.
	Accessor *string `json:"accessor,omitempty" tf:"accessor,omitempty"`

	// The unique path of the Vault backend to log in with.
	// Unique name of the auth backend to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// How long the token is valid for, in seconds.
	// How long the token is valid for.
	LeaseDuration *float64 `json:"leaseDuration,omitempty" tf:"lease_duration,omitempty"`

	// The date and time the lease started, in RFC 3339 format.
	LeaseStarted *string `json:"leaseStarted,omitempty" tf:"lease_started,omitempty"`

	// The metadata associated with the token.
	// Metadata associated with the token.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// A list of policies applied to the token.
	// Policies set on the token.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// Whether the token is renewable or not.
	// Whether the token is renewable or not.
	Renewable *bool `json:"renewable,omitempty" tf:"renewable,omitempty"`

	// The ID of the role to log in with.
	// The RoleID to log in with.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type AuthBackendLoginParameters struct {

	// The unique path of the Vault backend to log in with.
	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The ID of the role to log in with.
	// The RoleID to log in with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/approle/v1alpha1.AuthBackendRole
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("role_id",false)
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Reference to a AuthBackendRole in approle to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDRef *v1.Reference `json:"roleIdRef,omitempty" tf:"-"`

	// Selector for a AuthBackendRole in approle to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDSelector *v1.Selector `json:"roleIdSelector,omitempty" tf:"-"`

	// The secret ID of the role to log in with. Required
	// unless bind_secret_id is set to false on the role.
	// The SecretID to log in with.
	// +kubebuilder:validation:Optional
	SecretIDSecretRef *v1.SecretKeySelector `json:"secretIdSecretRef,omitempty" tf:"-"`
}

// AuthBackendLoginSpec defines the desired state of AuthBackendLogin
type AuthBackendLoginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthBackendLoginParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthBackendLoginInitParameters `json:"initProvider,omitempty"`
}

// AuthBackendLoginStatus defines the observed state of AuthBackendLogin.
type AuthBackendLoginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthBackendLoginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AuthBackendLogin is the Schema for the AuthBackendLogins API. Log into Vault using the AppRole auth backend.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type AuthBackendLogin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthBackendLoginSpec   `json:"spec"`
	Status            AuthBackendLoginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendLoginList contains a list of AuthBackendLogins
type AuthBackendLoginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthBackendLogin `json:"items"`
}

// Repository type metadata.
var (
	AuthBackendLogin_Kind             = "AuthBackendLogin"
	AuthBackendLogin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthBackendLogin_Kind}.String()
	AuthBackendLogin_KindAPIVersion   = AuthBackendLogin_Kind + "." + CRDGroupVersion.String()
	AuthBackendLogin_GroupVersionKind = CRDGroupVersion.WithKind(AuthBackendLogin_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthBackendLogin{}, &AuthBackendLoginList{})
}
