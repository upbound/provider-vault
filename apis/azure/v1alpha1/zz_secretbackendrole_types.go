/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureGroupsInitParameters struct {
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`
}

type AzureGroupsObservation struct {
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`
}

type AzureGroupsParameters struct {

	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName" tf:"group_name,omitempty"`
}

type AzureRolesInitParameters struct {
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type AzureRolesObservation struct {
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type AzureRolesParameters struct {

	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope" tf:"scope,omitempty"`
}

type SecretBackendRoleInitParameters struct {

	// Application Object ID for an existing service principal that will
	// be used instead of creating dynamic service principals. If present, azure_roles and permanently_delete will be ignored.
	// Application Object ID for an existing service principal that will be used instead of creating dynamic service principals.
	ApplicationObjectID *string `json:"applicationObjectId,omitempty" tf:"application_object_id,omitempty"`

	// List of Azure groups to be assigned to the generated service principal.
	AzureGroups []AzureGroupsInitParameters `json:"azureGroups,omitempty" tf:"azure_groups,omitempty"`

	// List of Azure roles to be assigned to the generated service principal.
	AzureRoles []AzureRolesInitParameters `json:"azureRoles,omitempty" tf:"azure_roles,omitempty"`

	// Path to the mounted Azure auth backend
	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/azure/v1alpha1.SecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a SecretBackend in azure to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a SecretBackend in azure to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// –  Specifies the maximum TTL for service principals generated using this role. Accepts time
	// suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine max TTL time.
	// Human-friendly description of the mount for the backend.
	MaxTTL *string `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Indicates whether the applications and service principals created by Vault will be permanently
	// deleted when the corresponding leases expire. Defaults to false. For Vault v1.12+.
	// Indicates whether the applications and service principals created by Vault will be permanently deleted when the corresponding leases expire.
	PermanentlyDelete *bool `json:"permanentlyDelete,omitempty" tf:"permanently_delete,omitempty"`

	// Name of the Azure role
	// Name of the role to create
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Specifies the security principal types that are allowed to sign in to the application.
	// Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount. Requires Vault 1.16+.
	// Specifies the security principal types that are allowed to sign in to the application. Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount
	SignInAudience *string `json:"signInAudience,omitempty" tf:"sign_in_audience,omitempty"`

	// –  Specifies the default TTL for service principals generated using this role.
	// Accepts time suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine default TTL time.
	// Human-friendly description of the mount for the backend.
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// - A list of Azure tags to attach to an application. Requires Vault 1.16+.
	// Comma-separated strings of Azure tags to attach to an application.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SecretBackendRoleObservation struct {

	// Application Object ID for an existing service principal that will
	// be used instead of creating dynamic service principals. If present, azure_roles and permanently_delete will be ignored.
	// Application Object ID for an existing service principal that will be used instead of creating dynamic service principals.
	ApplicationObjectID *string `json:"applicationObjectId,omitempty" tf:"application_object_id,omitempty"`

	// List of Azure groups to be assigned to the generated service principal.
	AzureGroups []AzureGroupsObservation `json:"azureGroups,omitempty" tf:"azure_groups,omitempty"`

	// List of Azure roles to be assigned to the generated service principal.
	AzureRoles []AzureRolesObservation `json:"azureRoles,omitempty" tf:"azure_roles,omitempty"`

	// Path to the mounted Azure auth backend
	// Unique name of the auth backend to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// –  Specifies the maximum TTL for service principals generated using this role. Accepts time
	// suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine max TTL time.
	// Human-friendly description of the mount for the backend.
	MaxTTL *string `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Indicates whether the applications and service principals created by Vault will be permanently
	// deleted when the corresponding leases expire. Defaults to false. For Vault v1.12+.
	// Indicates whether the applications and service principals created by Vault will be permanently deleted when the corresponding leases expire.
	PermanentlyDelete *bool `json:"permanentlyDelete,omitempty" tf:"permanently_delete,omitempty"`

	// Name of the Azure role
	// Name of the role to create
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Specifies the security principal types that are allowed to sign in to the application.
	// Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount. Requires Vault 1.16+.
	// Specifies the security principal types that are allowed to sign in to the application. Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount
	SignInAudience *string `json:"signInAudience,omitempty" tf:"sign_in_audience,omitempty"`

	// –  Specifies the default TTL for service principals generated using this role.
	// Accepts time suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine default TTL time.
	// Human-friendly description of the mount for the backend.
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// - A list of Azure tags to attach to an application. Requires Vault 1.16+.
	// Comma-separated strings of Azure tags to attach to an application.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SecretBackendRoleParameters struct {

	// Application Object ID for an existing service principal that will
	// be used instead of creating dynamic service principals. If present, azure_roles and permanently_delete will be ignored.
	// Application Object ID for an existing service principal that will be used instead of creating dynamic service principals.
	// +kubebuilder:validation:Optional
	ApplicationObjectID *string `json:"applicationObjectId,omitempty" tf:"application_object_id,omitempty"`

	// List of Azure groups to be assigned to the generated service principal.
	// +kubebuilder:validation:Optional
	AzureGroups []AzureGroupsParameters `json:"azureGroups,omitempty" tf:"azure_groups,omitempty"`

	// List of Azure roles to be assigned to the generated service principal.
	// +kubebuilder:validation:Optional
	AzureRoles []AzureRolesParameters `json:"azureRoles,omitempty" tf:"azure_roles,omitempty"`

	// Path to the mounted Azure auth backend
	// Unique name of the auth backend to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/azure/v1alpha1.SecretBackend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a SecretBackend in azure to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a SecretBackend in azure to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// –  Specifies the maximum TTL for service principals generated using this role. Accepts time
	// suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine max TTL time.
	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	MaxTTL *string `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Indicates whether the applications and service principals created by Vault will be permanently
	// deleted when the corresponding leases expire. Defaults to false. For Vault v1.12+.
	// Indicates whether the applications and service principals created by Vault will be permanently deleted when the corresponding leases expire.
	// +kubebuilder:validation:Optional
	PermanentlyDelete *bool `json:"permanentlyDelete,omitempty" tf:"permanently_delete,omitempty"`

	// Name of the Azure role
	// Name of the role to create
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Specifies the security principal types that are allowed to sign in to the application.
	// Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount. Requires Vault 1.16+.
	// Specifies the security principal types that are allowed to sign in to the application. Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount
	// +kubebuilder:validation:Optional
	SignInAudience *string `json:"signInAudience,omitempty" tf:"sign_in_audience,omitempty"`

	// –  Specifies the default TTL for service principals generated using this role.
	// Accepts time suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine default TTL time.
	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// - A list of Azure tags to attach to an application. Requires Vault 1.16+.
	// Comma-separated strings of Azure tags to attach to an application.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// SecretBackendRoleSpec defines the desired state of SecretBackendRole
type SecretBackendRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendRoleInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendRoleStatus defines the observed state of SecretBackendRole.
type SecretBackendRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackendRole is the Schema for the SecretBackendRoles API. Creates an azure secret backend role for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	Spec   SecretBackendRoleSpec   `json:"spec"`
	Status SecretBackendRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendRoleList contains a list of SecretBackendRoles
type SecretBackendRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendRole `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendRole_Kind             = "SecretBackendRole"
	SecretBackendRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendRole_Kind}.String()
	SecretBackendRole_KindAPIVersion   = SecretBackendRole_Kind + "." + CRDGroupVersion.String()
	SecretBackendRole_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendRole_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendRole{}, &SecretBackendRoleList{})
}
