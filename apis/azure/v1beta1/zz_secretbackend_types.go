/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendInitParameters struct {

	// The OAuth2 client id to connect to Azure.
	// The client id for credentials to query the Azure APIs. Currently read permissions to query compute resources are required.
	ClientIDSecretRef *v1.SecretKeySelector `json:"clientIdSecretRef,omitempty" tf:"-"`

	// The OAuth2 client secret to connect to Azure.
	// The client secret for credentials to query the Azure APIs
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// The Azure environment.
	// The Azure cloud environment. Valid values: AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud, AzureGermanCloud.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The audience claim value. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The audience claim value.
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing identity tokens. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Defaults to azure.
	// Path to mount the backend at.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The subscription id for the Azure Active Directory.
	// The subscription id for the Azure Active Directory.
	SubscriptionIDSecretRef v1.SecretKeySelector `json:"subscriptionIdSecretRef" tf:"-"`

	// The tenant id for the Azure Active Directory.
	// The tenant id for the Azure Active Directory organization.
	TenantIDSecretRef v1.SecretKeySelector `json:"tenantIdSecretRef" tf:"-"`

	// Indicates whether the secrets engine should use
	// the Microsoft Graph API. This parameter has been deprecated and will be ignored in vault-1.12+.
	// For more information, please refer to the Vault docs
	// Use the Microsoft Graph API. Should be set to true on vault-1.10+
	UseMicrosoftGraphAPI *bool `json:"useMicrosoftGraphApi,omitempty" tf:"use_microsoft_graph_api,omitempty"`
}

type SecretBackendObservation struct {

	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// The Azure environment.
	// The Azure cloud environment. Valid values: AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud, AzureGermanCloud.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The audience claim value. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The audience claim value.
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing identity tokens. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Defaults to azure.
	// Path to mount the backend at.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Indicates whether the secrets engine should use
	// the Microsoft Graph API. This parameter has been deprecated and will be ignored in vault-1.12+.
	// For more information, please refer to the Vault docs
	// Use the Microsoft Graph API. Should be set to true on vault-1.10+
	UseMicrosoftGraphAPI *bool `json:"useMicrosoftGraphApi,omitempty" tf:"use_microsoft_graph_api,omitempty"`
}

type SecretBackendParameters struct {

	// The OAuth2 client id to connect to Azure.
	// The client id for credentials to query the Azure APIs. Currently read permissions to query compute resources are required.
	// +kubebuilder:validation:Optional
	ClientIDSecretRef *v1.SecretKeySelector `json:"clientIdSecretRef,omitempty" tf:"-"`

	// The OAuth2 client secret to connect to Azure.
	// The client secret for credentials to query the Azure APIs
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	// +kubebuilder:validation:Optional
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// The Azure environment.
	// The Azure cloud environment. Valid values: AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud, AzureGermanCloud.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The audience claim value. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The audience claim value.
	// +kubebuilder:validation:Optional
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing identity tokens. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The key to use for signing identity tokens.
	// +kubebuilder:validation:Optional
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// Available only for Vault Enterprise
	// The TTL of generated identity tokens in seconds.
	// +kubebuilder:validation:Optional
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Defaults to azure.
	// Path to mount the backend at.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The subscription id for the Azure Active Directory.
	// The subscription id for the Azure Active Directory.
	// +kubebuilder:validation:Optional
	SubscriptionIDSecretRef v1.SecretKeySelector `json:"subscriptionIdSecretRef" tf:"-"`

	// The tenant id for the Azure Active Directory.
	// The tenant id for the Azure Active Directory organization.
	// +kubebuilder:validation:Optional
	TenantIDSecretRef v1.SecretKeySelector `json:"tenantIdSecretRef" tf:"-"`

	// Indicates whether the secrets engine should use
	// the Microsoft Graph API. This parameter has been deprecated and will be ignored in vault-1.12+.
	// For more information, please refer to the Vault docs
	// Use the Microsoft Graph API. Should be set to true on vault-1.10+
	// +kubebuilder:validation:Optional
	UseMicrosoftGraphAPI *bool `json:"useMicrosoftGraphApi,omitempty" tf:"use_microsoft_graph_api,omitempty"`
}

// SecretBackendSpec defines the desired state of SecretBackend
type SecretBackendSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendStatus defines the observed state of SecretBackend.
type SecretBackendStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackend is the Schema for the SecretBackends API. Creates an azure secret backend for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionIdSecretRef)",message="spec.forProvider.subscriptionIdSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tenantIdSecretRef)",message="spec.forProvider.tenantIdSecretRef is a required parameter"
	Spec   SecretBackendSpec   `json:"spec"`
	Status SecretBackendStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendList contains a list of SecretBackends
type SecretBackendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackend `json:"items"`
}

// Repository type metadata.
var (
	SecretBackend_Kind             = "SecretBackend"
	SecretBackend_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackend_Kind}.String()
	SecretBackend_KindAPIVersion   = SecretBackend_Kind + "." + CRDGroupVersion.String()
	SecretBackend_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackend_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackend{}, &SecretBackendList{})
}
