/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MountInitParameters struct {

	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	// +listType=set
	AllowedManagedKeys []*string `json:"allowedManagedKeys,omitempty" tf:"allowed_managed_keys,omitempty"`

	// List of headers to allow, allowing a plugin to include
	// them in the response.
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []*string `json:"allowedResponseHeaders,omitempty" tf:"allowed_response_headers,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHMACRequestKeys []*string `json:"auditNonHmacRequestKeys,omitempty" tf:"audit_non_hmac_request_keys,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHMACResponseKeys []*string `json:"auditNonHmacResponseKeys,omitempty" tf:"audit_non_hmac_response_keys,omitempty"`

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// List of allowed authentication mount accessors the
	// backend can request delegated authentication for.
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []*string `json:"delegatedAuthAccessors,omitempty" tf:"delegated_auth_accessors,omitempty"`

	// Human-friendly description of the mount
	// Human-friendly description of the mount
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `json:"externalEntropyAccess,omitempty" tf:"external_entropy_access,omitempty"`

	// The key to use for signing plugin workload identity tokens. If
	// not provided, this will default to Vault's OIDC default key.
	// The key to use for signing plugin workload identity tokens
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// Specifies whether to show this mount in the UI-specific
	// listing endpoint. Valid values are unauth or hidden. If not set, behaves like hidden.
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `json:"listingVisibility,omitempty" tf:"listing_visibility,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// List of headers to allow and pass from the request to
	// the plugin.
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []*string `json:"passthroughRequestHeaders,omitempty" tf:"passthrough_request_headers,omitempty"`

	// Where the secret backend will be mounted
	// Where the secret backend will be mounted
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the semantic version of the plugin to use, e.g. "v1.0.0".
	// If unspecified, the server will select any matching unversioned plugin that may have been
	// registered, the latest versioned plugin registered, or a built-in plugin in that order of precedence.
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `json:"pluginVersion,omitempty" tf:"plugin_version,omitempty"`

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `json:"sealWrap,omitempty" tf:"seal_wrap,omitempty"`

	// Type of the backend, such as "aws"
	// Type of the backend, such as 'aws'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MountObservation struct {

	// The accessor for this mount.
	// Accessor of the mount
	Accessor *string `json:"accessor,omitempty" tf:"accessor,omitempty"`

	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	// +listType=set
	AllowedManagedKeys []*string `json:"allowedManagedKeys,omitempty" tf:"allowed_managed_keys,omitempty"`

	// List of headers to allow, allowing a plugin to include
	// them in the response.
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []*string `json:"allowedResponseHeaders,omitempty" tf:"allowed_response_headers,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHMACRequestKeys []*string `json:"auditNonHmacRequestKeys,omitempty" tf:"audit_non_hmac_request_keys,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHMACResponseKeys []*string `json:"auditNonHmacResponseKeys,omitempty" tf:"audit_non_hmac_response_keys,omitempty"`

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// List of allowed authentication mount accessors the
	// backend can request delegated authentication for.
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []*string `json:"delegatedAuthAccessors,omitempty" tf:"delegated_auth_accessors,omitempty"`

	// Human-friendly description of the mount
	// Human-friendly description of the mount
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `json:"externalEntropyAccess,omitempty" tf:"external_entropy_access,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The key to use for signing plugin workload identity tokens. If
	// not provided, this will default to Vault's OIDC default key.
	// The key to use for signing plugin workload identity tokens
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// Specifies whether to show this mount in the UI-specific
	// listing endpoint. Valid values are unauth or hidden. If not set, behaves like hidden.
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `json:"listingVisibility,omitempty" tf:"listing_visibility,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// List of headers to allow and pass from the request to
	// the plugin.
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []*string `json:"passthroughRequestHeaders,omitempty" tf:"passthrough_request_headers,omitempty"`

	// Where the secret backend will be mounted
	// Where the secret backend will be mounted
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the semantic version of the plugin to use, e.g. "v1.0.0".
	// If unspecified, the server will select any matching unversioned plugin that may have been
	// registered, the latest versioned plugin registered, or a built-in plugin in that order of precedence.
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `json:"pluginVersion,omitempty" tf:"plugin_version,omitempty"`

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `json:"sealWrap,omitempty" tf:"seal_wrap,omitempty"`

	// Type of the backend, such as "aws"
	// Type of the backend, such as 'aws'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MountParameters struct {

	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedManagedKeys []*string `json:"allowedManagedKeys,omitempty" tf:"allowed_managed_keys,omitempty"`

	// List of headers to allow, allowing a plugin to include
	// them in the response.
	// List of headers to allow and pass from the request to the plugin
	// +kubebuilder:validation:Optional
	AllowedResponseHeaders []*string `json:"allowedResponseHeaders,omitempty" tf:"allowed_response_headers,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// +kubebuilder:validation:Optional
	AuditNonHMACRequestKeys []*string `json:"auditNonHmacRequestKeys,omitempty" tf:"audit_non_hmac_request_keys,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// +kubebuilder:validation:Optional
	AuditNonHMACResponseKeys []*string `json:"auditNonHmacResponseKeys,omitempty" tf:"audit_non_hmac_response_keys,omitempty"`

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for tokens and secrets in seconds
	// +kubebuilder:validation:Optional
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// List of allowed authentication mount accessors the
	// backend can request delegated authentication for.
	// List of headers to allow and pass from the request to the plugin
	// +kubebuilder:validation:Optional
	DelegatedAuthAccessors []*string `json:"delegatedAuthAccessors,omitempty" tf:"delegated_auth_accessors,omitempty"`

	// Human-friendly description of the mount
	// Human-friendly description of the mount
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	// +kubebuilder:validation:Optional
	ExternalEntropyAccess *bool `json:"externalEntropyAccess,omitempty" tf:"external_entropy_access,omitempty"`

	// The key to use for signing plugin workload identity tokens. If
	// not provided, this will default to Vault's OIDC default key.
	// The key to use for signing plugin workload identity tokens
	// +kubebuilder:validation:Optional
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// Specifies whether to show this mount in the UI-specific
	// listing endpoint. Valid values are unauth or hidden. If not set, behaves like hidden.
	// Specifies whether to show this mount in the UI-specific listing endpoint
	// +kubebuilder:validation:Optional
	ListingVisibility *string `json:"listingVisibility,omitempty" tf:"listing_visibility,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	// +kubebuilder:validation:Optional
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for tokens and secrets in seconds
	// +kubebuilder:validation:Optional
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// List of headers to allow and pass from the request to
	// the plugin.
	// List of headers to allow and pass from the request to the plugin
	// +kubebuilder:validation:Optional
	PassthroughRequestHeaders []*string `json:"passthroughRequestHeaders,omitempty" tf:"passthrough_request_headers,omitempty"`

	// Where the secret backend will be mounted
	// Where the secret backend will be mounted
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the semantic version of the plugin to use, e.g. "v1.0.0".
	// If unspecified, the server will select any matching unversioned plugin that may have been
	// registered, the latest versioned plugin registered, or a built-in plugin in that order of precedence.
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	// +kubebuilder:validation:Optional
	PluginVersion *string `json:"pluginVersion,omitempty" tf:"plugin_version,omitempty"`

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// +kubebuilder:validation:Optional
	SealWrap *bool `json:"sealWrap,omitempty" tf:"seal_wrap,omitempty"`

	// Type of the backend, such as "aws"
	// Type of the backend, such as 'aws'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// MountSpec defines the desired state of Mount
type MountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MountInitParameters `json:"initProvider,omitempty"`
}

// MountStatus defines the observed state of Mount.
type MountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Mount is the Schema for the Mounts API. Managing the mounting of secret backends in Vault
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Mount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || (has(self.initProvider) && has(self.initProvider.path))",message="spec.forProvider.path is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   MountSpec   `json:"spec"`
	Status MountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MountList contains a list of Mounts
type MountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Mount `json:"items"`
}

// Repository type metadata.
var (
	Mount_Kind             = "Mount"
	Mount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Mount_Kind}.String()
	Mount_KindAPIVersion   = Mount_Kind + "." + CRDGroupVersion.String()
	Mount_GroupVersionKind = CRDGroupVersion.WithKind(Mount_Kind)
)

func init() {
	SchemeBuilder.Register(&Mount{}, &MountList{})
}
