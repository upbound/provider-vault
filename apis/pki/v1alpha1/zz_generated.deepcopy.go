//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyIdentifierInitParameters) DeepCopyInto(out *PolicyIdentifierInitParameters) {
	*out = *in
	if in.Cps != nil {
		in, out := &in.Cps, &out.Cps
		*out = new(string)
		**out = **in
	}
	if in.Notice != nil {
		in, out := &in.Notice, &out.Notice
		*out = new(string)
		**out = **in
	}
	if in.Oid != nil {
		in, out := &in.Oid, &out.Oid
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyIdentifierInitParameters.
func (in *PolicyIdentifierInitParameters) DeepCopy() *PolicyIdentifierInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyIdentifierInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyIdentifierObservation) DeepCopyInto(out *PolicyIdentifierObservation) {
	*out = *in
	if in.Cps != nil {
		in, out := &in.Cps, &out.Cps
		*out = new(string)
		**out = **in
	}
	if in.Notice != nil {
		in, out := &in.Notice, &out.Notice
		*out = new(string)
		**out = **in
	}
	if in.Oid != nil {
		in, out := &in.Oid, &out.Oid
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyIdentifierObservation.
func (in *PolicyIdentifierObservation) DeepCopy() *PolicyIdentifierObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyIdentifierObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyIdentifierParameters) DeepCopyInto(out *PolicyIdentifierParameters) {
	*out = *in
	if in.Cps != nil {
		in, out := &in.Cps, &out.Cps
		*out = new(string)
		**out = **in
	}
	if in.Notice != nil {
		in, out := &in.Notice, &out.Notice
		*out = new(string)
		**out = **in
	}
	if in.Oid != nil {
		in, out := &in.Oid, &out.Oid
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyIdentifierParameters.
func (in *PolicyIdentifierParameters) DeepCopy() *PolicyIdentifierParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyIdentifierParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCert) DeepCopyInto(out *SecretBackendCert) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCert.
func (in *SecretBackendCert) DeepCopy() *SecretBackendCert {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCert)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendCert) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCertInitParameters) DeepCopyInto(out *SecretBackendCertInitParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.MinSecondsRemaining != nil {
		in, out := &in.MinSecondsRemaining, &out.MinSecondsRemaining
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Revoke != nil {
		in, out := &in.Revoke, &out.Revoke
		*out = new(bool)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserIds != nil {
		in, out := &in.UserIds, &out.UserIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCertInitParameters.
func (in *SecretBackendCertInitParameters) DeepCopy() *SecretBackendCertInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCertInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCertList) DeepCopyInto(out *SecretBackendCertList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendCert, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCertList.
func (in *SecretBackendCertList) DeepCopy() *SecretBackendCertList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCertList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendCertList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCertObservation) DeepCopyInto(out *SecretBackendCertObservation) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CAChain != nil {
		in, out := &in.CAChain, &out.CAChain
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Expiration != nil {
		in, out := &in.Expiration, &out.Expiration
		*out = new(float64)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.IssuingCA != nil {
		in, out := &in.IssuingCA, &out.IssuingCA
		*out = new(string)
		**out = **in
	}
	if in.MinSecondsRemaining != nil {
		in, out := &in.MinSecondsRemaining, &out.MinSecondsRemaining
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyType != nil {
		in, out := &in.PrivateKeyType, &out.PrivateKeyType
		*out = new(string)
		**out = **in
	}
	if in.RenewPending != nil {
		in, out := &in.RenewPending, &out.RenewPending
		*out = new(bool)
		**out = **in
	}
	if in.Revoke != nil {
		in, out := &in.Revoke, &out.Revoke
		*out = new(bool)
		**out = **in
	}
	if in.SerialNumber != nil {
		in, out := &in.SerialNumber, &out.SerialNumber
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserIds != nil {
		in, out := &in.UserIds, &out.UserIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCertObservation.
func (in *SecretBackendCertObservation) DeepCopy() *SecretBackendCertObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCertObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCertParameters) DeepCopyInto(out *SecretBackendCertParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.MinSecondsRemaining != nil {
		in, out := &in.MinSecondsRemaining, &out.MinSecondsRemaining
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Revoke != nil {
		in, out := &in.Revoke, &out.Revoke
		*out = new(bool)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserIds != nil {
		in, out := &in.UserIds, &out.UserIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCertParameters.
func (in *SecretBackendCertParameters) DeepCopy() *SecretBackendCertParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCertParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCertSpec) DeepCopyInto(out *SecretBackendCertSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCertSpec.
func (in *SecretBackendCertSpec) DeepCopy() *SecretBackendCertSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCertSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCertStatus) DeepCopyInto(out *SecretBackendCertStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCertStatus.
func (in *SecretBackendCertStatus) DeepCopy() *SecretBackendCertStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCertStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigCA) DeepCopyInto(out *SecretBackendConfigCA) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigCA.
func (in *SecretBackendConfigCA) DeepCopy() *SecretBackendConfigCA {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigCA)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConfigCA) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigCAInitParameters) DeepCopyInto(out *SecretBackendConfigCAInitParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigCAInitParameters.
func (in *SecretBackendConfigCAInitParameters) DeepCopy() *SecretBackendConfigCAInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigCAInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigCAList) DeepCopyInto(out *SecretBackendConfigCAList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendConfigCA, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigCAList.
func (in *SecretBackendConfigCAList) DeepCopy() *SecretBackendConfigCAList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigCAList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConfigCAList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigCAObservation) DeepCopyInto(out *SecretBackendConfigCAObservation) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigCAObservation.
func (in *SecretBackendConfigCAObservation) DeepCopy() *SecretBackendConfigCAObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigCAObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigCAParameters) DeepCopyInto(out *SecretBackendConfigCAParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	out.PemBundleSecretRef = in.PemBundleSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigCAParameters.
func (in *SecretBackendConfigCAParameters) DeepCopy() *SecretBackendConfigCAParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigCAParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigCASpec) DeepCopyInto(out *SecretBackendConfigCASpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigCASpec.
func (in *SecretBackendConfigCASpec) DeepCopy() *SecretBackendConfigCASpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigCASpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigCAStatus) DeepCopyInto(out *SecretBackendConfigCAStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigCAStatus.
func (in *SecretBackendConfigCAStatus) DeepCopy() *SecretBackendConfigCAStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigCAStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrls) DeepCopyInto(out *SecretBackendConfigUrls) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrls.
func (in *SecretBackendConfigUrls) DeepCopy() *SecretBackendConfigUrls {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrls)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConfigUrls) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsInitParameters) DeepCopyInto(out *SecretBackendConfigUrlsInitParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CrlDistributionPoints != nil {
		in, out := &in.CrlDistributionPoints, &out.CrlDistributionPoints
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuingCertificates != nil {
		in, out := &in.IssuingCertificates, &out.IssuingCertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OcspServers != nil {
		in, out := &in.OcspServers, &out.OcspServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsInitParameters.
func (in *SecretBackendConfigUrlsInitParameters) DeepCopy() *SecretBackendConfigUrlsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsList) DeepCopyInto(out *SecretBackendConfigUrlsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendConfigUrls, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsList.
func (in *SecretBackendConfigUrlsList) DeepCopy() *SecretBackendConfigUrlsList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConfigUrlsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsObservation) DeepCopyInto(out *SecretBackendConfigUrlsObservation) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CrlDistributionPoints != nil {
		in, out := &in.CrlDistributionPoints, &out.CrlDistributionPoints
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IssuingCertificates != nil {
		in, out := &in.IssuingCertificates, &out.IssuingCertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OcspServers != nil {
		in, out := &in.OcspServers, &out.OcspServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsObservation.
func (in *SecretBackendConfigUrlsObservation) DeepCopy() *SecretBackendConfigUrlsObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsParameters) DeepCopyInto(out *SecretBackendConfigUrlsParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CrlDistributionPoints != nil {
		in, out := &in.CrlDistributionPoints, &out.CrlDistributionPoints
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuingCertificates != nil {
		in, out := &in.IssuingCertificates, &out.IssuingCertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OcspServers != nil {
		in, out := &in.OcspServers, &out.OcspServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsParameters.
func (in *SecretBackendConfigUrlsParameters) DeepCopy() *SecretBackendConfigUrlsParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsSpec) DeepCopyInto(out *SecretBackendConfigUrlsSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsSpec.
func (in *SecretBackendConfigUrlsSpec) DeepCopy() *SecretBackendConfigUrlsSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsStatus) DeepCopyInto(out *SecretBackendConfigUrlsStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsStatus.
func (in *SecretBackendConfigUrlsStatus) DeepCopy() *SecretBackendConfigUrlsStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCrlConfig) DeepCopyInto(out *SecretBackendCrlConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCrlConfig.
func (in *SecretBackendCrlConfig) DeepCopy() *SecretBackendCrlConfig {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCrlConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendCrlConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCrlConfigInitParameters) DeepCopyInto(out *SecretBackendCrlConfigInitParameters) {
	*out = *in
	if in.AutoRebuild != nil {
		in, out := &in.AutoRebuild, &out.AutoRebuild
		*out = new(bool)
		**out = **in
	}
	if in.AutoRebuildGracePeriod != nil {
		in, out := &in.AutoRebuildGracePeriod, &out.AutoRebuildGracePeriod
		*out = new(string)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CrossClusterRevocation != nil {
		in, out := &in.CrossClusterRevocation, &out.CrossClusterRevocation
		*out = new(bool)
		**out = **in
	}
	if in.DeltaRebuildInterval != nil {
		in, out := &in.DeltaRebuildInterval, &out.DeltaRebuildInterval
		*out = new(string)
		**out = **in
	}
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.EnableDelta != nil {
		in, out := &in.EnableDelta, &out.EnableDelta
		*out = new(bool)
		**out = **in
	}
	if in.Expiry != nil {
		in, out := &in.Expiry, &out.Expiry
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OcspDisable != nil {
		in, out := &in.OcspDisable, &out.OcspDisable
		*out = new(bool)
		**out = **in
	}
	if in.OcspExpiry != nil {
		in, out := &in.OcspExpiry, &out.OcspExpiry
		*out = new(string)
		**out = **in
	}
	if in.UnifiedCrl != nil {
		in, out := &in.UnifiedCrl, &out.UnifiedCrl
		*out = new(bool)
		**out = **in
	}
	if in.UnifiedCrlOnExistingPaths != nil {
		in, out := &in.UnifiedCrlOnExistingPaths, &out.UnifiedCrlOnExistingPaths
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCrlConfigInitParameters.
func (in *SecretBackendCrlConfigInitParameters) DeepCopy() *SecretBackendCrlConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCrlConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCrlConfigList) DeepCopyInto(out *SecretBackendCrlConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendCrlConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCrlConfigList.
func (in *SecretBackendCrlConfigList) DeepCopy() *SecretBackendCrlConfigList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCrlConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendCrlConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCrlConfigObservation) DeepCopyInto(out *SecretBackendCrlConfigObservation) {
	*out = *in
	if in.AutoRebuild != nil {
		in, out := &in.AutoRebuild, &out.AutoRebuild
		*out = new(bool)
		**out = **in
	}
	if in.AutoRebuildGracePeriod != nil {
		in, out := &in.AutoRebuildGracePeriod, &out.AutoRebuildGracePeriod
		*out = new(string)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CrossClusterRevocation != nil {
		in, out := &in.CrossClusterRevocation, &out.CrossClusterRevocation
		*out = new(bool)
		**out = **in
	}
	if in.DeltaRebuildInterval != nil {
		in, out := &in.DeltaRebuildInterval, &out.DeltaRebuildInterval
		*out = new(string)
		**out = **in
	}
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.EnableDelta != nil {
		in, out := &in.EnableDelta, &out.EnableDelta
		*out = new(bool)
		**out = **in
	}
	if in.Expiry != nil {
		in, out := &in.Expiry, &out.Expiry
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OcspDisable != nil {
		in, out := &in.OcspDisable, &out.OcspDisable
		*out = new(bool)
		**out = **in
	}
	if in.OcspExpiry != nil {
		in, out := &in.OcspExpiry, &out.OcspExpiry
		*out = new(string)
		**out = **in
	}
	if in.UnifiedCrl != nil {
		in, out := &in.UnifiedCrl, &out.UnifiedCrl
		*out = new(bool)
		**out = **in
	}
	if in.UnifiedCrlOnExistingPaths != nil {
		in, out := &in.UnifiedCrlOnExistingPaths, &out.UnifiedCrlOnExistingPaths
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCrlConfigObservation.
func (in *SecretBackendCrlConfigObservation) DeepCopy() *SecretBackendCrlConfigObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCrlConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCrlConfigParameters) DeepCopyInto(out *SecretBackendCrlConfigParameters) {
	*out = *in
	if in.AutoRebuild != nil {
		in, out := &in.AutoRebuild, &out.AutoRebuild
		*out = new(bool)
		**out = **in
	}
	if in.AutoRebuildGracePeriod != nil {
		in, out := &in.AutoRebuildGracePeriod, &out.AutoRebuildGracePeriod
		*out = new(string)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CrossClusterRevocation != nil {
		in, out := &in.CrossClusterRevocation, &out.CrossClusterRevocation
		*out = new(bool)
		**out = **in
	}
	if in.DeltaRebuildInterval != nil {
		in, out := &in.DeltaRebuildInterval, &out.DeltaRebuildInterval
		*out = new(string)
		**out = **in
	}
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.EnableDelta != nil {
		in, out := &in.EnableDelta, &out.EnableDelta
		*out = new(bool)
		**out = **in
	}
	if in.Expiry != nil {
		in, out := &in.Expiry, &out.Expiry
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OcspDisable != nil {
		in, out := &in.OcspDisable, &out.OcspDisable
		*out = new(bool)
		**out = **in
	}
	if in.OcspExpiry != nil {
		in, out := &in.OcspExpiry, &out.OcspExpiry
		*out = new(string)
		**out = **in
	}
	if in.UnifiedCrl != nil {
		in, out := &in.UnifiedCrl, &out.UnifiedCrl
		*out = new(bool)
		**out = **in
	}
	if in.UnifiedCrlOnExistingPaths != nil {
		in, out := &in.UnifiedCrlOnExistingPaths, &out.UnifiedCrlOnExistingPaths
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCrlConfigParameters.
func (in *SecretBackendCrlConfigParameters) DeepCopy() *SecretBackendCrlConfigParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCrlConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCrlConfigSpec) DeepCopyInto(out *SecretBackendCrlConfigSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCrlConfigSpec.
func (in *SecretBackendCrlConfigSpec) DeepCopy() *SecretBackendCrlConfigSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCrlConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendCrlConfigStatus) DeepCopyInto(out *SecretBackendCrlConfigStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendCrlConfigStatus.
func (in *SecretBackendCrlConfigStatus) DeepCopy() *SecretBackendCrlConfigStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendCrlConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateCertRequest) DeepCopyInto(out *SecretBackendIntermediateCertRequest) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateCertRequest.
func (in *SecretBackendIntermediateCertRequest) DeepCopy() *SecretBackendIntermediateCertRequest {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateCertRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendIntermediateCertRequest) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateCertRequestInitParameters) DeepCopyInto(out *SecretBackendIntermediateCertRequestInitParameters) {
	*out = *in
	if in.AddBasicConstraints != nil {
		in, out := &in.AddBasicConstraints, &out.AddBasicConstraints
		*out = new(bool)
		**out = **in
	}
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyRef != nil {
		in, out := &in.KeyRef, &out.KeyRef
		*out = new(string)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyID != nil {
		in, out := &in.ManagedKeyID, &out.ManagedKeyID
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyName != nil {
		in, out := &in.ManagedKeyName, &out.ManagedKeyName
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateCertRequestInitParameters.
func (in *SecretBackendIntermediateCertRequestInitParameters) DeepCopy() *SecretBackendIntermediateCertRequestInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateCertRequestInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateCertRequestList) DeepCopyInto(out *SecretBackendIntermediateCertRequestList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendIntermediateCertRequest, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateCertRequestList.
func (in *SecretBackendIntermediateCertRequestList) DeepCopy() *SecretBackendIntermediateCertRequestList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateCertRequestList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendIntermediateCertRequestList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateCertRequestObservation) DeepCopyInto(out *SecretBackendIntermediateCertRequestObservation) {
	*out = *in
	if in.AddBasicConstraints != nil {
		in, out := &in.AddBasicConstraints, &out.AddBasicConstraints
		*out = new(bool)
		**out = **in
	}
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Csr != nil {
		in, out := &in.Csr, &out.Csr
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyID != nil {
		in, out := &in.KeyID, &out.KeyID
		*out = new(string)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyRef != nil {
		in, out := &in.KeyRef, &out.KeyRef
		*out = new(string)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyID != nil {
		in, out := &in.ManagedKeyID, &out.ManagedKeyID
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyName != nil {
		in, out := &in.ManagedKeyName, &out.ManagedKeyName
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyType != nil {
		in, out := &in.PrivateKeyType, &out.PrivateKeyType
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateCertRequestObservation.
func (in *SecretBackendIntermediateCertRequestObservation) DeepCopy() *SecretBackendIntermediateCertRequestObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateCertRequestObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateCertRequestParameters) DeepCopyInto(out *SecretBackendIntermediateCertRequestParameters) {
	*out = *in
	if in.AddBasicConstraints != nil {
		in, out := &in.AddBasicConstraints, &out.AddBasicConstraints
		*out = new(bool)
		**out = **in
	}
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyRef != nil {
		in, out := &in.KeyRef, &out.KeyRef
		*out = new(string)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyID != nil {
		in, out := &in.ManagedKeyID, &out.ManagedKeyID
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyName != nil {
		in, out := &in.ManagedKeyName, &out.ManagedKeyName
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateCertRequestParameters.
func (in *SecretBackendIntermediateCertRequestParameters) DeepCopy() *SecretBackendIntermediateCertRequestParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateCertRequestParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateCertRequestSpec) DeepCopyInto(out *SecretBackendIntermediateCertRequestSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateCertRequestSpec.
func (in *SecretBackendIntermediateCertRequestSpec) DeepCopy() *SecretBackendIntermediateCertRequestSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateCertRequestSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateCertRequestStatus) DeepCopyInto(out *SecretBackendIntermediateCertRequestStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateCertRequestStatus.
func (in *SecretBackendIntermediateCertRequestStatus) DeepCopy() *SecretBackendIntermediateCertRequestStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateCertRequestStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateSetSigned) DeepCopyInto(out *SecretBackendIntermediateSetSigned) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateSetSigned.
func (in *SecretBackendIntermediateSetSigned) DeepCopy() *SecretBackendIntermediateSetSigned {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateSetSigned)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendIntermediateSetSigned) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateSetSignedInitParameters) DeepCopyInto(out *SecretBackendIntermediateSetSignedInitParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateSetSignedInitParameters.
func (in *SecretBackendIntermediateSetSignedInitParameters) DeepCopy() *SecretBackendIntermediateSetSignedInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateSetSignedInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateSetSignedList) DeepCopyInto(out *SecretBackendIntermediateSetSignedList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendIntermediateSetSigned, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateSetSignedList.
func (in *SecretBackendIntermediateSetSignedList) DeepCopy() *SecretBackendIntermediateSetSignedList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateSetSignedList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendIntermediateSetSignedList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateSetSignedObservation) DeepCopyInto(out *SecretBackendIntermediateSetSignedObservation) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImportedIssuers != nil {
		in, out := &in.ImportedIssuers, &out.ImportedIssuers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ImportedKeys != nil {
		in, out := &in.ImportedKeys, &out.ImportedKeys
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateSetSignedObservation.
func (in *SecretBackendIntermediateSetSignedObservation) DeepCopy() *SecretBackendIntermediateSetSignedObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateSetSignedObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateSetSignedParameters) DeepCopyInto(out *SecretBackendIntermediateSetSignedParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateSetSignedParameters.
func (in *SecretBackendIntermediateSetSignedParameters) DeepCopy() *SecretBackendIntermediateSetSignedParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateSetSignedParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateSetSignedSpec) DeepCopyInto(out *SecretBackendIntermediateSetSignedSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateSetSignedSpec.
func (in *SecretBackendIntermediateSetSignedSpec) DeepCopy() *SecretBackendIntermediateSetSignedSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateSetSignedSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendIntermediateSetSignedStatus) DeepCopyInto(out *SecretBackendIntermediateSetSignedStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendIntermediateSetSignedStatus.
func (in *SecretBackendIntermediateSetSignedStatus) DeepCopy() *SecretBackendIntermediateSetSignedStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendIntermediateSetSignedStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRole) DeepCopyInto(out *SecretBackendRole) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRole.
func (in *SecretBackendRole) DeepCopy() *SecretBackendRole {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRole)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRole) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleInitParameters) DeepCopyInto(out *SecretBackendRoleInitParameters) {
	*out = *in
	if in.AllowAnyName != nil {
		in, out := &in.AllowAnyName, &out.AllowAnyName
		*out = new(bool)
		**out = **in
	}
	if in.AllowBareDomains != nil {
		in, out := &in.AllowBareDomains, &out.AllowBareDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowGlobDomains != nil {
		in, out := &in.AllowGlobDomains, &out.AllowGlobDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowIPSans != nil {
		in, out := &in.AllowIPSans, &out.AllowIPSans
		*out = new(bool)
		**out = **in
	}
	if in.AllowLocalhost != nil {
		in, out := &in.AllowLocalhost, &out.AllowLocalhost
		*out = new(bool)
		**out = **in
	}
	if in.AllowSubdomains != nil {
		in, out := &in.AllowSubdomains, &out.AllowSubdomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowWildcardCertificates != nil {
		in, out := &in.AllowWildcardCertificates, &out.AllowWildcardCertificates
		*out = new(bool)
		**out = **in
	}
	if in.AllowedDomains != nil {
		in, out := &in.AllowedDomains, &out.AllowedDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedDomainsTemplate != nil {
		in, out := &in.AllowedDomainsTemplate, &out.AllowedDomainsTemplate
		*out = new(bool)
		**out = **in
	}
	if in.AllowedOtherSans != nil {
		in, out := &in.AllowedOtherSans, &out.AllowedOtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedSerialNumbers != nil {
		in, out := &in.AllowedSerialNumbers, &out.AllowedSerialNumbers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedURISans != nil {
		in, out := &in.AllowedURISans, &out.AllowedURISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedURISansTemplate != nil {
		in, out := &in.AllowedURISansTemplate, &out.AllowedURISansTemplate
		*out = new(bool)
		**out = **in
	}
	if in.AllowedUserIds != nil {
		in, out := &in.AllowedUserIds, &out.AllowedUserIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BasicConstraintsValidForNonCA != nil {
		in, out := &in.BasicConstraintsValidForNonCA, &out.BasicConstraintsValidForNonCA
		*out = new(bool)
		**out = **in
	}
	if in.ClientFlag != nil {
		in, out := &in.ClientFlag, &out.ClientFlag
		*out = new(bool)
		**out = **in
	}
	if in.CodeSigningFlag != nil {
		in, out := &in.CodeSigningFlag, &out.CodeSigningFlag
		*out = new(bool)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EmailProtectionFlag != nil {
		in, out := &in.EmailProtectionFlag, &out.EmailProtectionFlag
		*out = new(bool)
		**out = **in
	}
	if in.EnforceHostnames != nil {
		in, out := &in.EnforceHostnames, &out.EnforceHostnames
		*out = new(bool)
		**out = **in
	}
	if in.ExtKeyUsage != nil {
		in, out := &in.ExtKeyUsage, &out.ExtKeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ExtKeyUsageOids != nil {
		in, out := &in.ExtKeyUsageOids, &out.ExtKeyUsageOids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GenerateLease != nil {
		in, out := &in.GenerateLease, &out.GenerateLease
		*out = new(bool)
		**out = **in
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.KeyUsage != nil {
		in, out := &in.KeyUsage, &out.KeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.NoStore != nil {
		in, out := &in.NoStore, &out.NoStore
		*out = new(bool)
		**out = **in
	}
	if in.NotBeforeDuration != nil {
		in, out := &in.NotBeforeDuration, &out.NotBeforeDuration
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PolicyIdentifier != nil {
		in, out := &in.PolicyIdentifier, &out.PolicyIdentifier
		*out = make([]PolicyIdentifierInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PolicyIdentifiers != nil {
		in, out := &in.PolicyIdentifiers, &out.PolicyIdentifiers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireCn != nil {
		in, out := &in.RequireCn, &out.RequireCn
		*out = new(bool)
		**out = **in
	}
	if in.ServerFlag != nil {
		in, out := &in.ServerFlag, &out.ServerFlag
		*out = new(bool)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.UseCsrCommonName != nil {
		in, out := &in.UseCsrCommonName, &out.UseCsrCommonName
		*out = new(bool)
		**out = **in
	}
	if in.UseCsrSans != nil {
		in, out := &in.UseCsrSans, &out.UseCsrSans
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleInitParameters.
func (in *SecretBackendRoleInitParameters) DeepCopy() *SecretBackendRoleInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleList) DeepCopyInto(out *SecretBackendRoleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendRole, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleList.
func (in *SecretBackendRoleList) DeepCopy() *SecretBackendRoleList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRoleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleObservation) DeepCopyInto(out *SecretBackendRoleObservation) {
	*out = *in
	if in.AllowAnyName != nil {
		in, out := &in.AllowAnyName, &out.AllowAnyName
		*out = new(bool)
		**out = **in
	}
	if in.AllowBareDomains != nil {
		in, out := &in.AllowBareDomains, &out.AllowBareDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowGlobDomains != nil {
		in, out := &in.AllowGlobDomains, &out.AllowGlobDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowIPSans != nil {
		in, out := &in.AllowIPSans, &out.AllowIPSans
		*out = new(bool)
		**out = **in
	}
	if in.AllowLocalhost != nil {
		in, out := &in.AllowLocalhost, &out.AllowLocalhost
		*out = new(bool)
		**out = **in
	}
	if in.AllowSubdomains != nil {
		in, out := &in.AllowSubdomains, &out.AllowSubdomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowWildcardCertificates != nil {
		in, out := &in.AllowWildcardCertificates, &out.AllowWildcardCertificates
		*out = new(bool)
		**out = **in
	}
	if in.AllowedDomains != nil {
		in, out := &in.AllowedDomains, &out.AllowedDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedDomainsTemplate != nil {
		in, out := &in.AllowedDomainsTemplate, &out.AllowedDomainsTemplate
		*out = new(bool)
		**out = **in
	}
	if in.AllowedOtherSans != nil {
		in, out := &in.AllowedOtherSans, &out.AllowedOtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedSerialNumbers != nil {
		in, out := &in.AllowedSerialNumbers, &out.AllowedSerialNumbers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedURISans != nil {
		in, out := &in.AllowedURISans, &out.AllowedURISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedURISansTemplate != nil {
		in, out := &in.AllowedURISansTemplate, &out.AllowedURISansTemplate
		*out = new(bool)
		**out = **in
	}
	if in.AllowedUserIds != nil {
		in, out := &in.AllowedUserIds, &out.AllowedUserIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BasicConstraintsValidForNonCA != nil {
		in, out := &in.BasicConstraintsValidForNonCA, &out.BasicConstraintsValidForNonCA
		*out = new(bool)
		**out = **in
	}
	if in.ClientFlag != nil {
		in, out := &in.ClientFlag, &out.ClientFlag
		*out = new(bool)
		**out = **in
	}
	if in.CodeSigningFlag != nil {
		in, out := &in.CodeSigningFlag, &out.CodeSigningFlag
		*out = new(bool)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EmailProtectionFlag != nil {
		in, out := &in.EmailProtectionFlag, &out.EmailProtectionFlag
		*out = new(bool)
		**out = **in
	}
	if in.EnforceHostnames != nil {
		in, out := &in.EnforceHostnames, &out.EnforceHostnames
		*out = new(bool)
		**out = **in
	}
	if in.ExtKeyUsage != nil {
		in, out := &in.ExtKeyUsage, &out.ExtKeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ExtKeyUsageOids != nil {
		in, out := &in.ExtKeyUsageOids, &out.ExtKeyUsageOids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GenerateLease != nil {
		in, out := &in.GenerateLease, &out.GenerateLease
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.KeyUsage != nil {
		in, out := &in.KeyUsage, &out.KeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.NoStore != nil {
		in, out := &in.NoStore, &out.NoStore
		*out = new(bool)
		**out = **in
	}
	if in.NotBeforeDuration != nil {
		in, out := &in.NotBeforeDuration, &out.NotBeforeDuration
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PolicyIdentifier != nil {
		in, out := &in.PolicyIdentifier, &out.PolicyIdentifier
		*out = make([]PolicyIdentifierObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PolicyIdentifiers != nil {
		in, out := &in.PolicyIdentifiers, &out.PolicyIdentifiers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireCn != nil {
		in, out := &in.RequireCn, &out.RequireCn
		*out = new(bool)
		**out = **in
	}
	if in.ServerFlag != nil {
		in, out := &in.ServerFlag, &out.ServerFlag
		*out = new(bool)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.UseCsrCommonName != nil {
		in, out := &in.UseCsrCommonName, &out.UseCsrCommonName
		*out = new(bool)
		**out = **in
	}
	if in.UseCsrSans != nil {
		in, out := &in.UseCsrSans, &out.UseCsrSans
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleObservation.
func (in *SecretBackendRoleObservation) DeepCopy() *SecretBackendRoleObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleParameters) DeepCopyInto(out *SecretBackendRoleParameters) {
	*out = *in
	if in.AllowAnyName != nil {
		in, out := &in.AllowAnyName, &out.AllowAnyName
		*out = new(bool)
		**out = **in
	}
	if in.AllowBareDomains != nil {
		in, out := &in.AllowBareDomains, &out.AllowBareDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowGlobDomains != nil {
		in, out := &in.AllowGlobDomains, &out.AllowGlobDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowIPSans != nil {
		in, out := &in.AllowIPSans, &out.AllowIPSans
		*out = new(bool)
		**out = **in
	}
	if in.AllowLocalhost != nil {
		in, out := &in.AllowLocalhost, &out.AllowLocalhost
		*out = new(bool)
		**out = **in
	}
	if in.AllowSubdomains != nil {
		in, out := &in.AllowSubdomains, &out.AllowSubdomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowWildcardCertificates != nil {
		in, out := &in.AllowWildcardCertificates, &out.AllowWildcardCertificates
		*out = new(bool)
		**out = **in
	}
	if in.AllowedDomains != nil {
		in, out := &in.AllowedDomains, &out.AllowedDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedDomainsTemplate != nil {
		in, out := &in.AllowedDomainsTemplate, &out.AllowedDomainsTemplate
		*out = new(bool)
		**out = **in
	}
	if in.AllowedOtherSans != nil {
		in, out := &in.AllowedOtherSans, &out.AllowedOtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedSerialNumbers != nil {
		in, out := &in.AllowedSerialNumbers, &out.AllowedSerialNumbers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedURISans != nil {
		in, out := &in.AllowedURISans, &out.AllowedURISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedURISansTemplate != nil {
		in, out := &in.AllowedURISansTemplate, &out.AllowedURISansTemplate
		*out = new(bool)
		**out = **in
	}
	if in.AllowedUserIds != nil {
		in, out := &in.AllowedUserIds, &out.AllowedUserIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BasicConstraintsValidForNonCA != nil {
		in, out := &in.BasicConstraintsValidForNonCA, &out.BasicConstraintsValidForNonCA
		*out = new(bool)
		**out = **in
	}
	if in.ClientFlag != nil {
		in, out := &in.ClientFlag, &out.ClientFlag
		*out = new(bool)
		**out = **in
	}
	if in.CodeSigningFlag != nil {
		in, out := &in.CodeSigningFlag, &out.CodeSigningFlag
		*out = new(bool)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EmailProtectionFlag != nil {
		in, out := &in.EmailProtectionFlag, &out.EmailProtectionFlag
		*out = new(bool)
		**out = **in
	}
	if in.EnforceHostnames != nil {
		in, out := &in.EnforceHostnames, &out.EnforceHostnames
		*out = new(bool)
		**out = **in
	}
	if in.ExtKeyUsage != nil {
		in, out := &in.ExtKeyUsage, &out.ExtKeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ExtKeyUsageOids != nil {
		in, out := &in.ExtKeyUsageOids, &out.ExtKeyUsageOids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GenerateLease != nil {
		in, out := &in.GenerateLease, &out.GenerateLease
		*out = new(bool)
		**out = **in
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.KeyUsage != nil {
		in, out := &in.KeyUsage, &out.KeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.NoStore != nil {
		in, out := &in.NoStore, &out.NoStore
		*out = new(bool)
		**out = **in
	}
	if in.NotBeforeDuration != nil {
		in, out := &in.NotBeforeDuration, &out.NotBeforeDuration
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PolicyIdentifier != nil {
		in, out := &in.PolicyIdentifier, &out.PolicyIdentifier
		*out = make([]PolicyIdentifierParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PolicyIdentifiers != nil {
		in, out := &in.PolicyIdentifiers, &out.PolicyIdentifiers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireCn != nil {
		in, out := &in.RequireCn, &out.RequireCn
		*out = new(bool)
		**out = **in
	}
	if in.ServerFlag != nil {
		in, out := &in.ServerFlag, &out.ServerFlag
		*out = new(bool)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.UseCsrCommonName != nil {
		in, out := &in.UseCsrCommonName, &out.UseCsrCommonName
		*out = new(bool)
		**out = **in
	}
	if in.UseCsrSans != nil {
		in, out := &in.UseCsrSans, &out.UseCsrSans
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleParameters.
func (in *SecretBackendRoleParameters) DeepCopy() *SecretBackendRoleParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleSpec) DeepCopyInto(out *SecretBackendRoleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleSpec.
func (in *SecretBackendRoleSpec) DeepCopy() *SecretBackendRoleSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleStatus) DeepCopyInto(out *SecretBackendRoleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleStatus.
func (in *SecretBackendRoleStatus) DeepCopy() *SecretBackendRoleStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCert) DeepCopyInto(out *SecretBackendRootCert) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCert.
func (in *SecretBackendRootCert) DeepCopy() *SecretBackendRootCert {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCert)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRootCert) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertInitParameters) DeepCopyInto(out *SecretBackendRootCertInitParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerName != nil {
		in, out := &in.IssuerName, &out.IssuerName
		*out = new(string)
		**out = **in
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyRef != nil {
		in, out := &in.KeyRef, &out.KeyRef
		*out = new(string)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyID != nil {
		in, out := &in.ManagedKeyID, &out.ManagedKeyID
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyName != nil {
		in, out := &in.ManagedKeyName, &out.ManagedKeyName
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PermittedDNSDomains != nil {
		in, out := &in.PermittedDNSDomains, &out.PermittedDNSDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertInitParameters.
func (in *SecretBackendRootCertInitParameters) DeepCopy() *SecretBackendRootCertInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertList) DeepCopyInto(out *SecretBackendRootCertList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendRootCert, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertList.
func (in *SecretBackendRootCertList) DeepCopy() *SecretBackendRootCertList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRootCertList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertObservation) DeepCopyInto(out *SecretBackendRootCertObservation) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerID != nil {
		in, out := &in.IssuerID, &out.IssuerID
		*out = new(string)
		**out = **in
	}
	if in.IssuerName != nil {
		in, out := &in.IssuerName, &out.IssuerName
		*out = new(string)
		**out = **in
	}
	if in.IssuingCA != nil {
		in, out := &in.IssuingCA, &out.IssuingCA
		*out = new(string)
		**out = **in
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyID != nil {
		in, out := &in.KeyID, &out.KeyID
		*out = new(string)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyRef != nil {
		in, out := &in.KeyRef, &out.KeyRef
		*out = new(string)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyID != nil {
		in, out := &in.ManagedKeyID, &out.ManagedKeyID
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyName != nil {
		in, out := &in.ManagedKeyName, &out.ManagedKeyName
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PermittedDNSDomains != nil {
		in, out := &in.PermittedDNSDomains, &out.PermittedDNSDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.Serial != nil {
		in, out := &in.Serial, &out.Serial
		*out = new(string)
		**out = **in
	}
	if in.SerialNumber != nil {
		in, out := &in.SerialNumber, &out.SerialNumber
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertObservation.
func (in *SecretBackendRootCertObservation) DeepCopy() *SecretBackendRootCertObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertParameters) DeepCopyInto(out *SecretBackendRootCertParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerName != nil {
		in, out := &in.IssuerName, &out.IssuerName
		*out = new(string)
		**out = **in
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyRef != nil {
		in, out := &in.KeyRef, &out.KeyRef
		*out = new(string)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyID != nil {
		in, out := &in.ManagedKeyID, &out.ManagedKeyID
		*out = new(string)
		**out = **in
	}
	if in.ManagedKeyName != nil {
		in, out := &in.ManagedKeyName, &out.ManagedKeyName
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PermittedDNSDomains != nil {
		in, out := &in.PermittedDNSDomains, &out.PermittedDNSDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertParameters.
func (in *SecretBackendRootCertParameters) DeepCopy() *SecretBackendRootCertParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertSpec) DeepCopyInto(out *SecretBackendRootCertSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertSpec.
func (in *SecretBackendRootCertSpec) DeepCopy() *SecretBackendRootCertSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertStatus) DeepCopyInto(out *SecretBackendRootCertStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertStatus.
func (in *SecretBackendRootCertStatus) DeepCopy() *SecretBackendRootCertStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootSignIntermediate) DeepCopyInto(out *SecretBackendRootSignIntermediate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootSignIntermediate.
func (in *SecretBackendRootSignIntermediate) DeepCopy() *SecretBackendRootSignIntermediate {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootSignIntermediate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRootSignIntermediate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootSignIntermediateInitParameters) DeepCopyInto(out *SecretBackendRootSignIntermediateInitParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Csr != nil {
		in, out := &in.Csr, &out.Csr
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PermittedDNSDomains != nil {
		in, out := &in.PermittedDNSDomains, &out.PermittedDNSDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.Revoke != nil {
		in, out := &in.Revoke, &out.Revoke
		*out = new(bool)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseCsrValues != nil {
		in, out := &in.UseCsrValues, &out.UseCsrValues
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootSignIntermediateInitParameters.
func (in *SecretBackendRootSignIntermediateInitParameters) DeepCopy() *SecretBackendRootSignIntermediateInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootSignIntermediateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootSignIntermediateList) DeepCopyInto(out *SecretBackendRootSignIntermediateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendRootSignIntermediate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootSignIntermediateList.
func (in *SecretBackendRootSignIntermediateList) DeepCopy() *SecretBackendRootSignIntermediateList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootSignIntermediateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRootSignIntermediateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootSignIntermediateObservation) DeepCopyInto(out *SecretBackendRootSignIntermediateObservation) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CAChain != nil {
		in, out := &in.CAChain, &out.CAChain
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.CertificateBundle != nil {
		in, out := &in.CertificateBundle, &out.CertificateBundle
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Csr != nil {
		in, out := &in.Csr, &out.Csr
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.IssuingCA != nil {
		in, out := &in.IssuingCA, &out.IssuingCA
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PermittedDNSDomains != nil {
		in, out := &in.PermittedDNSDomains, &out.PermittedDNSDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.Revoke != nil {
		in, out := &in.Revoke, &out.Revoke
		*out = new(bool)
		**out = **in
	}
	if in.Serial != nil {
		in, out := &in.Serial, &out.Serial
		*out = new(string)
		**out = **in
	}
	if in.SerialNumber != nil {
		in, out := &in.SerialNumber, &out.SerialNumber
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseCsrValues != nil {
		in, out := &in.UseCsrValues, &out.UseCsrValues
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootSignIntermediateObservation.
func (in *SecretBackendRootSignIntermediateObservation) DeepCopy() *SecretBackendRootSignIntermediateObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootSignIntermediateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootSignIntermediateParameters) DeepCopyInto(out *SecretBackendRootSignIntermediateParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Csr != nil {
		in, out := &in.Csr, &out.Csr
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PermittedDNSDomains != nil {
		in, out := &in.PermittedDNSDomains, &out.PermittedDNSDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.Revoke != nil {
		in, out := &in.Revoke, &out.Revoke
		*out = new(bool)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseCsrValues != nil {
		in, out := &in.UseCsrValues, &out.UseCsrValues
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootSignIntermediateParameters.
func (in *SecretBackendRootSignIntermediateParameters) DeepCopy() *SecretBackendRootSignIntermediateParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootSignIntermediateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootSignIntermediateSpec) DeepCopyInto(out *SecretBackendRootSignIntermediateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootSignIntermediateSpec.
func (in *SecretBackendRootSignIntermediateSpec) DeepCopy() *SecretBackendRootSignIntermediateSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootSignIntermediateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootSignIntermediateStatus) DeepCopyInto(out *SecretBackendRootSignIntermediateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootSignIntermediateStatus.
func (in *SecretBackendRootSignIntermediateStatus) DeepCopy() *SecretBackendRootSignIntermediateStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootSignIntermediateStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSign) DeepCopyInto(out *SecretBackendSign) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSign.
func (in *SecretBackendSign) DeepCopy() *SecretBackendSign {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSign)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendSign) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSignInitParameters) DeepCopyInto(out *SecretBackendSignInitParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Csr != nil {
		in, out := &in.Csr, &out.Csr
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.MinSecondsRemaining != nil {
		in, out := &in.MinSecondsRemaining, &out.MinSecondsRemaining
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSignInitParameters.
func (in *SecretBackendSignInitParameters) DeepCopy() *SecretBackendSignInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSignInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSignList) DeepCopyInto(out *SecretBackendSignList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendSign, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSignList.
func (in *SecretBackendSignList) DeepCopy() *SecretBackendSignList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSignList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendSignList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSignObservation) DeepCopyInto(out *SecretBackendSignObservation) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CAChain != nil {
		in, out := &in.CAChain, &out.CAChain
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Csr != nil {
		in, out := &in.Csr, &out.Csr
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Expiration != nil {
		in, out := &in.Expiration, &out.Expiration
		*out = new(float64)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.IssuingCA != nil {
		in, out := &in.IssuingCA, &out.IssuingCA
		*out = new(string)
		**out = **in
	}
	if in.MinSecondsRemaining != nil {
		in, out := &in.MinSecondsRemaining, &out.MinSecondsRemaining
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RenewPending != nil {
		in, out := &in.RenewPending, &out.RenewPending
		*out = new(bool)
		**out = **in
	}
	if in.Serial != nil {
		in, out := &in.Serial, &out.Serial
		*out = new(string)
		**out = **in
	}
	if in.SerialNumber != nil {
		in, out := &in.SerialNumber, &out.SerialNumber
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSignObservation.
func (in *SecretBackendSignObservation) DeepCopy() *SecretBackendSignObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSignObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSignParameters) DeepCopyInto(out *SecretBackendSignParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Csr != nil {
		in, out := &in.Csr, &out.Csr
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerRef != nil {
		in, out := &in.IssuerRef, &out.IssuerRef
		*out = new(string)
		**out = **in
	}
	if in.MinSecondsRemaining != nil {
		in, out := &in.MinSecondsRemaining, &out.MinSecondsRemaining
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSignParameters.
func (in *SecretBackendSignParameters) DeepCopy() *SecretBackendSignParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSignParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSignSpec) DeepCopyInto(out *SecretBackendSignSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSignSpec.
func (in *SecretBackendSignSpec) DeepCopy() *SecretBackendSignSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSignSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendSignStatus) DeepCopyInto(out *SecretBackendSignStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendSignStatus.
func (in *SecretBackendSignStatus) DeepCopy() *SecretBackendSignStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendSignStatus)
	in.DeepCopyInto(out)
	return out
}
