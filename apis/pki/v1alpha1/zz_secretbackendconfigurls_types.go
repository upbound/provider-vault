/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendConfigUrlsInitParameters struct {

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Specifies the URL values for the CRL Distribution Points field.
	// Specifies the URL values for the CRL Distribution Points field.
	CrlDistributionPoints []*string `json:"crlDistributionPoints,omitempty" tf:"crl_distribution_points,omitempty"`

	// Specifies that templating of AIA fields is allowed.
	// Specifies that templating of AIA fields is allowed.
	EnableTemplating *bool `json:"enableTemplating,omitempty" tf:"enable_templating,omitempty"`

	// Specifies the URL values for the Issuing Certificate field.
	// Specifies the URL values for the Issuing Certificate field.
	IssuingCertificates []*string `json:"issuingCertificates,omitempty" tf:"issuing_certificates,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the URL values for the OCSP Servers field.
	// Specifies the URL values for the OCSP Servers field.
	OcspServers []*string `json:"ocspServers,omitempty" tf:"ocsp_servers,omitempty"`
}

type SecretBackendConfigUrlsObservation struct {

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Specifies the URL values for the CRL Distribution Points field.
	// Specifies the URL values for the CRL Distribution Points field.
	CrlDistributionPoints []*string `json:"crlDistributionPoints,omitempty" tf:"crl_distribution_points,omitempty"`

	// Specifies that templating of AIA fields is allowed.
	// Specifies that templating of AIA fields is allowed.
	EnableTemplating *bool `json:"enableTemplating,omitempty" tf:"enable_templating,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the URL values for the Issuing Certificate field.
	// Specifies the URL values for the Issuing Certificate field.
	IssuingCertificates []*string `json:"issuingCertificates,omitempty" tf:"issuing_certificates,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the URL values for the OCSP Servers field.
	// Specifies the URL values for the OCSP Servers field.
	OcspServers []*string `json:"ocspServers,omitempty" tf:"ocsp_servers,omitempty"`
}

type SecretBackendConfigUrlsParameters struct {

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Specifies the URL values for the CRL Distribution Points field.
	// Specifies the URL values for the CRL Distribution Points field.
	// +kubebuilder:validation:Optional
	CrlDistributionPoints []*string `json:"crlDistributionPoints,omitempty" tf:"crl_distribution_points,omitempty"`

	// Specifies that templating of AIA fields is allowed.
	// Specifies that templating of AIA fields is allowed.
	// +kubebuilder:validation:Optional
	EnableTemplating *bool `json:"enableTemplating,omitempty" tf:"enable_templating,omitempty"`

	// Specifies the URL values for the Issuing Certificate field.
	// Specifies the URL values for the Issuing Certificate field.
	// +kubebuilder:validation:Optional
	IssuingCertificates []*string `json:"issuingCertificates,omitempty" tf:"issuing_certificates,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the URL values for the OCSP Servers field.
	// Specifies the URL values for the OCSP Servers field.
	// +kubebuilder:validation:Optional
	OcspServers []*string `json:"ocspServers,omitempty" tf:"ocsp_servers,omitempty"`
}

// SecretBackendConfigUrlsSpec defines the desired state of SecretBackendConfigUrls
type SecretBackendConfigUrlsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendConfigUrlsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendConfigUrlsInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendConfigUrlsStatus defines the observed state of SecretBackendConfigUrls.
type SecretBackendConfigUrlsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendConfigUrlsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackendConfigUrls is the Schema for the SecretBackendConfigUrlss API. Sets the config URL's on an PKI Secret Backend for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendConfigUrls struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretBackendConfigUrlsSpec   `json:"spec"`
	Status            SecretBackendConfigUrlsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendConfigUrlsList contains a list of SecretBackendConfigUrlss
type SecretBackendConfigUrlsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendConfigUrls `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendConfigUrls_Kind             = "SecretBackendConfigUrls"
	SecretBackendConfigUrls_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendConfigUrls_Kind}.String()
	SecretBackendConfigUrls_KindAPIVersion   = SecretBackendConfigUrls_Kind + "." + CRDGroupVersion.String()
	SecretBackendConfigUrls_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendConfigUrls_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendConfigUrls{}, &SecretBackendConfigUrlsList{})
}
