/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendCAInitParameters struct {

	// The path where the SSH secret backend is mounted. Defaults to 'ssh'
	// The path of the SSH Secret Backend where the CA should be configured
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Whether Vault should generate the signing key pair internally. Defaults to true
	// Whether Vault should generate the signing key pair internally.
	GenerateSigningKey *bool `json:"generateSigningKey,omitempty" tf:"generate_signing_key,omitempty"`

	// Specifies the desired key bits for the generated SSH CA key when generate_signing_key is set to true.
	// Specifies the desired key bits for the generated SSH CA key when `generate_signing_key` is set to `true`.
	KeyBits *float64 `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// Specifies the desired key type for the generated SSH CA key when generate_signing_key is set to true.
	// Specifies the desired key type for the generated SSH CA key when `generate_signing_key` is set to `true`.
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The private key part the SSH CA key pair; required if generate_signing_key is false.
	// Private key part the SSH CA key pair; required if generate_signing_key is false.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The public key part the SSH CA key pair; required if generate_signing_key is false.
	// Public key part the SSH CA key pair; required if generate_signing_key is false.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type SecretBackendCAObservation struct {

	// The path where the SSH secret backend is mounted. Defaults to 'ssh'
	// The path of the SSH Secret Backend where the CA should be configured
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Whether Vault should generate the signing key pair internally. Defaults to true
	// Whether Vault should generate the signing key pair internally.
	GenerateSigningKey *bool `json:"generateSigningKey,omitempty" tf:"generate_signing_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the desired key bits for the generated SSH CA key when generate_signing_key is set to true.
	// Specifies the desired key bits for the generated SSH CA key when `generate_signing_key` is set to `true`.
	KeyBits *float64 `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// Specifies the desired key type for the generated SSH CA key when generate_signing_key is set to true.
	// Specifies the desired key type for the generated SSH CA key when `generate_signing_key` is set to `true`.
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The public key part the SSH CA key pair; required if generate_signing_key is false.
	// Public key part the SSH CA key pair; required if generate_signing_key is false.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type SecretBackendCAParameters struct {

	// The path where the SSH secret backend is mounted. Defaults to 'ssh'
	// The path of the SSH Secret Backend where the CA should be configured
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// Whether Vault should generate the signing key pair internally. Defaults to true
	// Whether Vault should generate the signing key pair internally.
	// +kubebuilder:validation:Optional
	GenerateSigningKey *bool `json:"generateSigningKey,omitempty" tf:"generate_signing_key,omitempty"`

	// Specifies the desired key bits for the generated SSH CA key when generate_signing_key is set to true.
	// Specifies the desired key bits for the generated SSH CA key when `generate_signing_key` is set to `true`.
	// +kubebuilder:validation:Optional
	KeyBits *float64 `json:"keyBits,omitempty" tf:"key_bits,omitempty"`

	// Specifies the desired key type for the generated SSH CA key when generate_signing_key is set to true.
	// Specifies the desired key type for the generated SSH CA key when `generate_signing_key` is set to `true`.
	// +kubebuilder:validation:Optional
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The private key part the SSH CA key pair; required if generate_signing_key is false.
	// Private key part the SSH CA key pair; required if generate_signing_key is false.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The public key part the SSH CA key pair; required if generate_signing_key is false.
	// Public key part the SSH CA key pair; required if generate_signing_key is false.
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

// SecretBackendCASpec defines the desired state of SecretBackendCA
type SecretBackendCASpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendCAParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendCAInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendCAStatus defines the observed state of SecretBackendCA.
type SecretBackendCAStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendCAObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackendCA is the Schema for the SecretBackendCAs API. Managing CA information in an SSH secret backend in Vault
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendCA struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretBackendCASpec   `json:"spec"`
	Status            SecretBackendCAStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendCAList contains a list of SecretBackendCAs
type SecretBackendCAList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendCA `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendCA_Kind             = "SecretBackendCA"
	SecretBackendCA_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendCA_Kind}.String()
	SecretBackendCA_KindAPIVersion   = SecretBackendCA_Kind + "." + CRDGroupVersion.String()
	SecretBackendCA_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendCA_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendCA{}, &SecretBackendCAList{})
}
