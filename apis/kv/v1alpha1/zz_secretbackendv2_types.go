/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendV2InitParameters struct {

	// If true, all keys will require the cas
	// parameter to be set on all write requests.
	// If true, all keys will require the cas parameter to be set on all write requests.
	CasRequired *bool `json:"casRequired,omitempty" tf:"cas_required,omitempty"`

	// If set, specifies the length of time before
	// a version is deleted. Accepts duration in integer seconds.
	// If set, specifies the length of time before a version is deleted
	DeleteVersionAfter *float64 `json:"deleteVersionAfter,omitempty" tf:"delete_version_after,omitempty"`

	// The number of versions to keep per key.
	// The number of versions to keep per key.
	MaxVersions *float64 `json:"maxVersions,omitempty" tf:"max_versions,omitempty"`

	// Path where KV-V2 engine is mounted.
	// Path where KV-V2 engine is mounted.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Mount *string `json:"mount,omitempty" tf:"mount,omitempty"`

	// Reference to a Mount in vault to populate mount.
	// +kubebuilder:validation:Optional
	MountRef *v1.Reference `json:"mountRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate mount.
	// +kubebuilder:validation:Optional
	MountSelector *v1.Selector `json:"mountSelector,omitempty" tf:"-"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type SecretBackendV2Observation struct {

	// If true, all keys will require the cas
	// parameter to be set on all write requests.
	// If true, all keys will require the cas parameter to be set on all write requests.
	CasRequired *bool `json:"casRequired,omitempty" tf:"cas_required,omitempty"`

	// If set, specifies the length of time before
	// a version is deleted. Accepts duration in integer seconds.
	// If set, specifies the length of time before a version is deleted
	DeleteVersionAfter *float64 `json:"deleteVersionAfter,omitempty" tf:"delete_version_after,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of versions to keep per key.
	// The number of versions to keep per key.
	MaxVersions *float64 `json:"maxVersions,omitempty" tf:"max_versions,omitempty"`

	// Path where KV-V2 engine is mounted.
	// Path where KV-V2 engine is mounted.
	Mount *string `json:"mount,omitempty" tf:"mount,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type SecretBackendV2Parameters struct {

	// If true, all keys will require the cas
	// parameter to be set on all write requests.
	// If true, all keys will require the cas parameter to be set on all write requests.
	// +kubebuilder:validation:Optional
	CasRequired *bool `json:"casRequired,omitempty" tf:"cas_required,omitempty"`

	// If set, specifies the length of time before
	// a version is deleted. Accepts duration in integer seconds.
	// If set, specifies the length of time before a version is deleted
	// +kubebuilder:validation:Optional
	DeleteVersionAfter *float64 `json:"deleteVersionAfter,omitempty" tf:"delete_version_after,omitempty"`

	// The number of versions to keep per key.
	// The number of versions to keep per key.
	// +kubebuilder:validation:Optional
	MaxVersions *float64 `json:"maxVersions,omitempty" tf:"max_versions,omitempty"`

	// Path where KV-V2 engine is mounted.
	// Path where KV-V2 engine is mounted.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Mount *string `json:"mount,omitempty" tf:"mount,omitempty"`

	// Reference to a Mount in vault to populate mount.
	// +kubebuilder:validation:Optional
	MountRef *v1.Reference `json:"mountRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate mount.
	// +kubebuilder:validation:Optional
	MountSelector *v1.Selector `json:"mountSelector,omitempty" tf:"-"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// SecretBackendV2Spec defines the desired state of SecretBackendV2
type SecretBackendV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendV2InitParameters `json:"initProvider,omitempty"`
}

// SecretBackendV2Status defines the observed state of SecretBackendV2.
type SecretBackendV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackendV2 is the Schema for the SecretBackendV2s API. Configures KV-V2 backend level settings that are applied to every key in the key-value store.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretBackendV2Spec   `json:"spec"`
	Status            SecretBackendV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendV2List contains a list of SecretBackendV2s
type SecretBackendV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendV2 `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendV2_Kind             = "SecretBackendV2"
	SecretBackendV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendV2_Kind}.String()
	SecretBackendV2_KindAPIVersion   = SecretBackendV2_Kind + "." + CRDGroupVersion.String()
	SecretBackendV2_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendV2{}, &SecretBackendV2List{})
}
