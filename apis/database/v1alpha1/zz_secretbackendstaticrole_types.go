/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendStaticRoleInitParameters struct {

	// The unique name of the Vault mount to configure.
	// The path of the Database Secret Backend the role belongs to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// The unique name of the database connection to use for the static role.
	// Database connection to use for this role.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/database/v1alpha1.SecretBackendConnection
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Reference to a SecretBackendConnection in database to populate dbName.
	// +kubebuilder:validation:Optional
	DBNameRef *v1.Reference `json:"dbNameRef,omitempty" tf:"-"`

	// Selector for a SecretBackendConnection in database to populate dbName.
	// +kubebuilder:validation:Optional
	DBNameSelector *v1.Selector `json:"dbNameSelector,omitempty" tf:"-"`

	// A unique name to give the static role.
	// Unique name for the static role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The amount of time Vault should wait before rotating the password, in seconds.
	// Mutually exclusive with rotation_schedule.
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// A cron-style string that will define the schedule on which rotations should occur.
	// Mutually exclusive with rotation_period.
	// A cron-style string that will define the schedule on which rotations should occur.
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// Database statements to execute to rotate the password for the configured database user.
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements []*string `json:"rotationStatements,omitempty" tf:"rotation_statements,omitempty"`

	// The amount of time, in seconds, in which rotations are allowed to occur starting
	// from a given rotation_schedule.
	// The amount of time in seconds in which the rotations are allowed to occur starting from a given rotation_schedule.
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// The database username that this static role corresponds to.
	// The database username that this role corresponds to.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SecretBackendStaticRoleObservation struct {

	// The unique name of the Vault mount to configure.
	// The path of the Database Secret Backend the role belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// The unique name of the database connection to use for the static role.
	// Database connection to use for this role.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name to give the static role.
	// Unique name for the static role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The amount of time Vault should wait before rotating the password, in seconds.
	// Mutually exclusive with rotation_schedule.
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// A cron-style string that will define the schedule on which rotations should occur.
	// Mutually exclusive with rotation_period.
	// A cron-style string that will define the schedule on which rotations should occur.
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// Database statements to execute to rotate the password for the configured database user.
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements []*string `json:"rotationStatements,omitempty" tf:"rotation_statements,omitempty"`

	// The amount of time, in seconds, in which rotations are allowed to occur starting
	// from a given rotation_schedule.
	// The amount of time in seconds in which the rotations are allowed to occur starting from a given rotation_schedule.
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// The database username that this static role corresponds to.
	// The database username that this role corresponds to.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SecretBackendStaticRoleParameters struct {

	// The unique name of the Vault mount to configure.
	// The path of the Database Secret Backend the role belongs to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// The unique name of the database connection to use for the static role.
	// Database connection to use for this role.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/database/v1alpha1.SecretBackendConnection
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Reference to a SecretBackendConnection in database to populate dbName.
	// +kubebuilder:validation:Optional
	DBNameRef *v1.Reference `json:"dbNameRef,omitempty" tf:"-"`

	// Selector for a SecretBackendConnection in database to populate dbName.
	// +kubebuilder:validation:Optional
	DBNameSelector *v1.Selector `json:"dbNameSelector,omitempty" tf:"-"`

	// A unique name to give the static role.
	// Unique name for the static role.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The amount of time Vault should wait before rotating the password, in seconds.
	// Mutually exclusive with rotation_schedule.
	// The amount of time Vault should wait before rotating the password, in seconds.
	// +kubebuilder:validation:Optional
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// A cron-style string that will define the schedule on which rotations should occur.
	// Mutually exclusive with rotation_period.
	// A cron-style string that will define the schedule on which rotations should occur.
	// +kubebuilder:validation:Optional
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// Database statements to execute to rotate the password for the configured database user.
	// Database statements to execute to rotate the password for the configured database user.
	// +kubebuilder:validation:Optional
	RotationStatements []*string `json:"rotationStatements,omitempty" tf:"rotation_statements,omitempty"`

	// The amount of time, in seconds, in which rotations are allowed to occur starting
	// from a given rotation_schedule.
	// The amount of time in seconds in which the rotations are allowed to occur starting from a given rotation_schedule.
	// +kubebuilder:validation:Optional
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// The database username that this static role corresponds to.
	// The database username that this role corresponds to.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// SecretBackendStaticRoleSpec defines the desired state of SecretBackendStaticRole
type SecretBackendStaticRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendStaticRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendStaticRoleInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendStaticRoleStatus defines the observed state of SecretBackendStaticRole.
type SecretBackendStaticRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendStaticRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackendStaticRole is the Schema for the SecretBackendStaticRoles API. Configures a database secret backend static role for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendStaticRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   SecretBackendStaticRoleSpec   `json:"spec"`
	Status SecretBackendStaticRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendStaticRoleList contains a list of SecretBackendStaticRoles
type SecretBackendStaticRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendStaticRole `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendStaticRole_Kind             = "SecretBackendStaticRole"
	SecretBackendStaticRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendStaticRole_Kind}.String()
	SecretBackendStaticRole_KindAPIVersion   = SecretBackendStaticRole_Kind + "." + CRDGroupVersion.String()
	SecretBackendStaticRole_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendStaticRole_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendStaticRole{}, &SecretBackendStaticRoleList{})
}
