/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CassandraInitParameters struct {

	// The number of seconds to use as a connection
	// timeout.
	// The number of seconds to use as a connection timeout.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// The hosts to connect to.
	// Cassandra hosts to connect to.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// The password to use when authenticating with Cassandra.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Concatenated PEM blocks configuring the certificate
	// chain.
	// Concatenated PEM blocks containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	PemBundleSecretRef *v1.SecretKeySelector `json:"pemBundleSecretRef,omitempty" tf:"-"`

	// A JSON structure configuring the certificate chain.
	// Specifies JSON containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	PemJSONSecretRef *v1.SecretKeySelector `json:"pemJsonSecretRef,omitempty" tf:"-"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Cassandra.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The CQL protocol version to use.
	// The CQL protocol version to use.
	ProtocolVersion *float64 `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Whether to use TLS when connecting to Cassandra.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// The username to use when authenticating with Cassandra.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type CassandraObservation struct {

	// The number of seconds to use as a connection
	// timeout.
	// The number of seconds to use as a connection timeout.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// The hosts to connect to.
	// Cassandra hosts to connect to.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Cassandra.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The CQL protocol version to use.
	// The CQL protocol version to use.
	ProtocolVersion *float64 `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Whether to use TLS when connecting to Cassandra.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// The username to use when authenticating with Cassandra.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type CassandraParameters struct {

	// The number of seconds to use as a connection
	// timeout.
	// The number of seconds to use as a connection timeout.
	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// The hosts to connect to.
	// Cassandra hosts to connect to.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Whether to skip verification of the server certificate when using TLS.
	// +kubebuilder:validation:Optional
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// The password to use when authenticating with Cassandra.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Concatenated PEM blocks configuring the certificate
	// chain.
	// Concatenated PEM blocks containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	// +kubebuilder:validation:Optional
	PemBundleSecretRef *v1.SecretKeySelector `json:"pemBundleSecretRef,omitempty" tf:"-"`

	// A JSON structure configuring the certificate chain.
	// Specifies JSON containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	// +kubebuilder:validation:Optional
	PemJSONSecretRef *v1.SecretKeySelector `json:"pemJsonSecretRef,omitempty" tf:"-"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Cassandra.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The CQL protocol version to use.
	// The CQL protocol version to use.
	// +kubebuilder:validation:Optional
	ProtocolVersion *float64 `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Whether to use TLS when connecting to Cassandra.
	// +kubebuilder:validation:Optional
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// The username to use when authenticating with Cassandra.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type CouchbaseInitParameters struct {

	// Required if tls is true. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	Base64PemSecretRef *v1.SecretKeySelector `json:"base64PemSecretRef,omitempty" tf:"-"`

	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The hosts to connect to.
	// A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Specifies whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// Specifies the password corresponding to the given username.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Whether to use TLS when connecting to Cassandra.
	// Specifies whether to use TLS when connecting to Couchbase.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username for Vault to use.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type CouchbaseObservation struct {

	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The hosts to connect to.
	// A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Specifies whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Specifies whether to use TLS when connecting to Couchbase.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username for Vault to use.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type CouchbaseParameters struct {

	// Required if tls is true. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	// +kubebuilder:validation:Optional
	Base64PemSecretRef *v1.SecretKeySelector `json:"base64PemSecretRef,omitempty" tf:"-"`

	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The hosts to connect to.
	// A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts" tf:"hosts,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Specifies whether to skip verification of the server certificate when using TLS.
	// +kubebuilder:validation:Optional
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// Specifies the password corresponding to the given username.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Whether to use TLS when connecting to Cassandra.
	// Specifies whether to use TLS when connecting to Couchbase.
	// +kubebuilder:validation:Optional
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username for Vault to use.
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type ElasticsearchInitParameters struct {

	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity
	CAPath *string `json:"caPath,omitempty" tf:"ca_path,omitempty"`

	// The path to the certificate for the Elasticsearch client to present for communication.
	// The path to the certificate for the Elasticsearch client to present for communication
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// The path to the key for the Elasticsearch client to use for communication.
	// The path to the key for the Elasticsearch client to use for communication
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// Whether to disable certificate verification.
	// Whether to disable certificate verification
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// The password to authenticate with.
	// The password to be used in the connection URL
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// This, if set, is used to set the SNI host when connecting via TLS.
	// This, if set, is used to set the SNI host when connecting via TLS
	TLSServerName *string `json:"tlsServerName,omitempty" tf:"tls_server_name,omitempty"`

	// The url to connect to including the port; e.g. master.my-cluster.xxxxxx.use1.cache.amazonaws.com:6379.
	// The URL for Elasticsearch's API
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The username to authenticate with.
	// The username to be used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type ElasticsearchObservation struct {

	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity
	CAPath *string `json:"caPath,omitempty" tf:"ca_path,omitempty"`

	// The path to the certificate for the Elasticsearch client to present for communication.
	// The path to the certificate for the Elasticsearch client to present for communication
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// The path to the key for the Elasticsearch client to use for communication.
	// The path to the key for the Elasticsearch client to use for communication
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// Whether to disable certificate verification.
	// Whether to disable certificate verification
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// This, if set, is used to set the SNI host when connecting via TLS.
	// This, if set, is used to set the SNI host when connecting via TLS
	TLSServerName *string `json:"tlsServerName,omitempty" tf:"tls_server_name,omitempty"`

	// The url to connect to including the port; e.g. master.my-cluster.xxxxxx.use1.cache.amazonaws.com:6379.
	// The URL for Elasticsearch's API
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The username to authenticate with.
	// The username to be used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type ElasticsearchParameters struct {

	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity
	// +kubebuilder:validation:Optional
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity
	// +kubebuilder:validation:Optional
	CAPath *string `json:"caPath,omitempty" tf:"ca_path,omitempty"`

	// The path to the certificate for the Elasticsearch client to present for communication.
	// The path to the certificate for the Elasticsearch client to present for communication
	// +kubebuilder:validation:Optional
	ClientCert *string `json:"clientCert,omitempty" tf:"client_cert,omitempty"`

	// The path to the key for the Elasticsearch client to use for communication.
	// The path to the key for the Elasticsearch client to use for communication
	// +kubebuilder:validation:Optional
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// Whether to disable certificate verification.
	// Whether to disable certificate verification
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// The password to authenticate with.
	// The password to be used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// This, if set, is used to set the SNI host when connecting via TLS.
	// This, if set, is used to set the SNI host when connecting via TLS
	// +kubebuilder:validation:Optional
	TLSServerName *string `json:"tlsServerName,omitempty" tf:"tls_server_name,omitempty"`

	// The url to connect to including the port; e.g. master.my-cluster.xxxxxx.use1.cache.amazonaws.com:6379.
	// The URL for Elasticsearch's API
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// The username to authenticate with.
	// The username to be used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type HanaInitParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type HanaObservation struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type HanaParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	// +kubebuilder:validation:Optional
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InfluxdbInitParameters struct {

	// The number of seconds to use as a connection
	// timeout.
	// The number of seconds to use as a connection timeout.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// The host to connect to.
	// Influxdb host to connect to.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// Specifies the password corresponding to the given username.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Concatenated PEM blocks configuring the certificate
	// chain.
	// Concatenated PEM blocks containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	PemBundleSecretRef *v1.SecretKeySelector `json:"pemBundleSecretRef,omitempty" tf:"-"`

	// A JSON structure configuring the certificate chain.
	// Specifies JSON containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	PemJSONSecretRef *v1.SecretKeySelector `json:"pemJsonSecretRef,omitempty" tf:"-"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Influxdb.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Whether to use TLS when connecting to Influxdb.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username to use for superuser access.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type InfluxdbObservation struct {

	// The number of seconds to use as a connection
	// timeout.
	// The number of seconds to use as a connection timeout.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// The host to connect to.
	// Influxdb host to connect to.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Influxdb.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Whether to use TLS when connecting to Influxdb.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username to use for superuser access.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type InfluxdbParameters struct {

	// The number of seconds to use as a connection
	// timeout.
	// The number of seconds to use as a connection timeout.
	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// The host to connect to.
	// Influxdb host to connect to.
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Whether to skip verification of the server certificate when using TLS.
	// +kubebuilder:validation:Optional
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// Specifies the password corresponding to the given username.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Concatenated PEM blocks configuring the certificate
	// chain.
	// Concatenated PEM blocks containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	// +kubebuilder:validation:Optional
	PemBundleSecretRef *v1.SecretKeySelector `json:"pemBundleSecretRef,omitempty" tf:"-"`

	// A JSON structure configuring the certificate chain.
	// Specifies JSON containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.
	// +kubebuilder:validation:Optional
	PemJSONSecretRef *v1.SecretKeySelector `json:"pemJsonSecretRef,omitempty" tf:"-"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Influxdb.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Whether to use TLS when connecting to Influxdb.
	// +kubebuilder:validation:Optional
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username to use for superuser access.
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Template describing how dynamic usernames are generated.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MongodbInitParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MongodbObservation struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MongodbParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MongodbatlasInitParameters struct {

	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// The Project ID the Database User should be created within.
	// The Project ID the Database User should be created within.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type MongodbatlasObservation struct {

	// The Project ID the Database User should be created within.
	// The Project ID the Database User should be created within.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type MongodbatlasParameters struct {

	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// The Project ID the Database User should be created within.
	// The Project ID the Database User should be created within.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey" tf:"public_key,omitempty"`
}

type MssqlInitParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// For Vault v1.9+. Set to true when the target is a
	// Contained Database, e.g. AzureSQL.
	// See the Vault
	// docs
	// Set to true when the target is a Contained Database, e.g. AzureSQL.
	ContainedDB *bool `json:"containedDb,omitempty" tf:"contained_db,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MssqlObservation struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// For Vault v1.9+. Set to true when the target is a
	// Contained Database, e.g. AzureSQL.
	// See the Vault
	// docs
	// Set to true when the target is a Contained Database, e.g. AzureSQL.
	ContainedDB *bool `json:"containedDb,omitempty" tf:"contained_db,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MssqlParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// For Vault v1.9+. Set to true when the target is a
	// Contained Database, e.g. AzureSQL.
	// See the Vault
	// docs
	// Set to true when the target is a Contained Database, e.g. AzureSQL.
	// +kubebuilder:validation:Optional
	ContainedDB *bool `json:"containedDb,omitempty" tf:"contained_db,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	// +kubebuilder:validation:Optional
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLAuroraInitParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLAuroraObservation struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLAuroraParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	// +kubebuilder:validation:Optional
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// +kubebuilder:validation:Optional
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// +kubebuilder:validation:Optional
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLInitParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLLegacyInitParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLLegacyObservation struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLLegacyParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	// +kubebuilder:validation:Optional
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// +kubebuilder:validation:Optional
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// +kubebuilder:validation:Optional
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLObservation struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	// +kubebuilder:validation:Optional
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// +kubebuilder:validation:Optional
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// +kubebuilder:validation:Optional
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLRDSInitParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLRDSObservation struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type MySQLRDSParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	// +kubebuilder:validation:Optional
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	// +kubebuilder:validation:Optional
	TLSCA *string `json:"tlsCa,omitempty" tf:"tls_ca,omitempty"`

	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	// +kubebuilder:validation:Optional
	TLSCertificateKeySecretRef *v1.SecretKeySelector `json:"tlsCertificateKeySecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type OracleInitParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Enable the built-in session disconnect mechanism.
	// Set to true to disconnect any open sessions prior to running the revocation statements.
	DisconnectSessions *bool `json:"disconnectSessions,omitempty" tf:"disconnect_sessions,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Enable spliting statements after semi-colons.
	// Set to true in order to split statements after semi-colons.
	SplitStatements *bool `json:"splitStatements,omitempty" tf:"split_statements,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type OracleObservation struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Enable the built-in session disconnect mechanism.
	// Set to true to disconnect any open sessions prior to running the revocation statements.
	DisconnectSessions *bool `json:"disconnectSessions,omitempty" tf:"disconnect_sessions,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// Enable spliting statements after semi-colons.
	// Set to true in order to split statements after semi-colons.
	SplitStatements *bool `json:"splitStatements,omitempty" tf:"split_statements,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type OracleParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Enable the built-in session disconnect mechanism.
	// Set to true to disconnect any open sessions prior to running the revocation statements.
	// +kubebuilder:validation:Optional
	DisconnectSessions *bool `json:"disconnectSessions,omitempty" tf:"disconnect_sessions,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Enable spliting statements after semi-colons.
	// Set to true in order to split statements after semi-colons.
	// +kubebuilder:validation:Optional
	SplitStatements *bool `json:"splitStatements,omitempty" tf:"split_statements,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type PostgresqlInitParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type PostgresqlObservation struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type PostgresqlParameters struct {

	// Enable IAM authentication to a Google Cloud instance when set to gcp_iam
	// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	// +kubebuilder:validation:Optional
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// JSON encoding of an IAM access key. Requires auth_type to be gcp_iam.
	// A JSON encoded credential for use with IAM authorization
	// +kubebuilder:validation:Optional
	ServiceAccountJSONSecretRef *v1.SecretKeySelector `json:"serviceAccountJsonSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type RedisElasticacheInitParameters struct {

	// The password to authenticate with.
	// The AWS secret key id to use to talk to ElastiCache. If omitted the credentials chain provider is used instead.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
	// The AWS region where the ElastiCache cluster is hosted. If omitted the plugin tries to infer the region from the environment.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The url to connect to including the port; e.g. master.my-cluster.xxxxxx.use1.cache.amazonaws.com:6379.
	// The configuration endpoint for the ElastiCache cluster to connect to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The username to authenticate with.
	// The AWS access key id to use to talk to ElastiCache. If omitted the credentials chain provider is used instead.
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`
}

type RedisElasticacheObservation struct {

	// The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
	// The AWS region where the ElastiCache cluster is hosted. If omitted the plugin tries to infer the region from the environment.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The url to connect to including the port; e.g. master.my-cluster.xxxxxx.use1.cache.amazonaws.com:6379.
	// The configuration endpoint for the ElastiCache cluster to connect to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RedisElasticacheParameters struct {

	// The password to authenticate with.
	// The AWS secret key id to use to talk to ElastiCache. If omitted the credentials chain provider is used instead.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
	// The AWS region where the ElastiCache cluster is hosted. If omitted the plugin tries to infer the region from the environment.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The url to connect to including the port; e.g. master.my-cluster.xxxxxx.use1.cache.amazonaws.com:6379.
	// The configuration endpoint for the ElastiCache cluster to connect to.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// The username to authenticate with.
	// The AWS access key id to use to talk to ElastiCache. If omitted the credentials chain provider is used instead.
	// +kubebuilder:validation:Optional
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`
}

type RedisInitParameters struct {

	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// The host to connect to.
	// Specifies the host to connect to
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Specifies whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// Specifies the password corresponding to the given username.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Redis.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Specifies whether to use TLS when connecting to Redis.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username for Vault to use.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type RedisObservation struct {

	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// The host to connect to.
	// Specifies the host to connect to
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Specifies whether to skip verification of the server certificate when using TLS.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Redis.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Specifies whether to use TLS when connecting to Redis.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username for Vault to use.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type RedisParameters struct {

	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	// The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
	// +kubebuilder:validation:Optional
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// The host to connect to.
	// Specifies the host to connect to
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// Whether to skip verification of the server
	// certificate when using TLS.
	// Specifies whether to skip verification of the server certificate when using TLS.
	// +kubebuilder:validation:Optional
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// The password to authenticate with.
	// Specifies the password corresponding to the given username.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The default port to connect to if no port is specified as
	// part of the host.
	// The transport port to use to connect to Redis.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Whether to use TLS when connecting to Cassandra.
	// Specifies whether to use TLS when connecting to Redis.
	// +kubebuilder:validation:Optional
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// The username to authenticate with.
	// Specifies the username for Vault to use.
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type RedshiftInitParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type RedshiftObservation struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type RedshiftParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// Disable special character escaping in username and password.
	// Disable special character escaping in username and password
	// +kubebuilder:validation:Optional
	DisableEscaping *bool `json:"disableEscaping,omitempty" tf:"disable_escaping,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type SecretBackendConnectionInitParameters struct {

	// A list of roles that are allowed to use this
	// connection.
	// A list of roles that are allowed to use this connection.
	AllowedRoles []*string `json:"allowedRoles,omitempty" tf:"allowed_roles,omitempty"`

	// The unique name of the Vault mount to configure.
	// Unique name of the Vault mount to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// A nested block containing configuration options for Cassandra connections.
	// Connection parameters for the cassandra-database-plugin plugin.
	Cassandra []CassandraInitParameters `json:"cassandra,omitempty" tf:"cassandra,omitempty"`

	// A nested block containing configuration options for Couchbase connections.
	// Connection parameters for the couchbase-database-plugin plugin.
	Couchbase []CouchbaseInitParameters `json:"couchbase,omitempty" tf:"couchbase,omitempty"`

	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	// +mapType=granular
	Data map[string]*string `json:"data,omitempty" tf:"data,omitempty"`

	// A nested block containing configuration options for Elasticsearch connections.
	// Connection parameters for the elasticsearch-database-plugin.
	Elasticsearch []ElasticsearchInitParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// A nested block containing configuration options for SAP HanaDB connections.
	// Connection parameters for the hana-database-plugin plugin.
	Hana []HanaInitParameters `json:"hana,omitempty" tf:"hana,omitempty"`

	// A nested block containing configuration options for InfluxDB connections.
	// Connection parameters for the influxdb-database-plugin plugin.
	Influxdb []InfluxdbInitParameters `json:"influxdb,omitempty" tf:"influxdb,omitempty"`

	// A nested block containing configuration options for MongoDB connections.
	// Connection parameters for the mongodb-database-plugin plugin.
	Mongodb []MongodbInitParameters `json:"mongodb,omitempty" tf:"mongodb,omitempty"`

	// A nested block containing configuration options for MongoDB Atlas connections.
	// Connection parameters for the mongodbatlas-database-plugin plugin.
	Mongodbatlas []MongodbatlasInitParameters `json:"mongodbatlas,omitempty" tf:"mongodbatlas,omitempty"`

	// A nested block containing configuration options for MSSQL connections.
	// Connection parameters for the mssql-database-plugin plugin.
	Mssql []MssqlInitParameters `json:"mssql,omitempty" tf:"mssql,omitempty"`

	// A nested block containing configuration options for MySQL connections.
	// Connection parameters for the mysql-database-plugin plugin.
	MySQL []MySQLInitParameters `json:"mysql,omitempty" tf:"mysql,omitempty"`

	// A nested block containing configuration options for Aurora MySQL connections.
	// Connection parameters for the mysql-aurora-database-plugin plugin.
	MySQLAurora []MySQLAuroraInitParameters `json:"mysqlAurora,omitempty" tf:"mysql_aurora,omitempty"`

	// A nested block containing configuration options for legacy MySQL connections.
	// Connection parameters for the mysql-legacy-database-plugin plugin.
	MySQLLegacy []MySQLLegacyInitParameters `json:"mysqlLegacy,omitempty" tf:"mysql_legacy,omitempty"`

	// A nested block containing configuration options for RDS MySQL connections.
	// Connection parameters for the mysql-rds-database-plugin plugin.
	MySQLRDS []MySQLRDSInitParameters `json:"mysqlRds,omitempty" tf:"mysql_rds,omitempty"`

	// A unique name to give the database connection.
	// Name of the database connection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// A nested block containing configuration options for Oracle connections.
	// Connection parameters for the oracle-database-plugin plugin.
	Oracle []OracleInitParameters `json:"oracle,omitempty" tf:"oracle,omitempty"`

	// Specifies the name of the plugin to use.
	// Specifies the name of the plugin to use for this connection. Must be prefixed with the name of one of the supported database engine types.
	PluginName *string `json:"pluginName,omitempty" tf:"plugin_name,omitempty"`

	// A nested block containing configuration options for PostgreSQL connections.
	// Connection parameters for the postgresql-database-plugin plugin.
	Postgresql []PostgresqlInitParameters `json:"postgresql,omitempty" tf:"postgresql,omitempty"`

	// A nested block containing configuration options for Redis connections.
	// Connection parameters for the redis-database-plugin plugin.
	Redis []RedisInitParameters `json:"redis,omitempty" tf:"redis,omitempty"`

	// A nested block containing configuration options for Redis ElastiCache connections.
	// Connection parameters for the redis-elasticache-database-plugin plugin.
	RedisElasticache []RedisElasticacheInitParameters `json:"redisElasticache,omitempty" tf:"redis_elasticache,omitempty"`

	// Connection parameters for the redshift-database-plugin plugin.
	Redshift []RedshiftInitParameters `json:"redshift,omitempty" tf:"redshift,omitempty"`

	// A list of database statements to be executed to rotate the root user's credentials.
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []*string `json:"rootRotationStatements,omitempty" tf:"root_rotation_statements,omitempty"`

	// A nested block containing configuration options for Snowflake connections.
	// Connection parameters for the snowflake-database-plugin plugin.
	Snowflake []SnowflakeInitParameters `json:"snowflake,omitempty" tf:"snowflake,omitempty"`

	// Whether the connection should be verified on
	// initial configuration or not.
	// Specifies if the connection is verified during initial configuration.
	VerifyConnection *bool `json:"verifyConnection,omitempty" tf:"verify_connection,omitempty"`
}

type SecretBackendConnectionObservation struct {

	// A list of roles that are allowed to use this
	// connection.
	// A list of roles that are allowed to use this connection.
	AllowedRoles []*string `json:"allowedRoles,omitempty" tf:"allowed_roles,omitempty"`

	// The unique name of the Vault mount to configure.
	// Unique name of the Vault mount to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// A nested block containing configuration options for Cassandra connections.
	// Connection parameters for the cassandra-database-plugin plugin.
	Cassandra []CassandraObservation `json:"cassandra,omitempty" tf:"cassandra,omitempty"`

	// A nested block containing configuration options for Couchbase connections.
	// Connection parameters for the couchbase-database-plugin plugin.
	Couchbase []CouchbaseObservation `json:"couchbase,omitempty" tf:"couchbase,omitempty"`

	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	// +mapType=granular
	Data map[string]*string `json:"data,omitempty" tf:"data,omitempty"`

	// A nested block containing configuration options for Elasticsearch connections.
	// Connection parameters for the elasticsearch-database-plugin.
	Elasticsearch []ElasticsearchObservation `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// A nested block containing configuration options for SAP HanaDB connections.
	// Connection parameters for the hana-database-plugin plugin.
	Hana []HanaObservation `json:"hana,omitempty" tf:"hana,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A nested block containing configuration options for InfluxDB connections.
	// Connection parameters for the influxdb-database-plugin plugin.
	Influxdb []InfluxdbObservation `json:"influxdb,omitempty" tf:"influxdb,omitempty"`

	// A nested block containing configuration options for MongoDB connections.
	// Connection parameters for the mongodb-database-plugin plugin.
	Mongodb []MongodbObservation `json:"mongodb,omitempty" tf:"mongodb,omitempty"`

	// A nested block containing configuration options for MongoDB Atlas connections.
	// Connection parameters for the mongodbatlas-database-plugin plugin.
	Mongodbatlas []MongodbatlasObservation `json:"mongodbatlas,omitempty" tf:"mongodbatlas,omitempty"`

	// A nested block containing configuration options for MSSQL connections.
	// Connection parameters for the mssql-database-plugin plugin.
	Mssql []MssqlObservation `json:"mssql,omitempty" tf:"mssql,omitempty"`

	// A nested block containing configuration options for MySQL connections.
	// Connection parameters for the mysql-database-plugin plugin.
	MySQL []MySQLObservation `json:"mysql,omitempty" tf:"mysql,omitempty"`

	// A nested block containing configuration options for Aurora MySQL connections.
	// Connection parameters for the mysql-aurora-database-plugin plugin.
	MySQLAurora []MySQLAuroraObservation `json:"mysqlAurora,omitempty" tf:"mysql_aurora,omitempty"`

	// A nested block containing configuration options for legacy MySQL connections.
	// Connection parameters for the mysql-legacy-database-plugin plugin.
	MySQLLegacy []MySQLLegacyObservation `json:"mysqlLegacy,omitempty" tf:"mysql_legacy,omitempty"`

	// A nested block containing configuration options for RDS MySQL connections.
	// Connection parameters for the mysql-rds-database-plugin plugin.
	MySQLRDS []MySQLRDSObservation `json:"mysqlRds,omitempty" tf:"mysql_rds,omitempty"`

	// A unique name to give the database connection.
	// Name of the database connection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// A nested block containing configuration options for Oracle connections.
	// Connection parameters for the oracle-database-plugin plugin.
	Oracle []OracleObservation `json:"oracle,omitempty" tf:"oracle,omitempty"`

	// Specifies the name of the plugin to use.
	// Specifies the name of the plugin to use for this connection. Must be prefixed with the name of one of the supported database engine types.
	PluginName *string `json:"pluginName,omitempty" tf:"plugin_name,omitempty"`

	// A nested block containing configuration options for PostgreSQL connections.
	// Connection parameters for the postgresql-database-plugin plugin.
	Postgresql []PostgresqlObservation `json:"postgresql,omitempty" tf:"postgresql,omitempty"`

	// A nested block containing configuration options for Redis connections.
	// Connection parameters for the redis-database-plugin plugin.
	Redis []RedisObservation `json:"redis,omitempty" tf:"redis,omitempty"`

	// A nested block containing configuration options for Redis ElastiCache connections.
	// Connection parameters for the redis-elasticache-database-plugin plugin.
	RedisElasticache []RedisElasticacheObservation `json:"redisElasticache,omitempty" tf:"redis_elasticache,omitempty"`

	// Connection parameters for the redshift-database-plugin plugin.
	Redshift []RedshiftObservation `json:"redshift,omitempty" tf:"redshift,omitempty"`

	// A list of database statements to be executed to rotate the root user's credentials.
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []*string `json:"rootRotationStatements,omitempty" tf:"root_rotation_statements,omitempty"`

	// A nested block containing configuration options for Snowflake connections.
	// Connection parameters for the snowflake-database-plugin plugin.
	Snowflake []SnowflakeObservation `json:"snowflake,omitempty" tf:"snowflake,omitempty"`

	// Whether the connection should be verified on
	// initial configuration or not.
	// Specifies if the connection is verified during initial configuration.
	VerifyConnection *bool `json:"verifyConnection,omitempty" tf:"verify_connection,omitempty"`
}

type SecretBackendConnectionParameters struct {

	// A list of roles that are allowed to use this
	// connection.
	// A list of roles that are allowed to use this connection.
	// +kubebuilder:validation:Optional
	AllowedRoles []*string `json:"allowedRoles,omitempty" tf:"allowed_roles,omitempty"`

	// The unique name of the Vault mount to configure.
	// Unique name of the Vault mount to configure.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/vault/v1alpha1.Mount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("path",false)
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Reference to a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendRef *v1.Reference `json:"backendRef,omitempty" tf:"-"`

	// Selector for a Mount in vault to populate backend.
	// +kubebuilder:validation:Optional
	BackendSelector *v1.Selector `json:"backendSelector,omitempty" tf:"-"`

	// A nested block containing configuration options for Cassandra connections.
	// Connection parameters for the cassandra-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Cassandra []CassandraParameters `json:"cassandra,omitempty" tf:"cassandra,omitempty"`

	// A nested block containing configuration options for Couchbase connections.
	// Connection parameters for the couchbase-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Couchbase []CouchbaseParameters `json:"couchbase,omitempty" tf:"couchbase,omitempty"`

	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Data map[string]*string `json:"data,omitempty" tf:"data,omitempty"`

	// A nested block containing configuration options for Elasticsearch connections.
	// Connection parameters for the elasticsearch-database-plugin.
	// +kubebuilder:validation:Optional
	Elasticsearch []ElasticsearchParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// A nested block containing configuration options for SAP HanaDB connections.
	// Connection parameters for the hana-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Hana []HanaParameters `json:"hana,omitempty" tf:"hana,omitempty"`

	// A nested block containing configuration options for InfluxDB connections.
	// Connection parameters for the influxdb-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Influxdb []InfluxdbParameters `json:"influxdb,omitempty" tf:"influxdb,omitempty"`

	// A nested block containing configuration options for MongoDB connections.
	// Connection parameters for the mongodb-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Mongodb []MongodbParameters `json:"mongodb,omitempty" tf:"mongodb,omitempty"`

	// A nested block containing configuration options for MongoDB Atlas connections.
	// Connection parameters for the mongodbatlas-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Mongodbatlas []MongodbatlasParameters `json:"mongodbatlas,omitempty" tf:"mongodbatlas,omitempty"`

	// A nested block containing configuration options for MSSQL connections.
	// Connection parameters for the mssql-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Mssql []MssqlParameters `json:"mssql,omitempty" tf:"mssql,omitempty"`

	// A nested block containing configuration options for MySQL connections.
	// Connection parameters for the mysql-database-plugin plugin.
	// +kubebuilder:validation:Optional
	MySQL []MySQLParameters `json:"mysql,omitempty" tf:"mysql,omitempty"`

	// A nested block containing configuration options for Aurora MySQL connections.
	// Connection parameters for the mysql-aurora-database-plugin plugin.
	// +kubebuilder:validation:Optional
	MySQLAurora []MySQLAuroraParameters `json:"mysqlAurora,omitempty" tf:"mysql_aurora,omitempty"`

	// A nested block containing configuration options for legacy MySQL connections.
	// Connection parameters for the mysql-legacy-database-plugin plugin.
	// +kubebuilder:validation:Optional
	MySQLLegacy []MySQLLegacyParameters `json:"mysqlLegacy,omitempty" tf:"mysql_legacy,omitempty"`

	// A nested block containing configuration options for RDS MySQL connections.
	// Connection parameters for the mysql-rds-database-plugin plugin.
	// +kubebuilder:validation:Optional
	MySQLRDS []MySQLRDSParameters `json:"mysqlRds,omitempty" tf:"mysql_rds,omitempty"`

	// A unique name to give the database connection.
	// Name of the database connection.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// A nested block containing configuration options for Oracle connections.
	// Connection parameters for the oracle-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Oracle []OracleParameters `json:"oracle,omitempty" tf:"oracle,omitempty"`

	// Specifies the name of the plugin to use.
	// Specifies the name of the plugin to use for this connection. Must be prefixed with the name of one of the supported database engine types.
	// +kubebuilder:validation:Optional
	PluginName *string `json:"pluginName,omitempty" tf:"plugin_name,omitempty"`

	// A nested block containing configuration options for PostgreSQL connections.
	// Connection parameters for the postgresql-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Postgresql []PostgresqlParameters `json:"postgresql,omitempty" tf:"postgresql,omitempty"`

	// A nested block containing configuration options for Redis connections.
	// Connection parameters for the redis-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Redis []RedisParameters `json:"redis,omitempty" tf:"redis,omitempty"`

	// A nested block containing configuration options for Redis ElastiCache connections.
	// Connection parameters for the redis-elasticache-database-plugin plugin.
	// +kubebuilder:validation:Optional
	RedisElasticache []RedisElasticacheParameters `json:"redisElasticache,omitempty" tf:"redis_elasticache,omitempty"`

	// Connection parameters for the redshift-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Redshift []RedshiftParameters `json:"redshift,omitempty" tf:"redshift,omitempty"`

	// A list of database statements to be executed to rotate the root user's credentials.
	// A list of database statements to be executed to rotate the root user's credentials.
	// +kubebuilder:validation:Optional
	RootRotationStatements []*string `json:"rootRotationStatements,omitempty" tf:"root_rotation_statements,omitempty"`

	// A nested block containing configuration options for Snowflake connections.
	// Connection parameters for the snowflake-database-plugin plugin.
	// +kubebuilder:validation:Optional
	Snowflake []SnowflakeParameters `json:"snowflake,omitempty" tf:"snowflake,omitempty"`

	// Whether the connection should be verified on
	// initial configuration or not.
	// Specifies if the connection is verified during initial configuration.
	// +kubebuilder:validation:Optional
	VerifyConnection *bool `json:"verifyConnection,omitempty" tf:"verify_connection,omitempty"`
}

type SnowflakeInitParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type SnowflakeObservation struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type SnowflakeParameters struct {

	// A URL containing connection information. See
	// the Vault
	// docs
	// for an example.
	// Connection string to use to connect to the database.
	// +kubebuilder:validation:Optional
	ConnectionURL *string `json:"connectionUrl,omitempty" tf:"connection_url,omitempty"`

	// The maximum number of seconds to keep
	// a connection alive for.
	// Maximum number of seconds a connection may be reused.
	// +kubebuilder:validation:Optional
	MaxConnectionLifetime *float64 `json:"maxConnectionLifetime,omitempty" tf:"max_connection_lifetime,omitempty"`

	// The maximum number of idle connections to
	// maintain.
	// Maximum number of idle connections to the database.
	// +kubebuilder:validation:Optional
	MaxIdleConnections *float64 `json:"maxIdleConnections,omitempty" tf:"max_idle_connections,omitempty"`

	// The maximum number of open connections to
	// use.
	// Maximum number of open connections to the database.
	// +kubebuilder:validation:Optional
	MaxOpenConnections *float64 `json:"maxOpenConnections,omitempty" tf:"max_open_connections,omitempty"`

	// The password to authenticate with.
	// The root credential password used in the connection URL
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The username to authenticate with.
	// The root credential username used in the connection URL
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Template describing how dynamic usernames are generated.
	// Username generation template.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

// SecretBackendConnectionSpec defines the desired state of SecretBackendConnection
type SecretBackendConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendConnectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendConnectionInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendConnectionStatus defines the observed state of SecretBackendConnection.
type SecretBackendConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackendConnection is the Schema for the SecretBackendConnections API. Configures a database secret backend connection for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SecretBackendConnectionSpec   `json:"spec"`
	Status SecretBackendConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendConnectionList contains a list of SecretBackendConnections
type SecretBackendConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendConnection `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendConnection_Kind             = "SecretBackendConnection"
	SecretBackendConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendConnection_Kind}.String()
	SecretBackendConnection_KindAPIVersion   = SecretBackendConnection_Kind + "." + CRDGroupVersion.String()
	SecretBackendConnection_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendConnection{}, &SecretBackendConnectionList{})
}
