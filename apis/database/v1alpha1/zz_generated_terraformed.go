/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this SecretBackendConnection
func (mg *SecretBackendConnection) GetTerraformResourceType() string {
	return "vault_database_secret_backend_connection"
}

// GetConnectionDetailsMapping for this SecretBackendConnection
func (tr *SecretBackendConnection) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"cassandra[*].password": "spec.forProvider.cassandra[*].passwordSecretRef", "cassandra[*].pem_bundle": "spec.forProvider.cassandra[*].pemBundleSecretRef", "cassandra[*].pem_json": "spec.forProvider.cassandra[*].pemJsonSecretRef", "couchbase[*].base64_pem": "spec.forProvider.couchbase[*].base64PemSecretRef", "couchbase[*].password": "spec.forProvider.couchbase[*].passwordSecretRef", "elasticsearch[*].password": "spec.forProvider.elasticsearch[*].passwordSecretRef", "hana[*].password": "spec.forProvider.hana[*].passwordSecretRef", "influxdb[*].password": "spec.forProvider.influxdb[*].passwordSecretRef", "influxdb[*].pem_bundle": "spec.forProvider.influxdb[*].pemBundleSecretRef", "influxdb[*].pem_json": "spec.forProvider.influxdb[*].pemJsonSecretRef", "mongodb[*].password": "spec.forProvider.mongodb[*].passwordSecretRef", "mongodbatlas[*].private_key": "spec.forProvider.mongodbatlas[*].privateKeySecretRef", "mssql[*].password": "spec.forProvider.mssql[*].passwordSecretRef", "mysql[*].password": "spec.forProvider.mysql[*].passwordSecretRef", "mysql[*].service_account_json": "spec.forProvider.mysql[*].serviceAccountJsonSecretRef", "mysql[*].tls_certificate_key": "spec.forProvider.mysql[*].tlsCertificateKeySecretRef", "mysql_aurora[*].password": "spec.forProvider.mysqlAurora[*].passwordSecretRef", "mysql_aurora[*].service_account_json": "spec.forProvider.mysqlAurora[*].serviceAccountJsonSecretRef", "mysql_aurora[*].tls_certificate_key": "spec.forProvider.mysqlAurora[*].tlsCertificateKeySecretRef", "mysql_legacy[*].password": "spec.forProvider.mysqlLegacy[*].passwordSecretRef", "mysql_legacy[*].service_account_json": "spec.forProvider.mysqlLegacy[*].serviceAccountJsonSecretRef", "mysql_legacy[*].tls_certificate_key": "spec.forProvider.mysqlLegacy[*].tlsCertificateKeySecretRef", "mysql_rds[*].password": "spec.forProvider.mysqlRds[*].passwordSecretRef", "mysql_rds[*].service_account_json": "spec.forProvider.mysqlRds[*].serviceAccountJsonSecretRef", "mysql_rds[*].tls_certificate_key": "spec.forProvider.mysqlRds[*].tlsCertificateKeySecretRef", "oracle[*].password": "spec.forProvider.oracle[*].passwordSecretRef", "postgresql[*].password": "spec.forProvider.postgresql[*].passwordSecretRef", "postgresql[*].service_account_json": "spec.forProvider.postgresql[*].serviceAccountJsonSecretRef", "redis[*].password": "spec.forProvider.redis[*].passwordSecretRef", "redis_elasticache[*].password": "spec.forProvider.redisElasticache[*].passwordSecretRef", "redis_elasticache[*].username": "spec.forProvider.redisElasticache[*].usernameSecretRef", "redshift[*].password": "spec.forProvider.redshift[*].passwordSecretRef", "snowflake[*].password": "spec.forProvider.snowflake[*].passwordSecretRef"}
}

// GetObservation of this SecretBackendConnection
func (tr *SecretBackendConnection) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendConnection
func (tr *SecretBackendConnection) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendConnection
func (tr *SecretBackendConnection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendConnection
func (tr *SecretBackendConnection) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendConnection
func (tr *SecretBackendConnection) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendConnection
func (tr *SecretBackendConnection) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendConnection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendConnection) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendConnectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendConnection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendRole
func (mg *SecretBackendRole) GetTerraformResourceType() string {
	return "vault_database_secret_backend_role"
}

// GetConnectionDetailsMapping for this SecretBackendRole
func (tr *SecretBackendRole) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendRole
func (tr *SecretBackendRole) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendRole
func (tr *SecretBackendRole) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendRole
func (tr *SecretBackendRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendRole
func (tr *SecretBackendRole) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendRole
func (tr *SecretBackendRole) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendRole
func (tr *SecretBackendRole) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendRole) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendStaticRole
func (mg *SecretBackendStaticRole) GetTerraformResourceType() string {
	return "vault_database_secret_backend_static_role"
}

// GetConnectionDetailsMapping for this SecretBackendStaticRole
func (tr *SecretBackendStaticRole) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendStaticRole
func (tr *SecretBackendStaticRole) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendStaticRole
func (tr *SecretBackendStaticRole) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendStaticRole
func (tr *SecretBackendStaticRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendStaticRole
func (tr *SecretBackendStaticRole) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendStaticRole
func (tr *SecretBackendStaticRole) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendStaticRole
func (tr *SecretBackendStaticRole) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendStaticRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendStaticRole) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendStaticRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendStaticRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretsMount
func (mg *SecretsMount) GetTerraformResourceType() string {
	return "vault_database_secrets_mount"
}

// GetConnectionDetailsMapping for this SecretsMount
func (tr *SecretsMount) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"cassandra[*].password": "spec.forProvider.cassandra[*].passwordSecretRef", "cassandra[*].pem_bundle": "spec.forProvider.cassandra[*].pemBundleSecretRef", "cassandra[*].pem_json": "spec.forProvider.cassandra[*].pemJsonSecretRef", "couchbase[*].base64_pem": "spec.forProvider.couchbase[*].base64PemSecretRef", "couchbase[*].password": "spec.forProvider.couchbase[*].passwordSecretRef", "elasticsearch[*].password": "spec.forProvider.elasticsearch[*].passwordSecretRef", "hana[*].password": "spec.forProvider.hana[*].passwordSecretRef", "influxdb[*].password": "spec.forProvider.influxdb[*].passwordSecretRef", "influxdb[*].pem_bundle": "spec.forProvider.influxdb[*].pemBundleSecretRef", "influxdb[*].pem_json": "spec.forProvider.influxdb[*].pemJsonSecretRef", "mongodb[*].password": "spec.forProvider.mongodb[*].passwordSecretRef", "mongodbatlas[*].private_key": "spec.forProvider.mongodbatlas[*].privateKeySecretRef", "mssql[*].password": "spec.forProvider.mssql[*].passwordSecretRef", "mysql[*].password": "spec.forProvider.mysql[*].passwordSecretRef", "mysql[*].service_account_json": "spec.forProvider.mysql[*].serviceAccountJsonSecretRef", "mysql[*].tls_certificate_key": "spec.forProvider.mysql[*].tlsCertificateKeySecretRef", "mysql_aurora[*].password": "spec.forProvider.mysqlAurora[*].passwordSecretRef", "mysql_aurora[*].service_account_json": "spec.forProvider.mysqlAurora[*].serviceAccountJsonSecretRef", "mysql_aurora[*].tls_certificate_key": "spec.forProvider.mysqlAurora[*].tlsCertificateKeySecretRef", "mysql_legacy[*].password": "spec.forProvider.mysqlLegacy[*].passwordSecretRef", "mysql_legacy[*].service_account_json": "spec.forProvider.mysqlLegacy[*].serviceAccountJsonSecretRef", "mysql_legacy[*].tls_certificate_key": "spec.forProvider.mysqlLegacy[*].tlsCertificateKeySecretRef", "mysql_rds[*].password": "spec.forProvider.mysqlRds[*].passwordSecretRef", "mysql_rds[*].service_account_json": "spec.forProvider.mysqlRds[*].serviceAccountJsonSecretRef", "mysql_rds[*].tls_certificate_key": "spec.forProvider.mysqlRds[*].tlsCertificateKeySecretRef", "oracle[*].password": "spec.forProvider.oracle[*].passwordSecretRef", "postgresql[*].password": "spec.forProvider.postgresql[*].passwordSecretRef", "postgresql[*].service_account_json": "spec.forProvider.postgresql[*].serviceAccountJsonSecretRef", "redis[*].password": "spec.forProvider.redis[*].passwordSecretRef", "redis_elasticache[*].password": "spec.forProvider.redisElasticache[*].passwordSecretRef", "redis_elasticache[*].username": "spec.forProvider.redisElasticache[*].usernameSecretRef", "redshift[*].password": "spec.forProvider.redshift[*].passwordSecretRef", "snowflake[*].password": "spec.forProvider.snowflake[*].passwordSecretRef"}
}

// GetObservation of this SecretsMount
func (tr *SecretsMount) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretsMount
func (tr *SecretsMount) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretsMount
func (tr *SecretsMount) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretsMount
func (tr *SecretsMount) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretsMount
func (tr *SecretsMount) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretsMount
func (tr *SecretsMount) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretsMount using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretsMount) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretsMountParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretsMount) GetTerraformSchemaVersion() int {
	return 0
}
