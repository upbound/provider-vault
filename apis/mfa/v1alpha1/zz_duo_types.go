/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DuoInitParameters struct {

	// API hostname for Duo.
	// API hostname for Duo.
	APIHostname *string `json:"apiHostname,omitempty" tf:"api_hostname,omitempty"`

	// Integration key for Duo.
	// Integration key for Duo.
	IntegrationKeySecretRef v1.SecretKeySelector `json:"integrationKeySecretRef" tf:"-"`

	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("accessor",true)
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Reference to a Backend in auth to populate mountAccessor.
	// +kubebuilder:validation:Optional
	MountAccessorRef *v1.Reference `json:"mountAccessorRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate mountAccessor.
	// +kubebuilder:validation:Optional
	MountAccessorSelector *v1.Selector `json:"mountAccessorSelector,omitempty" tf:"-"`

	// (string: <required>) – Name of the MFA method.
	// Name of the MFA method.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Push information for Duo.
	// Push information for Duo.
	PushInfo *string `json:"pushInfo,omitempty" tf:"push_info,omitempty"`

	// Secret key for Duo.
	// Secret key for Duo.
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`

	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in {{}}. For example, "{{alias.name}}@example.com". If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

type DuoObservation struct {

	// API hostname for Duo.
	// API hostname for Duo.
	APIHostname *string `json:"apiHostname,omitempty" tf:"api_hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// (string: <required>) – Name of the MFA method.
	// Name of the MFA method.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Push information for Duo.
	// Push information for Duo.
	PushInfo *string `json:"pushInfo,omitempty" tf:"push_info,omitempty"`

	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in {{}}. For example, "{{alias.name}}@example.com". If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

type DuoParameters struct {

	// API hostname for Duo.
	// API hostname for Duo.
	// +kubebuilder:validation:Optional
	APIHostname *string `json:"apiHostname,omitempty" tf:"api_hostname,omitempty"`

	// Integration key for Duo.
	// Integration key for Duo.
	// +kubebuilder:validation:Optional
	IntegrationKeySecretRef v1.SecretKeySelector `json:"integrationKeySecretRef" tf:"-"`

	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	// +crossplane:generate:reference:type=github.com/upbound/provider-vault/v2/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("accessor",true)
	// +kubebuilder:validation:Optional
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Reference to a Backend in auth to populate mountAccessor.
	// +kubebuilder:validation:Optional
	MountAccessorRef *v1.Reference `json:"mountAccessorRef,omitempty" tf:"-"`

	// Selector for a Backend in auth to populate mountAccessor.
	// +kubebuilder:validation:Optional
	MountAccessorSelector *v1.Selector `json:"mountAccessorSelector,omitempty" tf:"-"`

	// (string: <required>) – Name of the MFA method.
	// Name of the MFA method.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Push information for Duo.
	// Push information for Duo.
	// +kubebuilder:validation:Optional
	PushInfo *string `json:"pushInfo,omitempty" tf:"push_info,omitempty"`

	// Secret key for Duo.
	// Secret key for Duo.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`

	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in {{}}. For example, "{{alias.name}}@example.com". If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	// +kubebuilder:validation:Optional
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

// DuoSpec defines the desired state of Duo
type DuoSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DuoParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DuoInitParameters `json:"initProvider,omitempty"`
}

// DuoStatus defines the observed state of Duo.
type DuoStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DuoObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Duo is the Schema for the Duos API. Managing the MFA Duo method configuration
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Duo struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiHostname) || (has(self.initProvider) && has(self.initProvider.apiHostname))",message="spec.forProvider.apiHostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.integrationKeySecretRef)",message="spec.forProvider.integrationKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretKeySecretRef)",message="spec.forProvider.secretKeySecretRef is a required parameter"
	Spec   DuoSpec   `json:"spec"`
	Status DuoStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DuoList contains a list of Duos
type DuoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Duo `json:"items"`
}

// Repository type metadata.
var (
	Duo_Kind             = "Duo"
	Duo_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Duo_Kind}.String()
	Duo_KindAPIVersion   = Duo_Kind + "." + CRDGroupVersion.String()
	Duo_GroupVersionKind = CRDGroupVersion.WithKind(Duo_Kind)
)

func init() {
	SchemeBuilder.Register(&Duo{}, &DuoList{})
}
